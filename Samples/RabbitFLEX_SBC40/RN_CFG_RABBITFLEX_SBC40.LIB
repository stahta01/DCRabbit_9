/*** Beginheader */
#ifndef __RN_CFG_RABBITFLEX_SBC40_LIB
#define __RN_CFG_RABBITFLEX_SBC40_LIB

#if (!RABBITFLEX_SBC40_SERIES)
#error "RN_CFG_RABBITFLEX_SBC40.LIB only supports RABBITFLEX_SBC40 series boards."
#endif
/*** endheader */


/* START LIBRARY DESCRIPTION *********************************************
RN_CFG_RABBITFLEX_SBC40.LIB
Copyright (c) 2004 Z-World Inc

DESCRIPTION:    This is a sample library only.

	This library contains user configurable definitions for RabbitNet
   Devices and RABBITFLEX_SBC40 series controllers.

SUPPORT LIBS:

		#use "rnet.lib"            //RabbitNet library
		#use "rnet_dio.lib"        //RabbitNet device libraries
		#use "rnet_ain.lib"
		#use "rnet_aout.lib"
		#use "rnet_relay.lib"
		#use "rnet_keyif.lib"
		#use "rnet_lcdif.lib"

REVISION HISTORY:

END DESCRIPTION **********************************************************/


/********************************************************************
 ********************************************************************
 Do not make any changes to the following section. Scroll down to
 the Configuration Section to match your settings
********************************************************************
********************************************************************/

/*** Beginheader */

#define REC_OP 			0x40		//starts a receive operation
#define TRANS_OP 			0x80		//starts a transmit operation
#define REC_TRANS_OP 	0xC0		//starts a transmit and receive operation
#define USE_ALT			0x10		//use alternate port for input, serial ports A or B only
#define DISABLE_REC		0x20		//disable receiver input
#define INTERNAL_CLOCK 	0x0C		//use internal clock, usually master side
#define EXTERNAL_CLOCK 	0x08		//use external clock, usually slave side

/*** Endheader */

/********************************************************************
 ********************************************************************
	Configuration Section
	Make changes to the following to match your settings.
********************************************************************
********************************************************************/

/*** Beginheader  */

/// Status byte abort mask
/// Setting the following bits will only abort transmitting data
///	after the status byte is returned.  This does not affect
///   the status byte and still can be interpreted.
// set any bit combination to abort:
// bit 7 device busy (hard-coded into driver)
// bit 4 communication error
// bit 1 command rejected
// bit 0	watchdog timeout
///
#ifndef RNSTATUSABORT
#define RNSTATUSABORT 0x80     //hard-coded driver default to abort if device busy
#endif

#ifndef RN_MAX_DEV
#define RN_MAX_DEV 10	//max number of devices, not to exceed 72
#endif

#ifndef RN_MAX_DATA
#define RN_MAX_DATA 16	//max number of data bytes in any transaction, not to exceed 255
#endif

#ifndef RN_MAX_PORT
#define RN_MAX_PORT 1	//max number of serial ports, not to exceed 4
#define RN_PORTS 0x01	//bit mask for all ports
#endif

#ifndef RN_SPI_BAUD
#define RN_SPI_BAUD 115200L //baudrate, 115200L gives 1 megabit data tranfer
#endif

/*** EndHeader */

/*** Beginheader rn_sp_info */
void rn_sp_info();

typedef struct
{
	char controltx;
	char controlrx;
	char controlreg;
	char statusreg;
	char datareg;
	long clockrate;
} _RNPORTINFO;

extern _RNPORTINFO rnportinfo[RN_MAX_PORT];

/*** EndHeader */

_RNPORTINFO rnportinfo[RN_MAX_PORT];

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_info						<RN_CFG_RABBITFLEX_SBC.LIB>

SYNTAX:		void rn_sp_info();

DESCRIPTION:	Provides rn_init() with necessary serial port control
					information for RABBITFLEX_SBC series controllers.

RETURN VALUE:	None

END DESCRIPTION **********************************************************/
nodebug
void rn_sp_info()
{
	rnportinfo[0].controltx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[0].controlrx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[0].controlreg = SCCR;
	rnportinfo[0].statusreg = SCSR;
	rnportinfo[0].datareg = SCDR;
	rnportinfo[0].clockrate = RN_SPI_BAUD;

}

/*** Beginheader _rn_sp_fastenable */
root void _rn_sp_fastenable(unsigned int portvalue);
/*** Endheader  */

/* _START FUNCTION DESCRIPTION ********************************************
_rn_sp_fastenable				<RN_CFG_RABBITFLEX_SBC.LIB>

SYNTAX: 			root void _rn_sp_fastenable(unsigned int portvalue);

PARAMETER1:    Value to send to the I/O port pin.


RETURN VALUE:  None
END DESCRIPTION **********************************************************/
#asm root nodebug
_rn_sp_fastenable::
	ld 	hl,(sp+2) ; address of reg
   ld		a,l
   cp		0
   jr		z,.enablelow
.enablehigh:
	ld		de,PGDR
	ld 	hl,PGDRShadow
 	ipset	1
	set 	4,(hl)      ;active high chip select
   ioi 	ldd
	ipres
	ret

.enablelow:
	ld		de,PGDR
	ld 	hl,PGDRShadow
 	ipset	1
	res	4,(hl)      ;active low chip select
	ioi 	ldd
	ipres
   ret
#endasm

/*** Beginheader _rn_sp_fastdisable */
root void _rn_sp_fastdisable(unsigned int portvalue);
/*** Endheader  */

/* _START FUNCTION DESCRIPTION ********************************************
_rn_sp_fastdisable				<RN_CFG_RABBITFLEX_SBC.LIB>

SYNTAX: 			root void _rn_sp_fastdisable(unsigned int portvalue);

PARAMETER1:    Value to send send to the I/O port pin.


RETURN VALUE:  None
END DESCRIPTION **********************************************************/
#asm root nodebug
_rn_sp_fastdisable::
	ld 	hl,(sp+2) ; address of reg
   ld		a,l
   cp		0
   jr		nz,.enablelow
.enablehigh:
	ld		de,PGDR
	ld 	hl,PGDRShadow
	ipset	1
	set 	4,(hl)
   ioi 	ldd
	ipres
	ret

.enablelow:
	ld		de,PGDR
	ld 	hl,PGDRShadow
 	ipset	1
	res 	4,(hl)
	ioi 	ldd
	ipres
   ret
#endasm




/*** Beginheader rn_sp_enable, rn_sp_disable */

void rn_sp_enable(int portnum);
void rn_sp_disable(int portnum);

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_enable						<RN_CFG_RABBITFLEX_SBC.LIB>

SYNTAX:		void rn_sp_enable(int portnum);

DESCRIPTION:	Macro that enables or asserts RABBITFLEX_SBC series
					controller RabbitNet port chip select prior to
					data transfer.

PARAMETER1:		portnum = 0

RETURN VALUE:	None

END DESCRIPTION **********************************************************/
debug
void rn_sp_enable(int portnum)
{
#asm debug
	ld		a,(PGDRShadow)
   res	4,a
   ioi	ld (PGDR),a
	ld		(PGDRShadow),a
#endasm
}

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_disable						<RN_CFG_RABBITFLEX_SBC.LIB>

SYNTAX:		void rn_sp_disable(int portnum);

DESCRIPTION:	Macro that disables or deasserts RABBITFLEX_SBC series
					controller RabbitNet port chip select invalidating data
					transfer.

PARAMETER1:		portnum = 0

RETURN VALUE:	None

END DESCRIPTION **********************************************************/
debug
void rn_sp_disable(int portnum)
{
#asm debug
	ld		a,(PGDRShadow)
   set	4,a
   ioi	ld (PGDR),a
	ld		(PGDRShadow),a
#endasm
}


/*** Beginheader rn_sp_init */
void rn_sp_init(int port, long clkrate);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_init						<RN_CFG_RABBITFLEX_SBC.LIB>

SYNTAX:		void rn_sp_init(int portnum, long clkrate);

DESCRIPTION:	Configures and initializes an RABBITFLEX_SBC series
					controller RabbitNet port as a clocked serial port.
					This call is used rn_init().

PARAMETER1:		portnum = 0
PARAMETER2:		baudrate, user defines macro RN_SPI_BAUD. If not defined,
					will default to 115200L which gives 1 megabit data transfer.

RETURN VALUE:	None

SEE ALSO:		rn_sp_close

END DESCRIPTION **********************************************************/
nodebug
root void rn_sp_init(int port, long clkrate)
{
	auto int tdivisor;

	tdivisor = (int)((freq_divider * 19200.0/(float)clkrate + 0.5) - 1L);
	WrPortI(TAT6R, &TAT6RShadow, tdivisor); //timer for serial port
	WrPortI(SCCR, &SCCRShadow, INTERNAL_CLOCK);
	WrPortI(SCER, &SCERShadow, 0x00);
	BitWrPortI(PCFR, &PCFRShadow, 1, 2);    //set serial port
	BitWrPortI(PFFR, &PFFRShadow, 1, 1);    //set serial port clock
	BitWrPortI(PGDDR, &PGDDRShadow, 1, 4);  //set PG4 (CS) as output
}

/*** Beginheader rn_sp_close */
void rn_sp_close(int port);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_close						<RN_CFG_RABBITFLEX_SBC.LIB>

SYNTAX:		void rn_sp_close(int port);

DESCRIPTION:	Deactivates RABBITFLEX_SBC series controller
					RabbitNet port as a clocked serial port.
					This call is used in rn_init().

PARAMETER1:		portnum = 0

RETURN VALUE:	None

SEE ALSO:		rn_sp_init

END DESCRIPTION **********************************************************/
nodebug
void rn_sp_close(int port)
{
	rn_sp_disable(port);							//disable port select
	BitWrPortI(PCFR, &PCFRShadow, 0, 2);	//disable serial port
	BitWrPortI(PCDR, &PCDRShadow, 1, 2);	//set back to normal output high
	BitWrPortI(PFFR, &PFFRShadow, 0, 1);	//disable serial port clock
	BitWrPortI(PFDDR, &PFDDRShadow, 0, 1); //set back to normal input
}


/*** BeginHeader */
#endif
/*** EndHeader */

