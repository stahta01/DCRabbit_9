/*
   Copyright (c) 2015, Digi International Inc.

   Permission to use, copy, modify, and/or distribute this software for any
   purpose with or without fee is hereby granted, provided that the above
   copyright notice and this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
/*** Beginheader */
#ifndef __RN_CFG_POWERCOREFLEX_LIB
#define __RN_CFG_POWERCOREFLEX_LIB

#if !POWERCOREFLEX_SERIES
#error "RN_CFG_POWERCOREFLEX.LIB only supports PowerCoreFLEX series boards."
#endif
/*** endheader */

/* START LIBRARY DESCRIPTION *********************************************
RN_CFG_POWERCOREFLEX.LIB

DESCRIPTION:
	This library contains user configurable definitions for RabbitNet
   devices and PowerCoreFLEX series core modules (This is a sample library
   only).


SUPPORT LIBS:
	This configuration library may be used as a basis for other controllers
   using RabbitNet Devices.  Libraries should be #used in the following
   order:

   	#use PowerCoreFLEX.lib"		Core module sample LIB
		#use "rnet.lib"            RabbitNet library
		#use "rnet_dio.lib"        RabbitNet device libraries
		#use "rnet_ain.lib"
		#use "rnet_aout.lib"

REVISION HISTORY:
	06/25/04	EK 	Initial Creation

END DESCRIPTION **********************************************************/


/********************************************************************
 ********************************************************************
 Do not make any changes to the following section. Scroll down to
 the Configuration Section to match your settings
********************************************************************
********************************************************************/

/*** Beginheader */

#define REC_OP 			0x40		//starts a receive operation
#define TRANS_OP 			0x80		//starts a transmit operation
#define REC_TRANS_OP 	0xC0		//starts a transmit and receive operation
#define USE_ALT			0x10		//use alternate port for input, serial ports A or B only
#define DISABLE_REC		0x20		//disable receiver input
#define INTERNAL_CLOCK 	0x0C		//use internal clock, usually master side
#define EXTERNAL_CLOCK 	0x08		//use external clock, usually slave side


/*** Endheader */

/********************************************************************
 ********************************************************************
	Configuration Section
	Make changes to the following to match your settings.
********************************************************************
********************************************************************/

/*** Beginheader  */

/// Status byte abort mask
/// Setting the following bits will only abort transmitting data
///	after the status byte is returned.  This does not affect
///   the status byte and still can be interpreted.
// set any bit combination to abort:
// bit 7 device busy (hard-coded into driver)
// bit 4 communication error
// bit 1 command rejected
// bit 0	watchdog timeout
///
#ifndef RNSTATUSABORT
#define RNSTATUSABORT 0x80     //hard-coded driver default to abort if device busy
#endif

#ifndef RN_MAX_DEV
#define RN_MAX_DEV 10	//max number of devices, not to exceed 72
#endif

#ifndef RN_MAX_DATA
#define RN_MAX_DATA 16	//max number of data bytes in any transaction, not to exceed 255
#endif

#ifndef RN_MAX_PORT
#define RN_MAX_PORT 1	//max number of serial ports, not to exceed 4
#define RN_PORTS 0x01	//bit mask for single port
#endif

#ifndef RN_SPI_BAUD
#define RN_SPI_BAUD 115200L //baudrate, 115200L gives 1 megabit data tranfer
#endif

#ifndef SPICONTROLREG
#define SPICONTROLREG SDCR
#endif

#ifndef SPISTATUSREG
#define SPISTATUSREG SDSR
#endif

#ifndef SPIDATAREG
#define SPIDATAREG SDDR
#endif


/*** EndHeader */

/*** Beginheader rn_sp_info */
void rn_sp_info();

typedef struct
{
	char controltx;
	char controlrx;
	char controlreg;
	char statusreg;
	char datareg;
	long clockrate;
} _RNPORTINFO;

extern _RNPORTINFO rnportinfo[RN_MAX_PORT];

/*** EndHeader */

_RNPORTINFO rnportinfo[RN_MAX_PORT];

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_info						<RN_CFG_PowerCoreFLEX.LIB>

SYNTAX:			void rn_sp_info();

DESCRIPTION:	Provides rn_init() with necessary serial port control
					information for PowerCoreFLEX series core modules.

RETURN VALUE:	None

END DESCRIPTION **********************************************************/
nodebug
void rn_sp_info()
{
	rnportinfo[0].controltx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[0].controlrx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[0].controlreg = SPICONTROLREG;
	rnportinfo[0].statusreg = SPISTATUSREG;
	rnportinfo[0].datareg = SPIDATAREG;
	rnportinfo[0].clockrate = RN_SPI_BAUD;

}

/*** Beginheader _rn_sp_fastenable */
root void _rn_sp_fastenable(unsigned int portvalue);
/*** Endheader  */

/* _START FUNCTION DESCRIPTION ********************************************
_rn_sp_fastenable				<RN_CFG_PowerCoreFLEX.LIB>

SYNTAX: 			root void _rn_sp_fastenable(unsigned int portvalue);

PARAMETER1:    Value to send send to the I/O port pin.


RETURN VALUE:  None
END DESCRIPTION **********************************************************/
#asm root nodebug
_rn_sp_fastenable::
	ld 	hl,(sp+2) ; address of reg
   ld		a,l
   cp		0
   jr		z,.enablelow
.enablehigh:
	ld		de,PEDR
	ld 	hl,PEDRShadow
 	ipset	1
	set 	4,(hl)      ;active high chip select
   ioi 	ldd
	ipres
	ret

.enablelow:
	ld		de,PEDR
	ld 	hl,PEDRShadow
 	ipset	1
	res	4,(hl)      ;active low chip select
	ioi 	ldd
	ipres
   ret
#endasm

/*** Beginheader _rn_sp_fastdisable */
root void _rn_sp_fastdisable(unsigned int portvalue);
/*** Endheader  */

/* _START FUNCTION DESCRIPTION ********************************************
_rn_sp_fastdisable				<RN_CFG_PowerCoreFLEX.LIB>

SYNTAX: 			root void _rn_sp_fastdisable(unsigned int portvalue);

PARAMETER1:    Value to send send to the I/O port pin.


RETURN VALUE:  None
END DESCRIPTION **********************************************************/
#asm root nodebug
_rn_sp_fastdisable::
	ld 	hl,(sp+2) ; address of reg
   ld		a,l
   cp		0
   jr		nz,.enablelow
.enablehigh:
	ld		de,PEDR
	ld 	hl,PEDRShadow
	ipset	1
	set 	4,(hl)
   ioi 	ldd
	ipres
	ret

.enablelow:
	ld		de,PEDR
	ld 	hl,PEDRShadow
 	ipset	1
	res 	4,(hl)
	ioi 	ldd
	ipres
   ret
#endasm




/*** Beginheader rn_sp_enable, rn_sp_disable */

void rn_sp_enable(int portnum);
void rn_sp_disable(int portnum);

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_enable						<RN_CFG_PowerCoreFLEX.LIB>

SYNTAX:			void rn_sp_enable(int portnum);

DESCRIPTION:	Macro that enables or asserts PowerCoreFLEX RabbitNet port chip
					select prior to data transfer.

PARAMETER1:		portnum = 0

RETURN VALUE:	None

END DESCRIPTION **********************************************************/
nodebug
void rn_sp_enable(int portnum)
{
#asm
  	ipset	1
	ld		a,(PEDRShadow)
   res	4,a
   ioi	ld (PEDR),a
	ld		(PEDRShadow),a
   ipres
#endasm
}

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_disable						<RN_CFG_PowerCoreFLEX.LIB>

SYNTAX:			void rn_sp_disable(int portnum);

DESCRIPTION:	Macro that disables or deasserts PowerCoreFLEX series controller
					RabbitNet port	chip select invalidating data transfer.

PARAMETER1:		portnum = 0

RETURN VALUE:	None

END DESCRIPTION **********************************************************/
nodebug
void rn_sp_disable(int portnum)
{
#asm
	ipset	1
	ld		a,(PEDRShadow)
   set	4,a
   ioi	ld (PEDR),a
	ld		(PEDRShadow),a
	ipres
#endasm
}


/*** Beginheader rn_sp_init */
void rn_sp_init(int port, long clkrate);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_init						<RN_CFG_PowerCoreFLEX.LIB>

SYNTAX:			void rn_sp_init(int portnum, long clkrate);

DESCRIPTION:	Configures and initializes an PowerCoreFLEX RabbitNet port as
					a clocked serial port. This call is used rn_init().

PARAMETER1:		portnum = 0
PARAMETER2:		clkrate, user defines macro RN_SPI_BAUD. If not defined,
					will default to 115200L which gives 1 megabit data transfer.

RETURN VALUE:	None

SEE ALSO:		rn_sp_close

END DESCRIPTION **********************************************************/
nodebug
root void rn_sp_init(int port, long clkrate)
{
	auto int tdivisor;

	tdivisor = (int)((freq_divider * 19200.0/(float)clkrate + 0.5) - 1L);
	BitWrPortI(PCFR, &PCFRShadow, 1, 0);
	WrPortI(TAT7R, &TAT7RShadow, tdivisor);
	WrPortI(SDCR, &SDCRShadow, INTERNAL_CLOCK);
	WrPortI(SDER, &SDERShadow, 0x00);

}

/*** Beginheader rn_sp_close */
void rn_sp_close(int port);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_close						<RN_CFG_PowerCoreFLEX.LIB>

SYNTAX:			void rn_sp_close(int port);

DESCRIPTION:	Deactivates PowerCoreFLEX RabbitNet port as a clocked serial
					port. This call is used in rn_init().

PARAMETER1:		portnum = 0

RETURN VALUE:	None

SEE ALSO:		rn_sp_init

END DESCRIPTION **********************************************************/
nodebug
void rn_sp_close(int port)
{
	rn_sp_disable(port);							//disable port select
	BitWrPortI(PEDR, &PEDRShadow, 0, 4);  	//clear bit 2 to disable device
	BitWrPortI(PCFR, &PCFRShadow, 0, 0);	//disable serial port
	BitWrPortI(PCDR, &PCDRShadow, 1, 0);
}



/*** BeginHeader */

#use "rnet.lib"            // RabbitNet driver
#use "rnet_dio.lib"        // RabbitNet DI/O card
#use "rnet_ain.lib"        // RabbitNet Analog Input card
#use "rnet_aout.lib"       // RabbitNet Analog Output card
#use "rnet_relay.lib"		// RabbitNet Relay card
#use "rnet_keyif.lib"		// RabbitNet Keypad/Display Interface <<<uncomment to use
#use "rnet_lcdif.lib"		// RabbitNet Keypad/Display Interface <<<uncomment to use

/*** EndHeader */


/*** BeginHeader */
#endif
/*** EndHeader */

