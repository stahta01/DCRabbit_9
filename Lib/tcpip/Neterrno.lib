/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*
 *    neterrno.lib
 *
 * Network error codes.  When a socket encounters some sort of error
 * condition, one or more of these error codes are stored in the
 * socket structure.  The codes may be retrieved using sock_error()
 * or a string translation may be obtained from sockerr().  Strings
 * should only be used during program debug, since they take up a
 * lot of root data memory.
 *
 */
/*** BeginHeader */
#ifndef NETERRNO_H
#define NETERRNO_H


//#ifndef _ERRNO_LIB
//	#use "errno.lib"		// Bring in all error codes (see 400- range for network errors)
//#endif


/*** EndHeader */

/*** BeginHeader sockerr */
/* START FUNCTION DESCRIPTION ********************************************
sockerr                                <NETERRNO.LIB>

SYNTAX: char *sockerr(void *s);

KEYWORDS:		tcpip, socket

DESCRIPTION: 	Return a string that gives the last error message recorded
               for that socket.  Use of this function will introduce a
               lot of string constants in root memory.  For production
               programs, it is better to use error numbers (without
               translation to strings).

PARAMETER1: 	socket

RETURN VALUE:  NULL if there have been no error messages or a pointer to
               the string that represents the last error message for the
               socket.  These strings should not be modified.
               If you define the symbol SOCKERR_NO_RETURN_NULL, then if
               no error occured then the string "OK" will be returned
               instead of a NULL pointer.

SEE ALSO:      sock_error, sock_perror

END DESCRIPTION **********************************************************/

char *sockerr(void *s);
/*** EndHeader */

static const char * const neterror_strings[] = {
  "OK",
  "Local host not reachable (ARP)",
  "Host not reachable (Router)",
  "Host refused connection",
  "Timout on open or close",
  "Connection timed out",
  "Active abort sent from this peer",
  "Timed out due to inactivity",
  "DHCP lease expired",
  "ICMP reported trouble",
  "Protocol error",
  "Remote peer reset connection",
  "Network unreachable",
  "Host unreachable",
  "Protocol unreachable",
  "Port unreachable",
  "Fragmentation needed but DF",
  "Source route failed",
  "Destination network unknown",
  "Destination host unknown",
  "This host isolated",
  "Destination network prohibited",
  "Destination host prohibited",
  "Network type-of-service unreachable",
  "Host type-of-service unreachable",
  "Time-to-live exceeded",
  "Fragment reassembly time exceeded",
  "Redirect for network",
  "Redirect for host",
  "Redirect for TOS and network",
  "Redirect for TOS and host",
  "Parameter problem",
  "Parameter problem: option missing",
  "Source quench",
  "IP address changed",
  "Out of memory",
  "IP address conflict",
  "Interface down or deactivated"
};

#define NETERR_MAX_STRINGS (sizeof(neterror_strings)/sizeof(neterror_strings[0]))

_net_nodebug char *sockerr(void *s) {
	int en;
#if __RABBITSYS
	s = _sys_get_sock(s);
#endif
#if __RABBITSYS==1
	en = ((_sys_sock_type*)s)->tcp.err_msg & 0xFF;
#else
	en = ((_rs_sock_type*)s)->tcp.err_msg & 0xFF;
#endif
	if (en >= NETERR_MAX_STRINGS)
		return "Unix-type error";
#ifndef SOCKERR_NO_RETURN_NULL
	if (!en)
		return NULL;
#endif
   return neterror_strings[en];
}

/*** BeginHeader sock_perror */
/* START FUNCTION DESCRIPTION ********************************************
sock_perror                                <NETERRNO.LIB>

SYNTAX: void sock_perror(void *s, const char * prefix);

KEYWORDS:		tcpip, socket

DESCRIPTION: 	Print out the most recent error messages for a socket, and
               clear the errors.  This calls sockerr() and printf(), so
               it should only be called for debugging a new application.
               The output is in the format:
                 [TCP|UDP] socket (ipaddr:port -> ipaddr:port) msg1; msg2
               where msg1 and, possibly, msg2 are the most recent error
               messages.  The initial sting is "TCP" or "UDP" for open
               sockets, or may be "Closed" if the socket is currently
               closed (either TCP or UDP).

               If there are no errors, nothing is printed.

PARAMETER1: 	Pointer to TCP or UDP socket
PARAMETER2:    Prefix text to add to generated messages, or NULL.

SEE ALSO:      sock_error, sockerr

END DESCRIPTION **********************************************************/

void sock_perror(void *s, char * prefix);
/*** EndHeader */

_net_nodebug void sock_perror(void * _s, char * prefix)
{
	auto const char * msg;
	auto const char * msg2;
	auto const char * stype;
#if _USER
	auto _sys_udp_Socket * s;

	s = _sys_get_sock(_s);
#else
	auto _rs_udp_Socket * s;

	s = _s;
#endif
	if (s->ip_type == TCP_PROTO)
		stype = "TCP";
	else if (s->ip_type == UDP_PROTO)
		stype = "UDP";
	else
		stype = "Closed";
	msg = sockerr(_s);
	if (msg) {
		sock_error(_s, 1);	// Clear prev msg
		msg2 = sockerr(_s);
		if (msg2)
			sock_error(_s, 1);
		if (s->iface == IF_ANY)
		 printf("%s%s%s socket (ANY:%u -> %08lX:%u)\n",
			prefix ? prefix : "",
			prefix ? ": " : "",
			stype,
			s->myport,
			s->hisaddr, s->hisport);
		else
		 printf("%s%s%s socket (%08lX:%u -> %08lX:%u) i/f %d\n",
			prefix ? prefix : "",
			prefix ? ": " : "",
			stype,
			_if_tab[s->iface].ipaddr, s->myport,
			s->hisaddr, s->hisport, s->iface);
		printf("  last:     %s\n", msg);
		if (msg2)
			printf("  previous: %s\n", msg2);
	}
}//sock_perror()

/*** BeginHeader _rs_sock_error */
/* START FUNCTION DESCRIPTION ********************************************
sock_error                                <NETERRNO.LIB>

SYNTAX: int sock_error(void *s, int clear);

KEYWORDS:		tcpip, socket

DESCRIPTION: 	Return the most recent error number for the specified
               socket, which may be a TCP or UDP socket.

PARAMETER1: 	socket
PARAMETER2:    0: do not clear the returned error condition
               1: clear the returned error from the socket.  You can
                 call this function again to get the next older
                 error code (if any).

RETURN VALUE:  0 : no error.
               Non-zero: one of the NETERR_* constants defined in
               NETERRNO.LIB

SEE ALSO:      sockerr

END DESCRIPTION **********************************************************/

_system int _rs_sock_error(void *s, int clear);
/*** EndHeader */

_net_nodebug _system int _rs_sock_error(void *s, int clear)
{
	_SYS_CALL_VARS
	int en;

	LOCK_SOCK(s);
	en = ((_rs_sock_type*)s)->tcp.err_msg & 0xFF;
	if (clear)
		((_rs_sock_type*)s)->tcp.err_msg >>= 8;
   UNLOCK_SOCK(s);
	return en ? (en >= 113 ? en - 112 : en + 400) : 0;		// Adjust to canonical code
}

/*** BeginHeader _rs_sock_msg */
// Internal function to enqueue the next error code.
_system void _rs_sock_msg(void *s, int msg);
/*** EndHeader */

_net_nodebug _system void _rs_sock_msg(void *s, int msg)
{
	_SYS_CALL_VARS
	word en;

   if (msg)
   	msg -= 400;		// Wrap message around to 0..255 range (to fit in byte)
	LOCK_SOCK(s);
	en = ((_rs_sock_type*)s)->tcp.err_msg;
	if (!(en & 0xFF))
		en |= msg & 0xFF;
	else
		en = en << 8 | msg & 0xFF;
	((_rs_sock_type*)s)->tcp.err_msg = en;
   UNLOCK_SOCK(s);
}

/*** BeginHeader */
#endif
/*** EndHeader */