/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
SSL_ERROR.LIB
	SSL Module, v. 1.04

DESCRIPTION: Internal error handling for TLS. Due to the large number of
             potential internal errors for TLS, including memory-
             management issues and possible attacks, we collect the
             error codes here, and provide a global error number,
             similar to the filesystem error handling.

END DESCRIPTION **********************************************************/

/*** BeginHeader _SSL_errno */

#ifndef __SSL_ERROR_LIB__
#define __SSL_ERROR_LIB__

// The actual error number
extern int _SSL_errno;
#define SSL_errno _SSL_errno

// Set the error number, we only want to set it the first time (so
// we know what the original error was, it may get clobbered if we
// do not have this check here)
#define SSL_SET_ERRNO(x) if(_SSL_errno == 0) {_SSL_errno = (x);}

// Reset the errno, should be called in SSL_accept or SSL_init
#define SSL_RESET_ERRNO (_SSL_errno = 0)

// Error codes
#define SSL_ALLOC_FAIL               1 // Workspace buffer allocation failure
                                       // (memory management, increase
                                       //  SSL_WORKSPACE_SIZE)
#define SSL_INIT_FAIL					 2 // Someone passed a NULL pointer to
                                       // ssl_extlisten
#define SSL_INIT_ALLOC_FAIL          3 // Initialization failed to allocate new
                                       // resources (increase connections)
#define SSL_INIT_REINIT_FAIL         4 // Tried to reinitialize a SSL_State
                                       // structure (was previously initialized)
#define SSL_TICK_READ_ERROR        	 5 // SSL_tick failed to read a handshake
                                       // header or message correctly (internal
                                       // error, most likely)
#define SSL_TICK_READ_INT_ERR			 6 // Did not read all the bytes that were
                                       // needed (internal library error)
#define SSL_ACCEPT_NO_CLIENT         7 // Cannot use SSL_accept in client state
#define SSL_SEQ_NUM_OVERFLOW         8 // Overflowed a sequence
#define SSL_ENCRYPTION_FAIL          9 // Encryption operation failed
#define SSL_DECRYPTION_FAIL         10 // Decryption operation failed
#define SSL_READ_USER_CANCEL        11 // Remote user cancelled connection
#define SSL_READ_PROTOCOL_VER       12 // Incoming message had wrong version
#define SSL_READ_REC_OVERFLOW       13 // Incoming record message overflow
#define SSL_READ_REC_OVERFLOW_INT   14 // Internal buffer overflow, increase
                                       // internal limit
                                       // SSL_MAX_RECORD_DATA_LENGTH
#define SSL_READ_COMM_FAIL			   15 // Communication error during read
#define SSL_READ_UNEXPECTED_MSG     16 // Unexpected message during read
#define SSL_READ_RECEIVED_ALERT     17 // Receieved a fatal alert
#define SSL_READ_INCOMPLETE_HEADER  18 // Internal error, Did not read an entire
                                       // header before trying to process it
#define SSL_READ_WRONG_LENGTH			19 // Internal error, the length of a record
                                       // received did not match header length
#define SSL_READ_STATE_ERROR			20 // Internal error, invalid read state
#define SSL_HS_UNEXPECTED_MSG       21 // Unexpected message during handshake
#define SSL_HS_SESSION_ID_TOO_LONG  22 // Session ID in message too long
#define SSL_HS_NO_RENEGOTIATION     23 // Client attempted illegal renegotiation
#define SSL_HS_CLI_PROTOCOL_ERROR   24 // Incorrect protocol version in client
                                       // hello message
#define SSL_HS_UNKNOWN_SESSION_ID   25 // The client provided a session ID that
                                       // was not in the session cache
#define SSL_CIPHER_CHOICE_ERROR     26 // could not find compatible ciphersuite
                                       // in client offer
#define SSL_EXCH_KEYS_PROTOCOL_VER  27 // Exchange keys wrong protocol version
#define SSL_PUB_KEY_DECRYPTION_FAIL 28 // Public-key decryption failure
#define SSL_PUB_KEY_INT_ERROR       29 // Internal public-key operation error
#define SSL_FINISH_VERIFY_FAIL      30 // The finish message verification failed
#define SSL_INT_STATE_ERROR         31 // Internal error, undefined state
#define SSL_SSLv2_HANDSHAKE_FAIL    32 // Receieved an SSLv2 client hello, and
                                       // failed to process it correctly
#define SSL_BAD_RECORD_MAC          33 // Received a message from the client
                                       // that failed the record MAC check
#define SSL_CERT_TOO_BIG			   34 // Certificate(s) too big for record.
                                       // Increase SSL_MAX_RECORD_DATA_LENGTH
#define SSL_RSA_KEY_SIZE_ERROR		35 // The RSA key size (from certificate) is
                                       // the wrong size (change MP_S)
#define SSL_COULD_NOT_SEND_ALERT    36 // The write of an alert failed (internal
                                       // write buffer overflow most likely)
#define SSL_NO_CLOSE_NOTIFY			37 // Upon closing, a close_notify alert was
                                       // not received from the peer
/*** EndHeader */

int _SSL_errno;

/*** BeginHeader SSL_error */
void SSL_error(ssl_Socket*, int);
/*** EndHeader */

// SSL error function.
// Depending on the state of the passed-in ssl_Socket,
// convert SSL error numbers ro alerts of the appropriate type
// and send that alert to the other side.
__SSL_DEBUG__
void SSL_error(ssl_Socket* state, int err_num) {
	auto int alert_num;

   SSL_SET_ERRNO(err_num);

   if(state->is_ssl_v3) {
    	switch(err_num) {
      case SSL_BAD_RECORD_MAC:
               alert_num = SSL3_ALRT_bad_record_mac;
               break;
      case SSL_SSLv2_HANDSHAKE_FAIL:
      case SSL_HS_CLI_PROTOCOL_ERROR:
      case SSL_READ_PROTOCOL_VER:
      case SSL_READ_REC_OVERFLOW:
      case SSL_DECRYPTION_FAIL:
      case SSL_HS_NO_RENEGOTIATION:
      case SSL_CIPHER_CHOICE_ERROR:
      case SSL_FINISH_VERIFY_FAIL:
      case SSL_PUB_KEY_DECRYPTION_FAIL:
      case SSL_HS_UNKNOWN_SESSION_ID:
      case SSL_TICK_READ_ERROR:
		case SSL_TICK_READ_INT_ERR:
					alert_num = SSL3_ALRT_handshake_failure;
               break;
      case SSL_HS_SESSION_ID_TOO_LONG:
      case SSL_HS_UNEXPECTED_MSG:
      case SSL_READ_UNEXPECTED_MSG:
					alert_num = SSL3_ALRT_unexpected_message;
               break;
      // The following cases have no corresponding alerts in SSLv3
      // so just fail out
      case SSL_ALLOC_FAIL:
      case SSL_INIT_FAIL:
      case SSL_INIT_ALLOC_FAIL:
      case SSL_INIT_REINIT_FAIL:
      case SSL_ACCEPT_NO_CLIENT:
      case SSL_ENCRYPTION_FAIL:
      case SSL_READ_USER_CANCEL:
      case SSL_READ_RECEIVED_ALERT:
      case SSL_EXCH_KEYS_PROTOCOL_VER:
      case SSL_INT_STATE_ERROR:
      case SSL_COULD_NOT_SEND_ALERT:
      case SSL_NO_CLOSE_NOTIFY:
		case SSL_PUB_KEY_INT_ERROR:
      case SSL_SEQ_NUM_OVERFLOW:
      case SSL_RSA_KEY_SIZE_ERROR:
      case SSL_CERT_TOO_BIG:
      case SSL_READ_STATE_ERROR:
      case SSL_READ_WRONG_LENGTH:
      case SSL_READ_INCOMPLETE_HEADER:
      case SSL_READ_REC_OVERFLOW_INT:
      case SSL_READ_COMM_FAIL: // Fall-through
		default: alert_num = -1; // = TLS_ALRT_internal_error;
        			break;
      }
   }
   else {
    	switch(err_num) {
      case SSL_ALLOC_FAIL:
      case SSL_INIT_FAIL:
      case SSL_INIT_ALLOC_FAIL:
      case SSL_INIT_REINIT_FAIL:
      case SSL_ACCEPT_NO_CLIENT:
      case SSL_ENCRYPTION_FAIL:
      case SSL_READ_USER_CANCEL:
      case SSL_READ_RECEIVED_ALERT:
      case SSL_EXCH_KEYS_PROTOCOL_VER:
      case SSL_INT_STATE_ERROR:
      case SSL_SSLv2_HANDSHAKE_FAIL:
      case SSL_COULD_NOT_SEND_ALERT:
      case SSL_NO_CLOSE_NOTIFY:
      			alert_num = -1; // A value of -1 indicates no alert is to be sent
        			break;
      case SSL_HS_NO_RENEGOTIATION:
      			alert_num = TLS_ALRT_no_renegotiation;
               break;
      case SSL_DECRYPTION_FAIL:
               alert_num = TLS_ALRT_decrypt_error;
               break;
      case SSL_BAD_RECORD_MAC:
               alert_num = TLS_ALRT_bad_record_mac;
               break;
      case SSL_READ_REC_OVERFLOW:
           		alert_num = TLS_ALRT_record_overflow;
               break;
      case SSL_HS_CLI_PROTOCOL_ERROR:
      case SSL_READ_PROTOCOL_VER:
              	alert_num = TLS_ALRT_protocol_version;
               break;
      case SSL_CIPHER_CHOICE_ERROR:
      case SSL_FINISH_VERIFY_FAIL:
      case SSL_PUB_KEY_DECRYPTION_FAIL:
      case SSL_HS_UNKNOWN_SESSION_ID:
      case SSL_TICK_READ_ERROR:
		case SSL_TICK_READ_INT_ERR:
					alert_num = TLS_ALRT_handshake_failure;
               break;
      case SSL_HS_SESSION_ID_TOO_LONG:
      case SSL_HS_UNEXPECTED_MSG:
      case SSL_READ_UNEXPECTED_MSG:
					alert_num = TLS_ALRT_unexpected_message;
               break;
		case SSL_PUB_KEY_INT_ERROR:
      case SSL_SEQ_NUM_OVERFLOW:
      case SSL_RSA_KEY_SIZE_ERROR:
      case SSL_CERT_TOO_BIG:
      case SSL_READ_STATE_ERROR:
      case SSL_READ_WRONG_LENGTH:
      case SSL_READ_INCOMPLETE_HEADER:
      case SSL_READ_REC_OVERFLOW_INT:
      case SSL_READ_COMM_FAIL: // Fall-through
		default: alert_num = TLS_ALRT_internal_error;
      		   break;
      }

   }

   // Send the alert determined above (only if not an internal error)
   if(alert_num >= 0) {
   	_ssl_send_fatal_alert(state, alert_num);
	}

   // Set the state machine to the error state
	state->cur_state = SSL_STATE_ERROR;

}

/*** BeginHeader */
#endif
/*** EndHeader */