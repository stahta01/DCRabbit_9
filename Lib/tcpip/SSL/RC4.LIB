/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
RC4.LIB
	SSL Module, v. 1.04

DESCRIPTION: Implementation of the RC4 stream Cipher for SSL
- Algorithm taken from 'Applied Cryptography, 2nd Edition; Bruce Schneier',
- Source code based upon the following newsgroup posting:
  Newsgroups: sci.crypt
  From: sterndark@netcom.com (David Sterndark)
  Subject: RC4 Algorithm revealed.
  Message-ID: <sternCvKL4B.Hyy@netcom.com>
  Date: Wed, 14 Sep 1994 06:35:31 GMT

END DESCRIPTION **********************************************************/

/*** BeginHeader ***/

// Debugging macros, define to 1 to enable
#ifdef RC4_DEBUG
	#define __RC4_DEBUG__ debug
#else
	#define __RC4_DEBUG__ nodebug
#endif

#ifndef RC4_PROFILE
#define RC4_PROFILE 0
#endif

// If RC4_SBOX_SIZE is a power of 2, we can use a mask
// to avoid several modular divisons (Much faster on
// a Rabbit)
#define RC4_SBOX_SIZE 256
#define RC4_MOD_MASK  0x00FF // This must correspond to the above

// State structure for RC4 encryption/decryption
typedef struct {
	unsigned char sbox[RC4_SBOX_SIZE];
	unsigned char i;
	unsigned char j;
} RC4_state_t;

/*** EndHeader ***/

/*** BeginHeader RC4_init ***/
int RC4_init(RC4_state_t* state, int direction, char* key, int key_length,
             char* iv);
/*** EndHeader

/* START _FUNCTION DESCRIPTION ********************************************
RC4_init                               <RC4.LIB>

SYNTAX: int RC4_init(RC4_state_t* state, char* key, int key_length);

DESCRIPTION: Initialize the RC4 sbox from key

PARAMETER 1: An RC4 state structure
PARAMETER 2: Direction (ignored)
PARAMETER 3: The key, stored as a an array of bytes
PARAMETER 4: The length of the key, must be less than RC4_SBOX_SIZE
PARAMETER 5: Initialization vector (ignored)

RETURN VALUE: 0 on success, non-zero on failure

END DESCRIPTION **********************************************************/

__RC4_DEBUG__
int RC4_init(RC4_state_t* state, int direction, char* key, int key_length,
              char* iv) {
	auto int i,j;
   auto char temp;
	auto char rc4_key[RC4_SBOX_SIZE];
   auto char* sbox;
#if RC4_PROFILE
	auto unsigned long t0, t1;
	t0 = MS_TIMER;
#endif

	// Check for errors
	if(!state || !key || key_length == 0) {
		return 1;
   }

   // Setup the key box, initialize the s-box
   sbox = state->sbox;
   for(i = 0, j = 0; i < RC4_SBOX_SIZE; i++, j++) {
   	sbox[i] = i;
      if(j >= key_length) {
       	j = 0;
      }
		rc4_key[i] = key[j];
   }

   // Initialize indices for sbox state
   state->i = 0;
   state->j = 0;

   // Generate permutation from key
   j = 0;
   for(i = 0; i < RC4_SBOX_SIZE; i++) {
    	j = (j + sbox[i] + rc4_key[i]) & RC4_MOD_MASK;

      // Swap sbox[i], sbox[j]
		temp = sbox[i];
      sbox[i] = sbox[j];
      sbox[j] = temp;
   }

#if RC4_PROFILE
	t1 = MS_TIMER;
   printf("RC4 init time: %dms\n", t1-t0);
#endif

	// Success!
   return 0;

}

/*** BeginHeader RC4_op */
int RC4_op(RC4_state_t* state, char* message,
           char* output, unsigned int length);
/*** EndHeader */


/* START _FUNCTION DESCRIPTION ********************************************
RC4_op                                 <RC4.LIB>

SYNTAX: int RC4_op(RC4_state_t* state, char* message,
                     char* output, unsigned int length);

DESCRIPTION: Perform an RC4 encryption/decryption operation (the
             algorithm is symmetric, both enryption and decryption
             do the same thing to the input text)

             The key is only used by the initialization function, to
             generate the secret s-box used by the encryption/decryption
             operation.

PARAMETER 1: An RC4 state structure, initialized by _RC4_init
PARAMETER 2: The message, may be plaintext for encryption, or ciphertext
             for decryption
PARAMETER 3: The output buffer, for return of encrypted/decrypted text
PARAMETER 4: The length of the message (assumes that the output buffer
             is at least as large as the message)

RETURN VALUE: 0 on success, non-zero on failure

END DESCRIPTION **********************************************************/

__RC4_DEBUG__
int RC4_op(RC4_state_t* state, char* message,
             char* output, unsigned int length)
{
	auto int i, j, t;
   auto char temp, k;
   auto unsigned int index;
   auto char* sbox;
#if RC4_PROFILE
	auto unsigned long t0, t1;
	t0 = MS_TIMER;
#endif

	// Check for errors
	if(!state || !message || !output) {
		return 1;
   }

   if(length == 0) {
    	return 0;
   }

	sbox = state->sbox;
   i = state->i;
   j = state->j;
   for(index = 0; index < length; index++) {
   	// Calculate new i, j
		i = (i + 1) & RC4_MOD_MASK;
      j = (j + sbox[i]) & RC4_MOD_MASK;

      // Swap S[i] and S[j]
		temp = sbox[i];
      sbox[i] = sbox[j];
      sbox[j] = temp;

      // Get encrypt/decrypt byte
      t = (sbox[i] + sbox[j]) & RC4_MOD_MASK;
      k = sbox[t];

      // Encrypt/Decrypt to output
      output[index] = message[index] ^ k;
	}

   // Save current position
   state->i = i;
   state->j = j;
#if RC4_PROFILE
	t1 = MS_TIMER;
   printf("RC4 operation time: %dms\n", t1-t0);
#endif

	// Success!
	return 0;
}

/*** BeginHeader RC4_xop */
int RC4_xop(RC4_state_t* state, long message,
            long output, unsigned int length);
/*** EndHeader */


/* START _FUNCTION DESCRIPTION ********************************************
RC4_xop                                <RC4.LIB>

SYNTAX: int RC4_op(RC4_state_t* state, long message,
                     long output, unsigned int length);

DESCRIPTION: Perform an RC4 encryption/decryption operation (the
             algorithm is symmetric, both enryption and decryption
             do the same thing to the input text)

             The key is only used by the initialization function, to
             generate the secret s-box used by the encryption/decryption
             operation.

             This function is identical to RC4_op, but uses xmem input
             and output buffers instead of root.

PARAMETER 1: An RC4 state structure, initialized by _RC4_init
PARAMETER 2: The message, may be plaintext for encryption, or ciphertext
             for decryption (an xmem buffer)
PARAMETER 3: The output buffer, for return of encrypted/decrypted text (in xmem)
PARAMETER 4: The length of the message (assumes that the output buffer
             is at least as large as the message)

RETURN VALUE: 0 on success, non-zero on failure

END DESCRIPTION **********************************************************/

__RC4_DEBUG__
int RC4_xop(RC4_state_t* state, long message,
             long output, unsigned int length)
{
	auto int i, j, t;
   auto char temp, k;
   auto unsigned int index;
   auto char* sbox;
#if RC4_PROFILE
	auto unsigned long t0, t1;
	t0 = MS_TIMER;
#endif

	// Check for errors
	if(!state || !message || !output) {
		return 1;
   }

   if(length == 0) {
    	return 0;
   }

	sbox = state->sbox;
   i = state->i;
   j = state->j;
   for(index = 0; index < length; index++) {
   	// Calculate new i, j
		i = (i + 1) & RC4_MOD_MASK;
      j = (j + sbox[i]) & RC4_MOD_MASK;

      // Swap S[i] and S[j]
		temp = sbox[i];
      sbox[i] = sbox[j];
      sbox[j] = temp;

      // Get encrypt/decrypt byte
      t = (sbox[i] + sbox[j]) & RC4_MOD_MASK;
      k = sbox[t];

      // Encrypt/Decrypt to output
      xsetint((output + index), (xgetint(message + index) ^ k));
	}

   // Save current position
   state->i = i;
   state->j = j;
#if RC4_PROFILE
	t1 = MS_TIMER;
   printf("RC4 operation time: %dms\n", t1-t0);
#endif

	// Success!
	return 0;
}

