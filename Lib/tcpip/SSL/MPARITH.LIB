/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef MPARITH_H
#define MPARITH_H
/*** EndHeader */

/* START LIBRARY DESCRIPTION ***************************************************
mparith.lib
	SSL Module, v. 1.04

DESCRIPTION: Multiple precision arithmetic for cryptography support.

  Arithmetic is generally performed using 16-bit 'digits' since this is most
  efficient for the Rabbit, however some things are specified in number of
  bytes or bits (be careful!).

  Numbers are stored in little-endian order.

  MP_S is defined to be the number of bytes in the largest numbers to be
  processed.  It should be set to a multiple of 16, plus 2, since the inner
  arithmetic loops are unrolled to 8 word operations at a time.  Some
  operations support specification of the number of digits (<= MP_S).

  When modular arithmetic is performed, the modulus is stored in the global
  variable mp_m.  Several other values (which may be used repeatedly) are
  also stored in global variables, such as the modulus "reciprocal".

END DESCRIPTION ***************************************************************/

/*** BeginHeader mp_m */

#ifndef MP_SIZE
	// Number of bytes in modulus, plus 2 for temporary 16-bit carry out
   // Make this a multiple of 16, plus 2.  The default, 66, specifies
	// 512-bit key lengths.
	#define MP_SIZE 66
#endif

// Define this symbol to keep and print statistics on the number of
// basic operations.

// For statistics information, uncomment the following line
// #define _MP_ARITH_STATS_

extern char mp_m[MP_SIZE];			// Global modulus
extern word mp_mrecip;			   // Modulus "reciprocal"
extern long mp_mrecip2;			   // Higher precision reciprocal
extern char mp_X[MP_SIZE];			// Multiplication work areas
extern char mp_Y[MP_SIZE*2];
extern char mp_Z[MP_SIZE];
extern char Zeros[MP_SIZE];
extern int mp_z;

#ifdef _MP_ARITH_STATS_
unsigned long adds, subs, subxs, subx2s, mods, mod16s, shifts;
unsigned long shift16s, muls, mul16s, squares, gmuls;
word m16quot;
  #ifdef USE_UMA
  	unsigned long umas, umss;
  #endif
#endif
word mquot, mquot2;

/*** EndHeader */

char mp_m[MP_SIZE];			// Global modulus
word mp_mrecip;			// Modulus "reciprocal"
long mp_mrecip2;
char mp_X[MP_SIZE];			// Multiplication work areas
char mp_Y[MP_SIZE*2];
char mp_Z[MP_SIZE];
char Zeros[MP_SIZE];
int mp_z;


/*** BeginHeader mp_add16 */
// x += y  (MP_SIZE)
nodebug void mp_add16(char * x, char * y);
/*** EndHeader */

// Add two large numbers using uma
#asm
mp_add16::
	ld		bc,MP_SIZE ; Load key size for UMA
	push	ix
	ld		ix,hl
	ld		iy,(sp+6)
	ld		de',0
	or		a
	ld		de,1		 ; multiply by 1
	uma
	pop	ix
	ret
#endasm


/*** BeginHeader mp_sub16a */
// z = x - y (MP_SIZE bytes)
nodebug void mp_sub16a(char * z, char * x, char * y);
/*** EndHeader */
// Subtract two large numbets using ums
#asm
mp_sub16a::
	ld		bc,MP_SIZE ; load key size for ums
	push	ix
	ld		ix,(sp+6)
	ld		iy,(sp+8)
	ld		de',0
	or		a
	ld		de,1		  ; multiply by 1
	UMS
	pop	ix
	ret
#endasm

/*** BeginHeader mp_sub16 */
// x -= y (MP_SIZE bytes)
nodebug void mp_sub16(char * x, char * y);
nodebug void mp_sub16ums(char * x, char * y);
/*** EndHeader */
#asm
mp_sub16::
	ld		bc,MP_SIZE ; Load key size for ums
	push	ix
	ld		ix,hl		  ; source and dest the same
	ld		iy,(sp+6)
	ld		de',0
	or		a
	ld		de,1		  ; multiply by 1
	UMS
	pop	ix
	ret
#endasm

/*** BeginHeader _mp_ss */
// Perform one modular reduction of x.  On entry, 0 <= x < 2m.  On exit,
// 0 <= x < m.
// Not a C function!
nodebug void _mp_ss(char *x, char * m);
/*** EndHeader */

#asm
_mp_ss::
	; HL = long precision quantity to reduce modulo m
	; DE = long prec. modulus (m)
	ld		bc,MP_SIZE-1	;6   ignore the MSB, since we are never called with
                        ;    non-zero in that position
	ld		iy,hl
	push	de
	add	hl,bc		;2
	ex		de,hl		;2
	add	hl,bc		;2
	ld		b,c		;2	/ 23
.loop:
	ld		a,(de)	;6
	cp		(hl)		;5
	jr		nz,.loopexit	;5
	dec	de			;2
	dec	hl			;2
	djnz	.loop		;5	/ 25
	ld		a,(de)	; A = x[v]
	cp		(hl)		; Carry if x[v] < m[v]
.loopexit:
	jr		c,.exit	;5		/ total = 23 + 25 + 16 + 13 = 77
   ; Note: assumes average of 1 iteration of djnz (2 bytes compared)
	ld		hl,iy
	push	hl
	call	mp_sub16
	add	sp,2
#ifdef _MP_ARITH_STATS_
c	subs++;
#endif
	add	sp,2
#ifdef _MP_ARITH_STATS_
c	mods++;
	scf				; Set carry: needed to subtract
#endif
	ret

.exit:
	add	sp,2
#ifdef _MP_ARITH_STATS_
c	mods++;
	or		a			; Clear carry: no subtraction required
#endif
	ret
#endasm

/*** BeginHeader mp_lshift16 */
// Multiply x by 2**16.
nodebug void mp_lshift16(char *x);
/*** EndHeader */

#asm
mp_lshift16::
	ld		bc,MP_SIZE-1	;6
	add	hl,bc		;2
	ld		d,h		;2
	ld		e,L		;2
	dec	hl			;2
	dec	hl
	dec	bc
	lddr				;6 + 7*16
	xor	a			;2
	ld		(de),a	;7		/ total = 149
	dec	de
	ld		(de),a
#ifdef _MP_ARITH_STATS_
c	shift16s++;
#endif
	ret
#endasm

/*** BeginHeader mp_mul16 */
// mp_Z = x * val - needs extra word at end of mp_Z for 16-bit carry out.
// Not a C function!
nodebug void mp_mul16(char * x, word val);
/*** EndHeader */

#asm
mp_mul16::
	push	ix
	ld		de',0
	ld		iy,hl
	ld		ix,Zeros		; Add in nothing
	ld		hl,mp_Z
	ld		bc,MP_SIZE-2
	or		a
	UMA
	ex		de,hl			; Dest pointer in DE
	ex		de',hl		; Get carry out to HL
	ex		de,hl
	ld		(hl),e
	inc	hl
	ld		(hl),d
	pop	ix
#ifdef _MP_ARITH_STATS_
c	mul16s++;
#endif
	ret
#endasm

/*** BeginHeader mp_mod16 */
// x = x mod mp_m.  On entry, 0 <= x < mp_m * 2**16
void mp_mod16(char * x);
/*** EndHeader */

nodebug void mp_mod16(char * x)
{
#ifdef _MP_ARITH_STATS_
	mod16s++;
	#asm
	ld		hl,(sp+@sp+x)
	#endasm
#endif
#asm
	; Compute multiple of modulus to subtract from x so that x < m.
	; We have precomputed mrecip so that multiply is used.

	; High precision (24 bit) version, to avoid common auxiliary subtraction.
	; mp_mrecip2 contains modulus reciprocal (2**24..2**25-1).  Multiplying this
	; by the 3 MSBs of x, then dividing by 2**32, gives the appropriate multiple
   ; of the modulus to subtract.  There is a small probability of requiring
   ; an extra sub.
	push	ix
	ld		bc,MP_SIZE-1
	add	hl,bc		; HL points to MSB of x
	ld		iy,hl
	ld		hl,mp_Z				; for single byte result
	ld		(hl),0
	ld		ix,hl	; Point to a known zero byte
	ld		bc,1
	ld		de,(mp_mrecip2)	; LSBs of recip
	ld		de',0
	or		a
	UMA	; now mp_Z contains LSB of result, DE' contains 2 byte carry out (cy will be clear)
	bool	hl
	ld		l,h
	ex		de',hl
	ld		(ix),hl
	ld		de,(mp_mrecip2+2)	; MSBs of recip (in range 256..511)
	dec	ix
	ld		hl,ix
	ld		c,3		; BC = 3
	dec	iy
	dec	iy
	dec	iy
	UMA	; Now DE' and (ix-1) have the required result (except there may be a carry out from the addition)
	ex		de',hl
	jr		nc,.nocy
	inc	hl
.nocy:
	ex		de,hl
	ld		a,(ix-1)
	rla
	rl		de
	pop	ix

#ifdef _MP_ARITH_STATS_
	ld		(m16quot),de
#endif
	; Do: mp_Z = mp_m * de  followed by x -= mp_Z
	; This is done by a single UMS insn.  mp_Z is not actually needed, since it is
	; a temporary variable.
	ld		hl,(sp+@sp+x)	; Dest
	push	ix
	ld		ix,hl				; and also minuend
	ld		iy,mp_m			; multiplicand (the modulus)
	ld		de',0
	or		a
	ld		bc,MP_SIZE
	UMS
	pop	ix
 #ifdef _MP_ARITH_STATS_
	c	umss++;
 #endif
	; Do 2 extra single reductions (compensate for possible rounding error in mrecip)
	ld		de,mp_m
	ld		hl,(sp+@sp+x)
	call	_mp_ss
#ifdef _MP_ARITH_STATS_
	jr		nc,.nosub1
	c subxs++;
.nosub1:
#endif
	ld		de,mp_m
	ld		hl,(sp+@sp+x)
	call	_mp_ss
#ifdef _MP_ARITH_STATS_
	jr		nc,.nosub2
	c subx2s++;
.nosub2:
#endif
	ld		de,mp_m
	ld		hl,(sp+@sp+x)
	call	_mp_ss
#ifdef _MP_ARITH_STATS_
	jr		nc,.nosub3
	c subx2s++;
.nosub3:
#endif
#endasm
#ifdef _MP_ARITH_STATS_
	if (*(unsigned long *)(x+MP_SIZE-4) >= *(unsigned long *)(mp_m+MP_SIZE-4))
		printf("Error!  Entry #%lu  m16quot=%04X\n", mod16s, m16quot);
#endif
}

/*** BeginHeader mp_M16 */
// x = x * y (mod mp_m).  ydig contains number of (16-bit) digits in y.
// Uses global work areas mp_X and mp_Y, plus mp_z
void mp_M16(char *x,char *y, word ydig);
/*** EndHeader */

nodebug void mp_M16(char *x,char *y, word ydig)
{
	// Multiply using 16-bit multiplies at each step
	auto word * xx, * yy;
	xx = (word *)mp_X;

#asm
	ld		hl,(sp+@sp+ydig)
	add	hl,hl
	ld		b,h
	ld		c,L
	dec	bc
	ld		de,mp_Y+1
	ld		hl,mp_Y
	ld		(hl),0
	ldir
	ex		de,hl
	ld		(sp+@sp+yy),hl
	ex		de,hl
	ld		bc,MP_SIZE
	ld		hl,(sp+@sp+x)
	ldir
	ld		bc,MP_SIZE
	ld		hl,(sp+@sp+y)
	ld		de,mp_X
	ldir
	ld		bc,MP_SIZE-1
	ld		hl,(sp+@sp+x)
	ld		d,h
	ld		e,L
	inc	de
	ld		(hl),0
	ldir
#endasm
	for (mp_z=ydig;mp_z--;xx++) {
		if (*xx) {
			//mp_mul16(Y, *xx);	// Z = Y * <16-bit>
			//mp_add16(x,Z);
		#asm
			; do x += Y * de
			ld		hl,(sp+@sp+xx)
			ld		hl,(hl)
			ex		de,hl					; DE = multiplier
			push	ix
			ld		hl,(sp+@sp+2+x)	; dest
			ld		ix,hl					; and augend
			ld		iy,(sp+@sp+2+yy)	; multiplicand
			ld		de',0
			or		a
			ld		bc,MP_SIZE
			uma
			pop	ix
#ifdef _MP_ARITH_STATS_
			c	umas++;
#endif
		#endasm
			mp_mod16(x);
		}
		if (mp_z) {
			yy--;
			//mp_lshift16(mp_Y);
			mp_mod16((char *)yy);
		}
	}
#ifdef _MP_ARITH_STATS_
	muls++;
#endif
}

/*** BeginHeader bin2mp */
void bin2mp(char *, char *, int);
/*** EndHeader */

// Convert binary data into mp format (reverse endianness)
// output must be char array of MP_SIZE elements
nodebug void bin2mp(char *input, char *output, int in_len) {
	auto int i,j;
   memset(output, 0, MP_SIZE);

   // Need to reverse bytes, with padding zeros at end
   for(i = 0, j = in_len-1; i < in_len; i++, j--) {
    	output[i] = input[j];
   }
}

/*** BeginHeader mp2bin */
void mp2bin(char *, char *);
/*** EndHeader */

// Convert an mp number into its representative binary
nodebug void mp2bin(char* input, char* output) {
	auto int i,j;
   memset(output, 0, MP_SIZE);

   // Need to reverse bytes, with padding zeros at end
   for(i = 0, j = MP_SIZE-3; i < MP_SIZE-2; i++, j--) {
    	output[i] = input[j];
   }
}

/*** BeginHeader hex2mp */
// Load number with hexadecimal-encoded ascii string
void hex2mp(char *x,char *y);
/*** EndHeader */
nodebug void hex2mp(char *x,char *y)
{
	auto int n;

	memset(y, 0, MP_SIZE);
	for (n=0;x[n]>0;n++) {
		for (mp_z=4;mp_z--;)
			mp_add16(y,y);
		x[n]|=32;
		y[0]|=x[n]-48-(x[n]>96)*39;
	}
}

/*** BeginHeader print_mp */
// Print number in hex, in C string syntax.  Does multiple of 16 hex digits
// (leading zeros if necessary).
void print_mp(char *x);
/*** EndHeader */
nodebug void print_mp(char *x)
{
	auto int n, q;

	for (n=MP_SIZE-1;!x[n];)
		n--;
	n++;
	n = n + 7 & ~7;
	n--;
	for (q = 0;n>=0;n--) {
		if (!q) printf("\"");
		printf("%c%c",48+x[n]/16+(x[n]>159)*7,48+(x[n]&15)+7*((x[n]&15)>9));
		if (q == 7) {
			if (n)
				printf("\" \\\n");
			else
				printf("\"\n");
			q = 0;
		}
		else
			q++;
	}
	if (q) printf("\"\n");
}


/*** BeginHeader mp_setup_mrecip */
void mp_setup_mrecip(void);
/*** EndHeader */
nodebug void mp_setup_mrecip(void)
{
	// To avoid divisions in mp_mod16(), precompute the reciprocal of the MSBs
	// of the modulus, so we can use multiplication instead.
	// If the MSB of the modulus is '1' (bit 7), then the MSB of mrecip will
	// also be set: it will be in the range 32768..65534 inclusive.
	// mrecip = 2**31/m'.
	// m' = m[MSBs] + 1.  1 added to guarantee non-overflow in modulus reduction,
	// since lower bits of m may be all 1s.
	auto word w;

	w = *(word *)(mp_m + ((MP_SIZE&~3)-2));
	mp_mrecip = (word)(0x80000000uL / (w + 1uL));
#ifdef _MP_ARITH_STATS_
	printf("w = %04X  r = %04X\n", w, mp_mrecip);
#endif
}

/*** BeginHeader mp_setup_mrecip2 */
void mp_setup_mrecip2(void);
/*** EndHeader */
nodebug void mp_setup_mrecip2(void)
{
	// Similar to mp_setup_mrecip, except use more precision.  Using 16 bits only
   // for the reciprocal requires an additional subtraction after the initial
   // modulo reduction over half the time, which substantially slows modular
   // reduction.  Using 24 bits reduces the number of auxiliary subtractions to
   // an insignificant amount. Unfortunately, we have to do manual long
   // division.
	// mrecip2 = 2**48/m"
	// m" = 3MSBs of modulus, +1.
	auto unsigned long w, k, v;
	auto word i;

	w = *(unsigned long *)(mp_m + ((MP_SIZE&~3)-4)) + 1uL;
	//mp_mrecip2 = (unsigned long)(2**48 / w);
	if (!w)
		mp_mrecip2 = 0x80000000uL;
	else {
		v = w >> 1;
		k = 0x80000000uL;
		mp_mrecip2 = 0;
		for (i = 0; i < 32; i++) {
			mp_mrecip2 <<= 1;
			if (k >= v)
				mp_mrecip2 |= 1, k -= v;
			k <<= 1;
		}
	}
#ifdef _MP_ARITH_STATS_
	printf("w = %08lX  r = %08lX\n", w, mp_mrecip2);
#endif
}

/*** BeginHeader mp_modexp */
// b = g^e mod mp_m.
// This is the basic asymmetric key operation, so stats are reset and printed
// at end.
// mp_m and mrecip must be set up prior to calling.
void mp_modexp(char * b, char * g, char * expon);
/*** EndHeader */
nodebug void mp_modexp(char * b, char * g, char * expon)
{
	auto long tt;
	auto word a, aa;
	auto word gdigs, edigs;
	auto word * w;
	auto word notfirst;
   auto int n;

	#GLOBAL_INIT { memset(Zeros, 0, sizeof(Zeros)); }

#ifdef _MP_ARITH_STATS_
	adds = subs = subxs = subx2s = mods = mod16s = shifts = 0;
   shift16s = muls = mul16s = squares = gmuls = 0;
	umas = umss = 0;
#endif
	tt = MS_TIMER;
	for (w = (word *)(g + ((MP_SIZE&~3) - 2)),
        gdigs = (MP_SIZE&~3)/2;
        gdigs && !*w; w--, gdigs--);
	for (w = (word *)(expon + ((MP_SIZE&~3) - 2)), edigs = (MP_SIZE&~3)/2;
        edigs && !*w; w--, edigs--);

	memset(b, 0, MP_SIZE);
	b[0]=1;
	a = 128;
	aa = (edigs<<1)-1;
	notfirst = 0;
	for(n=(aa+1)*8;n--;){
	  	if (notfirst) {
	  		mp_M16(b,b,(MP_SIZE&~3)/2);
#ifdef _MP_ARITH_STATS_
			squares++;
#endif
		}
		if (expon[aa]&a) {
	  		mp_M16(b,g,gdigs);
	  		notfirst = 1;		// Avoid initial squarings of 1.
#ifdef _MP_ARITH_STATS_
	  		gmuls++;
#endif
	  	}
	  	a>>=1;
	  	if (!a)
	  		a = 128, aa--;
	}

#ifdef _MP_ARITH_STATS_
	printf("took %lums\n", MS_TIMER - tt);
	printf("adds:%lu subs:%lu subxs:%lu+%lu mods:%lu mod16s:%lu shift16s:%lu\n" \
          "muls:%lu mul16s:%lu squares:%lu gmuls:%lu\n",
		    adds, subs, subxs, subx2s, mods, mod16s, shift16s, muls, mul16s,
          squares, gmuls);
	printf("  umas:%lu umss:%lu\n", umas, umss);
#endif
}

/*** BeginHeader */
#endif
/*** EndHeader */

