/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*
 *    https.lib
 *  	SSL Module, v. 1.04
 *
 *    - To use HTTPS, define the USE_HTTP_SSL and HTTP_SSL_SOCKETS
 *      macros.
 *    - The number of HTTP and HTTPS servers is determined by
 *      both HTTP_SSL_SOCKETS and HTTP_MAXSERVERS. One server
 *      is allocated for each HTTP ssl socket, and the remaining
 *      servers are allocated as HTTP servers, for example, with
 *      HTTP_MAXSERVERS defined as 4 and HTTP_SSL_SOCKETS defined
 *      as 1, there would be 3 HTTP servers and 1 HTTPS server.
 *
 *    HTTPS support issues:
 *    - HTTPS uses port 443 instead of the HTTP port 80.
 *    - Most browsers use SSLv3 as the default, and TLS must
 *      be selected in the browser to run with this library.
 *      SSLv3 is a possible future addition to the SSL libraries.
 *    - It is not recommended to access the TCP socket directly
 *      when using HTTPS, since it is buried within the ssl_Socket
 *      structure, and reading/writing to it could cause errors in
 *      the SSL connection. Use the wrapper functions http_sock_XXXX
 *      (brought in when USE_HTTP_SSL is defined) instead, which will
 *      send the data using the appropriate socket calls (either SSL or
 *      normal TCP depending on the HttpState passed in).
 *
 *    Tasks:
 */

/*** BeginHeader */

// HTTPS port and number of sockets
#if __HTTP_USE_SSL__
	#ifndef HTTPS_PORT
		#define HTTPS_PORT 443
	#endif

	#ifndef HTTP_SSL_SOCKETS
   	#define HTTP_SSL_SOCKETS	1 // Default of 1 SSL socket
	#endif

   #if (SSL_MAX_CONNECTIONS < HTTP_SSL_SOCKETS)
		#error "SSL_MAX_CONNECTIONS  must be defined to be at least as large " \
             "as HTTP_SSL_SOCKETS"
   #endif

#endif

// TJS - HTTP wrapper functions for SSL support. The following functions are
//       needed to call the appropriate socket/SSL API functions depending on
//       the state of the server (based on the is_ssl flag).

#if __HTTP_USE_SSL__
_http_nodebug
void http_sock_mode(HttpState* state, int mode) {
	if(HTTP_MODE_BINARY == mode) {
		if (state->is_ssl) {
   	 	ssl_mode(&state->sock.ssl, SSL_MODE_BINARY);
	   }
   	else {
			sock_mode(&state->sock.tcp, TCP_MODE_BINARY);
	   }
   }
   // Default, set mode to ASCII
   else {
		if (state->is_ssl) {
   	 	ssl_mode(&state->sock.ssl, SSL_MODE_ASCII);
	   }
   	else {
			sock_mode(&state->sock.tcp, TCP_MODE_ASCII);
	   }
   }
}

_http_nodebug
int http_sock_tick(HttpState* state) {
 	if(state->is_ssl) {
    	return ssl_tick(&state->sock.ssl);
   }
   else {
    	return tcp_tick(&state->sock.tcp);
   }
}

// NOTE: This function ignores the listening port, so we can choose the
// correct port number for this particular server
_http_nodebug
int http_sock_extlisten(HttpState *state, int iface, word lport, longword ina,
                        word port, dataHandler_t datahandler, word reserved,
                        long buffer, int buflen )
{
 	if(state->is_ssl) {
#if __RABBITSYS
 		state->sock.ssl.sock = &state->s;
#endif
    	return ssl_extlisten(&state->sock.ssl, iface, HTTPS_PORT, ina, port,
      						   datahandler, reserved, buffer, buflen, state->cert);
   }
   else {
    	return tcp_extlisten(&state->sock.tcp, iface, HTTP_PORT, ina, port,
                           datahandler, reserved, buffer, buflen);
   }
}

_http_nodebug
int http_sock_established(HttpState *state) {
 	if(state->is_ssl) {
    	return ssl_established(&state->sock.ssl);
   }
   else {
    	return sock_established(&state->sock.tcp);
   }
}

_http_nodebug
int http_sock_bytesready(HttpState *state) {
	if(state->is_ssl) {
	   return ssl_bytesready(&state->sock.ssl);
   }
   else {
    	return sock_bytesready(&state->sock.tcp);
   }
}

_http_nodebug
int http_sock_readable(HttpState *state) {
	if(state->is_ssl) {
	   return ssl_readable(&state->sock.ssl);
   }
   else {
    	return sock_readable(&state->sock.tcp);
   }
}

_http_nodebug
int http_sock_writable(HttpState *state) {
	if(state->is_ssl) {
	   return ssl_writable(&state->sock.ssl);
   }
   else {
    	return sock_writable(&state->sock.tcp);
   }
}

_http_nodebug
int http_sock_cmp(HttpState* state, word pos, int range, void* mem, int* len) {
	if(state->is_ssl) {
     	return ssl_sock_cmp(&state->sock.ssl, pos, range, mem, len);
   }
   else {
    	return sock_cmp(&state->sock.tcp, pos, range, mem, len);
   }
}

_http_nodebug
long http_sock_tbleft(HttpState *state) {
	if(state->is_ssl) {
	   return ssl_tbleft(&state->sock.ssl);
   }
   else {
    	return sock_tbleft(&state->sock.tcp);
   }
}

_http_nodebug
int http_sock_gets(HttpState *state, byte* dp, int len) {
	if(state->is_ssl) {
   	return ssl_gets(&state->sock.ssl, dp, len);
   }
   else {
   	return sock_gets(&state->sock.tcp, dp, len);
   }
}

_http_nodebug
int http_sock_fastread(HttpState *state, byte *dp, int len) {
 	if(state->is_ssl) {
   	return ssl_fastread(&state->sock.ssl, dp, len);
   }
   else {
		return sock_fastread(&state->sock.tcp, dp, len);
   }
}

_http_nodebug
int http_sock_xfastread(HttpState *state, long dp, long len) {
 	if(state->is_ssl) {
   	return ssl_xfastread(&state->sock.ssl, dp, len);
   }
   else {
		return sock_xfastread(&state->sock.tcp, dp, len);
   }
}

_http_nodebug
int http_sock_write(HttpState *state, byte *dp, int len ) {
 	if(state->is_ssl) {
    	return ssl_write(&state->sock.ssl, dp, len);
   }
   else {
		return sock_write(&state->sock.tcp, dp, len);
   }
}

_http_nodebug
int http_sock_fastwrite(HttpState *state, byte *dp, int len ) {
 	if(state->is_ssl) {
    	return ssl_fastwrite(&state->sock.ssl, dp, len);
   }
   else {
		return sock_fastwrite(&state->sock.tcp, dp, len);
   }
}

_http_nodebug
int http_sock_xfastwrite(HttpState *state, long dp, long len) {
 	if(state->is_ssl) {
   	return ssl_xfastwrite(&state->sock.ssl, dp, len);
   }
   else {
		return sock_xfastwrite(&state->sock.tcp, dp, len);
   }
}

_http_nodebug
void http_sock_abort(HttpState *state) {
 	if(state->is_ssl) {
    	ssl_abort(&state->sock.ssl);
   }
   else {
    	sock_abort(&state->sock.tcp);
   }
}

_http_nodebug
void http_sock_close(HttpState *state) {
 	if(state->is_ssl) {
    	ssl_close(&state->sock.ssl);
   }
   else {
    	sock_close(&state->sock.tcp);
   }
}

// Return the socket regardless of state
_http_nodebug
tcp_Socket* http_get_sock(HttpState *state) {
 	if(state->is_ssl) {
   	// SSL socket is already a pointer
    	return state->sock.ssl.sock;
   }
   else {
   	// Just return the address of the TCP socket
    	return &state->sock.tcp;
   }
}

#endif
/*** EndHeader */

/*** BeginHeader https_set_cert */
void https_set_cert(SSL_Cert_t*);
/*** EndHeader */

_http_nodebug
void https_set_cert(SSL_Cert_t* cert) {
	HTTP_DECL_INDEX

   HTTP_FORALL_SERVERS
   	// Only setup the certificate if an HTTPS server
   	if(http_servers HTTP_X.is_ssl == 1) {
	      http_servers HTTP_X.cert = cert;
      }
   HTTP_END_FORALL_SERVERS
}