/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
SSLV3.LIB
	SSL Module, v. 1.04

DESCRIPTION: This library provides SSL version 3 functionality

END DESCRIPTION **********************************************************/

/*** BeginHeader */

#ifndef __SSL_V3_LIB__
#define __SSL_V3_LIB__

#ifdef SSL_V3_DEBUG
#define __SSL_V3_DEBUG__ debug
#else
#define __SSL_V3_DEBUG__ nodebug
#endif

#ifdef SSL3_PRINTF_DEBUG
#define __SSL3_PRINTF_DEBUG__ 1
#else
#define __SSL3_PRINTF_DEBUG__ 0
#endif

// ********************************************************
// *****               SSLv3 Defaults                 *****
// ********************************************************

#define SSL3_VER_MAJ 3 // SSLv3 version number is 3.0
#define SSL3_VER_MIN 0

// Sender constants for SSL3 Finished computations
#define SSL3_SENDER_CLIENT "CLNT"  // 0x434C4E54L
#define SSL3_SENDER_SERVER "SRVR"  // 0x53525652L
#define SSL3_SENDER_CLIENT_LEN 4
#define SSL3_SENDER_SERVER_LEN 4

// Size of Random data for SSLv3
#define SSL3_RANDOM_SIZE  32

// Size of hash for SSL3 (= size of MD5 + size of SHA-1)
#define SSL3_MAX_HASH_SIZE (HMAC_MD5_HASH_SIZE + HMAC_SHA_HASH_SIZE)

// These bytes are repeated 48 times for MD5 and 40 for SHA-1
// to form PAD1 and PAD2 for SSLv3 MAC computations
#define SSL3_MAC_PAD_1_BYTE  0x36
#define SSL3_MAC_PAD_2_BYTE  0x5c

// The above bytes need to repeated to form the pads for the
// SSLv3 MAC generation
#define SSL3_MAC_MD5_PAD_SIZE 48
#define SSL3_MAC_SHA_PAD_SIZE 40

// The verify data size for SSLv3 is the size of a SHA-1 hash plus
// the size of an MD5 hash
#define SSL3_VERIFY_DATA_SIZE 36


// TLS alerts
enum {
	SSL3_ALRT_close_notify = 0,
   SSL3_ALRT_unexpected_message = 10,
   SSL3_ALRT_bad_record_mac = 20,
   SSL3_ALRT_decompression_failure = 30,
   SSL3_ALRT_handshake_failure = 40,
   SSL3_ALRT_no_certificate = 41, // Only for SSLv3
   SSL3_ALRT_bad_certificate = 42,
   SSL3_ALRT_unsupported_certificate = 43,
   SSL3_ALRT_certificate_revoked = 44,
   SSL3_ALRT_certificate_expired = 45,
   SSL3_ALRT_certificate_unknown = 46,
   SSL3_ALRT_illegal_parameter = 47
};
typedef char SSLv3_AlertDescription_t;

/*** EndHeader */

/*** BeginHeader _ssl_v3_hash_expand */
void _ssl_v3_hash_expand(SSL_Secret* secret, char* rand1, char* rand2,
                         char* output, int length);
/*** EndHeader */

//SSLv3 key derivation

//master_secret =
// MD5(pre_master_secret + SHA-1("A" + pre_master_secret + client_random +
//                               server_random)) +
// MD5(pre_master_secret + SHA-1("BB" + pre_master_secret + client_random +
//                               server_random)) +
// MD5(pre_master_secret + SHA-1("CCC" + pre_master_secret + client_random +
//                               server_random)) +
// ...

// Note order of server_random and client_random in the following
// key_block =
// MD5(master_secret + SHA-1("A" + master_secret + server_random +
//                               client_random)) +
// MD5(master_secret + SHA-1("BB" + master_secret + server_random +
//                               client_random)) +
// MD5(master_secret + SHA-1("CCC" + master_secret + server_random +
//                               client_random)) +
// ...

// SSLv3 hash expansion
// rand1 and rand2 are parameters for the client and server random values
// and it is the responsibility of the caller to pass them in in the right
// order. This allows us to use the same body of code for both the Master
// Secret and key block derivations (See above comments).
__SSL_V3_DEBUG__
void _ssl_v3_hash_expand(SSL_Secret* secret, char* rand1, char* rand2,
                         char* output, int length)
{
	auto int i, j, label_size; //, itr;
   auto md5_state_t	md5_hash;
   auto sha_state	sha_hash;
   auto char label_char;
   auto char label[26]; // Hopefully we wont need more than 26 hashes
   auto char temp[SSL3_MAX_HASH_SIZE];
   auto char *outp;

   _ssl_assert(secret != NULL);
   _ssl_assert(rand1 != NULL);
   _ssl_assert(rand2 != NULL);
   _ssl_assert(output != NULL);

   // The label starts as an 'A'
	label_char = 'A';

   // Pointer to current output
   outp = output;

#if __SSL3_PRINTF_DEBUG__
	printf("Length: %d\n", length);
	printf("secret: \n");
	print_bytes(secret->data, secret->length);
	printf("rand1: \n");
	print_bytes(rand1, SSL3_RANDOM_SIZE);
	printf("rand2: \n");
	print_bytes(rand2, SSL3_RANDOM_SIZE);
#endif

   for(i = 0; i < length; i += HMAC_MD5_HASH_SIZE) {
	   // Initialize the hashes
	   md5_init(&md5_hash);
	   sha_init(&sha_hash);

      // ************************************
      // Fill the label first
   	memset(label, 0, sizeof(label));
      label_size = (label_char - 'A') + 1;
#ifdef SSL_V3_DEBUG
      if(label_size > 26) {
      	printf("Internal error: SSLv3 hash expand label too long.\n");
      }
#endif
		for(j = 0; j < label_size; j++) {
       	label[j] = label_char;
      }
      label_char++; // Update the label to use the next character

#if __SSL3_PRINTF_DEBUG__
      label[label_size+1] = '\0';
      printf("Label: %s\n", label);
#endif

      // ************************************
      // do the inner hash
		sha_add(&sha_hash, label, label_size);
		sha_add(&sha_hash, secret->data, secret->length);
		sha_add(&sha_hash, rand1, SSL3_RANDOM_SIZE);
		sha_add(&sha_hash, rand2, SSL3_RANDOM_SIZE);
      sha_finish(&sha_hash, temp);

      // ************************************
      // do the outer hash
		md5_append(&md5_hash, secret->data, secret->length);
		md5_append(&md5_hash, temp, HMAC_SHA_HASH_SIZE);

      // Add the hash to the output data
      if(i + HMAC_MD5_HASH_SIZE > length) {
	      md5_finish(&md5_hash, temp);
         memcpy(outp, temp, (length - i));
      }
      else {
	      md5_finish(&md5_hash, outp);
   	   outp += HMAC_MD5_HASH_SIZE;

         // Make sure we dont write more than length bytes
         _ssl_assert(output + length >= outp);
      }
   } // End for
}

////////////////////////////////////////////////////////////////////////////////

/*** BeginHeader _ssl_v3_derive_keys */
int _ssl_v3_derive_keys(ssl_Socket* state);
/*** EndHeader */

// Derive symmetric keys from the state's master secret
__SSL_V3_DEBUG__
int _ssl_v3_derive_keys(ssl_Socket* state) {
	auto SSL_CipherState* cipher;			// Pointers to state internals
   auto SSL_BulkCipherConfig* bulk_cipher;
   auto SSL_byte_t output[SSL_KEY_BLOCK_SIZE];
   auto SSL_byte_t *keys;

   _ssl_assert(state != NULL);

   // Access to state internals
   cipher = state->cipher_state;
   bulk_cipher = cipher->bulk_cipher;

   // ***Derive the Key Block***
   memset(output, 0, SSL_KEY_BLOCK_SIZE);

	_ssl_v3_hash_expand(state->master_secret,
                       (SSL_byte_t*)&cipher->server_random,
                       (SSL_byte_t*)&cipher->client_random, output,
                       SSL_KEY_BLOCK_SIZE);

#if _SSL_PRINTF_DEBUG
   printf("\nKey material block:\n");
   print_bytes(output, SSL_KEY_BLOCK_SIZE);
#endif

	// Temporary pointer for accessing key material output
  	keys = output;

   // Now we can set up our keys. The sizes for all these values are
   // determined in SSL_cipher_init (Watch pointer arithmetic)
   // 1) client_write_MAC_secret
   memcpy(cipher->client_mac_sec, keys, cipher->client_mac_sec_size);
   keys += cipher->client_mac_sec_size;
   _ssl_assert(keys < (output + SSL_KEY_BLOCK_SIZE));

   // 2) server_write_MAC_secret
   memcpy(cipher->server_mac_sec, keys, cipher->server_mac_sec_size);
   keys += cipher->server_mac_sec_size;
   _ssl_assert(keys < (output + SSL_KEY_BLOCK_SIZE));

   // 3) client_write_key
   memcpy(bulk_cipher->client_key, keys, bulk_cipher->key_size);
   keys += bulk_cipher->key_size;
   _ssl_assert(keys < (output + SSL_KEY_BLOCK_SIZE));

   // 4) server_write_key
   memcpy(bulk_cipher->server_key, keys, bulk_cipher->key_size);
   keys += bulk_cipher->key_size;
   _ssl_assert(keys < (output + SSL_KEY_BLOCK_SIZE));

   // Only set up initialization vectors if we have a block cipher
   // (bulk_cipher->block_size = 0 for stream ciphers)
   if(bulk_cipher->block_size > 0) {
	   // 5) client_write_IV
   	memcpy(bulk_cipher->client_iv, keys, bulk_cipher->block_size);
   	keys += bulk_cipher->block_size;
	   _ssl_assert(keys < (output + SSL_KEY_BLOCK_SIZE));

   	// 6) server_write_IV
   	memcpy(bulk_cipher->server_key, keys, bulk_cipher->block_size);
   	keys += bulk_cipher->block_size;
	   _ssl_assert(keys < (output + SSL_KEY_BLOCK_SIZE));
   }

   // Clear the key material (for security)
   memset(output, 0, SSL_KEY_BLOCK_SIZE);

   return 0;
}

////////////////////////////////////////////////////////////////////////////////
// SSLv3 MAC digest functions
// Note that the following API is based on the Dynamic C HMAC API, which
// allows us to fit the SSLv3 MAC code into the existing SSL stack. Note that
// all the function signatures are the same, and we even use the HMAC context
// structure for the SSLv3 MAC.
////////////////////////////////////////////////////////////////////////////////

/*** BeginHeader _ssl_v3_mac_init */
void _ssl_v3_mac_init(HMAC_ctx_t* ctx, HMAC_hash_t hash);
/*** EndHeader */

// Initialize an SSLv3 MAC context
// Parameter 1: HMAC context state pointer
// Parameter 2: Hash type (MD5 or SHA-1)
// Return value: None
__SSL_V3_DEBUG__
void _ssl_v3_mac_init(HMAC_ctx_t* ctx, HMAC_hash_t hash) {
	_ssl_assert(ctx != NULL);

	ctx->hash_type = hash;
 	switch(hash) {
   default: // Default is MD5
   case HMAC_USE_MD5:
        ctx->hash_size = HMAC_MD5_HASH_SIZE;
        ctx->init = md5_init;
        ctx->append = md5_append;
        ctx->finish = md5_finish;
        break;
   case HMAC_USE_SHA:
        ctx->hash_size = HMAC_SHA_HASH_SIZE;
        ctx->init = sha_init;
        ctx->append = sha_add;
        ctx->finish = sha_finish;
        break;
   }
}

/*** BeginHeader _ssl_v3_mac_hash_init */
void _ssl_v3_mac_hash_init(HMAC_ctx_t* ctx, char* secret, int s_len,
                           char* msg, int m_len);
/*** EndHeader */

// Initialize an SSLv3 MAC digest
// Note that the key and its length are ignored in this function
// Parameter 1: HMAC context state pointer
// Parameter 2: Secret value for initializing hash
// Parameter 3: Length of the secret
// Parameter 4: The message to hash
// Parameter 5: The message length
// Return Value: None
__SSL_V3_DEBUG__
void _ssl_v3_mac_hash_init(HMAC_ctx_t* ctx, char* secret, int s_len,
                           char* msg, int m_len)
{
   auto int i, pad_size;
   auto char pad[SSL3_MAC_MD5_PAD_SIZE];

   _ssl_assert(ctx != NULL);
   _ssl_assert(secret != NULL);
   _ssl_assert(msg != NULL);

   // Calculate pad size based on digest size
	if(HMAC_MD5_HASH_SIZE == ctx->hash_size) {
   	pad_size = SSL3_MAC_MD5_PAD_SIZE;
   }
   else if(HMAC_SHA_HASH_SIZE == ctx->hash_size) {
   	pad_size = SSL3_MAC_SHA_PAD_SIZE;
   }

	// Clear all previous digest state
   memset(&ctx->i_state, 0, sizeof(ctx->i_state));
   memset(&ctx->o_state, 0, sizeof(ctx->o_state));

   // ===== Inner hash =====
	ctx->init(&ctx->i_state);
	ctx->append(&ctx->i_state, secret, s_len); // Append the secret

   // Append pad1
   memset(pad, SSL3_MAC_PAD_1_BYTE, sizeof(pad));
	ctx->append(&ctx->i_state, pad, pad_size);

	ctx->append(&ctx->i_state, msg, m_len);    // Append the initial message

   // ===== Outer hash =====
	ctx->init(&ctx->o_state);
	ctx->append(&ctx->o_state, secret, s_len); // Hash the secret

	 // Append pad2
   memset(pad, SSL3_MAC_PAD_2_BYTE, sizeof(pad));
	ctx->append(&ctx->o_state, pad, pad_size);

   // The inner hash result is appended in _ssl_v3_mac_hash_finish
}

/*** BeginHeader _ssl_v3_mac_hash_append */
void _ssl_v3_mac_hash_append(HMAC_ctx_t* ctx, char* msg, int m_len);
/*** EndHeader */

// Append some data to an SSLv3 MAC digest
__SSL_V3_DEBUG__
void _ssl_v3_mac_hash_append(HMAC_ctx_t* ctx, char* msg, int m_len)
{
	_ssl_assert(ctx != NULL);
   _ssl_assert(msg != NULL);
	ctx->append(&ctx->i_state, msg, m_len);    // Append the message
}

/*** BeginHeader _ssl_v3_mac_hash_finish */
void _ssl_v3_mac_hash_finish(HMAC_ctx_t* ctx, char* digest);
/*** EndHeader */

// Get the final message digest from an SSLv3 MAC
__SSL_V3_DEBUG__
void _ssl_v3_mac_hash_finish(HMAC_ctx_t* ctx, char* digest)
{
	_ssl_assert(ctx != NULL);
   _ssl_assert(digest != NULL);

	ctx->finish(&ctx->i_state, digest); 					  // Finish the inner hash
	ctx->append(&ctx->o_state, digest, ctx->hash_size);  // Append to outer hash
   ctx->finish(&ctx->o_state, digest);              	  // Done
}


////////////////////////////////////////////////////////////////////////////////
/*
SSLv3 Finished Computation
enum { client(0x434C4E54), server(0x53525652) } Sender;

md5_hash = MD5(master_secret + pad2 +
               MD5(handshake messages + Sender + master_secret + pad1))
sha_hash = SHA-1(master_secret + pad2 +
                 SHA-1(handshake messages + Sender + master_secret + pad1))
*/

////////////////////////////////////////////////////////////////////////////////

/*** BeginHeader _ssl_v3_generate_finish_mac */
int _ssl_v3_generate_finish_mac(ssl_Socket*, SSL_Finish_Hash_t*,
										  _ssl_MAC_sender_t, SSL_byte_t*);
/*** EndHeader */

// Generate the final handshake MAC, for SSLv3
__SSL_V3_DEBUG__
int _ssl_v3_generate_finish_mac(ssl_Socket* state, SSL_Finish_Hash_t* hash,
									     _ssl_MAC_sender_t sender, SSL_byte_t* mac)
{

   auto char pad[SSL3_MAC_MD5_PAD_SIZE];
   auto char* out_md5;
   auto char* out_sha;

   _ssl_assert(state != NULL);
   _ssl_assert(hash != NULL);
   _ssl_assert(mac != NULL);

   // Setup our pointers to the output hash
   // SSLv3 Finished MAC is:
   // struct {
	// 	md5_hash[16],
   //    sha_hash[20]
   // };
   out_md5 = &mac[0];
   out_sha = &mac[HMAC_MD5_HASH_SIZE];

	// Setup the pad for the initial hash
   memset(pad, SSL3_MAC_PAD_1_BYTE, sizeof(pad));

   // Hashes already contain handshake messages

   // Sender
	// Choose the appropriate constant based on sender value
   if(SSL_FMAC_CLIENT == sender) {
	   md5_append(&hash->md5_hash, SSL3_SENDER_CLIENT, SSL3_SENDER_CLIENT_LEN);
	   sha_add(&hash->sha_hash, SSL3_SENDER_CLIENT, SSL3_SENDER_CLIENT_LEN);
	}
   else if(SSL_FMAC_SERVER == sender) {
	   md5_append(&hash->md5_hash, SSL3_SENDER_SERVER, SSL3_SENDER_SERVER_LEN);
	   sha_add(&hash->sha_hash, SSL3_SENDER_SERVER, SSL3_SENDER_SERVER_LEN);
   }

   // Master Secret, Pad 1

   // Do MD5 hash
   md5_append(&hash->md5_hash, state->master_secret->data,
              state->master_secret->length);
   md5_append(&hash->md5_hash, pad, SSL3_MAC_MD5_PAD_SIZE);
   md5_finish(&hash->md5_hash, out_md5);

   // Do the SHA-1 hash
   sha_add(&hash->sha_hash, state->master_secret->data,
           state->master_secret->length);
   sha_add(&hash->sha_hash, pad, SSL3_MAC_SHA_PAD_SIZE);
	sha_finish(&hash->sha_hash, out_sha);

   // ===== Do the outer hashes =====

 	// Setup the pad for the outer hashes
   memset(pad, SSL3_MAC_PAD_2_BYTE, sizeof(pad));

   // Initialize hashes
   md5_init(&hash->md5_hash);
   sha_init(&hash->sha_hash);

   // Master secret, Pad 2, output of inner hashes

   // Do the MD5 outer hash
   md5_append(&hash->md5_hash, state->master_secret->data,
              state->master_secret->length);
   md5_append(&hash->md5_hash, pad, SSL3_MAC_MD5_PAD_SIZE);
	md5_append(&hash->md5_hash, out_md5, HMAC_MD5_HASH_SIZE);
   md5_finish(&hash->md5_hash, out_md5);

   // Do the SHA-1 outer hash
   sha_add(&hash->sha_hash, state->master_secret->data,
           state->master_secret->length);
   sha_add(&hash->sha_hash, pad, SSL3_MAC_SHA_PAD_SIZE);
   sha_add(&hash->sha_hash, out_sha, HMAC_SHA_HASH_SIZE);
	sha_finish(&hash->sha_hash, out_sha);

#if __SSL3_PRINTF_DEBUG__
	printf("Generated verify data:\n");
   print_bytes(mac, HMAC_MD5_HASH_SIZE + HMAC_SHA_HASH_SIZE);
   printf("\n");
#endif

   return 0;
}

/*** BeginHeader */
#endif
/*** EndHeader */