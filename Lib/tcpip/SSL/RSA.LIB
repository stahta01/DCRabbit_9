/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
RSA.LIB
	SSL Module, v. 1.04

DESCRIPTION: Implementation of the RSA public-key encryption
             algorithm for SSL
- Algorithm adapted from 'Applied Cryptography, 2nd Edition; Bruce Schneier',

END DESCRIPTION **********************************************************/

/*** BeginHeader */

// Math support for RSA
#define RSA_KEY_LENGTH 64   // 64 bytes  = 512 bits
#ifndef MP_SIZE
#define MP_SIZE 66             // RSA_KEY_LENGTH + 2, this must, however, be a
                            // single number constant as it is used in asm code
#endif

#use "MPARITH.LIB"

// Hash function for Mask Generation Function (MGF1)
#use "SHA.LIB"

// Debugging macros
#ifndef RSA_DEBUG
#define RSA_DEBUG nodebug
#endif

// Primitive types
typedef char RSA_byte_t;
typedef unsigned int RSA_uint16_t;

// Constants
#define RSA_MGF1_MAX_MASK (1 << 32) // 2**32 maximum size

/*** EndHeader */

/*** BeginHeader RSA_PKCS1v1_5_Encrypt */

#define RSA_PKCS1_SUCCESS        0
#define RSA_PKCS1_MSG_TOO_LONG   -1

int RSA_PKCS1v1_5_Encrypt(RSA_byte_t*, RSA_byte_t*, RSA_byte_t*, unsigned int,
                      RSA_byte_t*);
/*** EndHeader */

RSA_DEBUG
int RSA_PKCS1v1_5_Encrypt(RSA_byte_t* N, RSA_byte_t* expon, RSA_byte_t* data,
                  unsigned int data_len, RSA_byte_t* output)
{
   auto unsigned int PS_len;
   auto RSA_byte_t PS[MP_SIZE - 3]; // Max size is when data len = 0
   auto RSA_byte_t msg[MP_SIZE], mp_msg[MP_SIZE];

   // Length checking
   if(data_len > RSA_KEY_LENGTH-11) {
     	return RSA_PKCS1_DATA_TOO_LONG;
   }

   // calculate block length, get block
   PS_len = RSA_KEY_LENGTH - data_len - 3;

   // CHECK FOR NON-ZERO BYTES
	TLS_big_rand(PS, PS_len);

   // Build message to encrypt
   msg[0] = 0x00;
   msg[1] = 0x02;
   memcpy(&msg[2], PS, PS_len);
   msg[PS_len+3] = 0;
   memcpy(&msg[PS_len+4], data, data_len);

   // Convert to MP data for encryption
   bin2mp(msg, mp_msg, klen);

   // Encrypt the message and return
   RSA_op(N, expon, mp_msg, output);
}

/*** BeginHeader RSA_PKCS1v1_5_Decrypt */

#define RSA_PKCS1_DECR_ERROR   -1

int RSA_PKCS1v1_5_Decrypt(RSA_byte_t*, RSA_byte_t*, RSA_byte_t*, RSA_byte_t*);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
RSA_PKCS1v1_5_Decrypt                  <RSA.LIB>

SYNTAX: int RSA_PKCS1v1_5_Decrypt(RSA_byte_t* N, RSA_byte_t* priv_key,
                                  RSA_byte_t* data, RSA_byte_t* output);

DESCRIPTION: Dcrypt an RSA-encrypted value, with PKCS#1 v1.5 padding.
				 PKCS#1 v1.5 padding is as follows:

             00 | 02 | PS | 00 | M

             Where M is the message, and | denotes concatenation
             PS is a sequence of non-zero random bytes of length
             RSA_KEY_LENGTH - length(M) - 3.

PARAMETER 1: RSA Public modulus  (must be in MP format, see ARITH.LIB, bin2mp)
PARAMETER 2: RSA private key exponent (in MP format)
PARAMETER 3: Encrypted data
PARAMETER 4: Output buffer (must be at least RSA_KEY_LEGTH bytes

RETURN VALUE: Returns -1 on error, length of extracted message on success

END DESCRIPTION **********************************************************/

RSA_DEBUG
int RSA_PKCS1v1_5_Decrypt(RSA_byte_t* N, RSA_byte_t* priv_key, RSA_byte_t* data,
                          RSA_byte_t* output)
{
	auto int i, len;
   auto RSA_byte_t PS[MP_SIZE - 3]; // Max size is when data len = 0
   auto RSA_byte_t msg[MP_SIZE], mp_msg[MP_SIZE];

   // These are important, we need the values to be
   // padded with 0's, not random data
   memset(msg, 0, MP_SIZE);
   memset(mp_msg, 0, MP_SIZE);

   // Convert raw data to MP format
   bin2mp(data, msg, RSA_KEY_LENGTH);

   // Decrypt the message
   RSA_op(N, priv_key, msg, mp_msg);

   // Convert message back to binary format
   mp2bin(mp_msg, msg);

   // Build message to encrypt
   if(msg[0] != 0x00 || msg[1] != 0x02) {
    	return RSA_PKCS1_DECR_ERROR;
   }

	// Skip over padding
   i = 2;
   len = RSA_KEY_LENGTH-2;
   while(msg[i] != 0 && len > 0) {
    	i = i + 1;
      len = len - 1;
   }

   // Account for the 0 padding terminator
   i++; len--;

   // Extract the decrypted message
   memcpy(output, &msg[i], len);

   // Return length of decrypted message
   return len;

}

/*** BeginHeader RSA_op */
void RSA_op(RSA_byte_t*, RSA_byte_t*, RSA_byte_t*, RSA_byte_t*);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
RSA_op                                 <RSA.LIB>

SYNTAX: void RSA_op(RSA_byte_t* N, RSA_byte_t* expon,
                    RSA_byte_t* data, RSA_byte_t* output);

DESCRIPTION: Perform an RSA encryption/decryption operation.
             Assumes all operations and parameters are based
             on the modulus size defined by the macro MP_SIZE
             (arith.lib).

PARAMETER 1: The RSA public modulus
PARAMETER 2: The RSA exponent (public exponent or private key)
PARAMETER 3: Plaintext data (encryption) or ciphertext (decryption)
PARAMETER 4: Output ciphertext (encryption) or plaintext (decryption)

RETURN VALUE: None

END DESCRIPTION **********************************************************/

RSA_DEBUG
void RSA_op(RSA_byte_t* N, RSA_byte_t* expon,
            RSA_byte_t* data, RSA_byte_t* output)
{
   // Set up the modulus for RSA from public key
   memcpy(mp_m, N, MP_SIZE);
	mp_setup_mrecip();
	mp_setup_mrecip2();

   // Do the operation
	mp_modexp(output, data, expon);
}


/*** BeginHeader RSA_convert_ASCII */
RSA_convert_ASCII(RSA_byte_t*, RSA_byte_t*);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
RSA_convert_ASCII                      <RSA.LIB>

SYNTAX: RSA_convert_ASCII(RSA_byte_t* in_str, RSA_byte_t* out_str);

DESCRIPTION: Convert an ASCII-encoded string into a little-endian
             raw format for use with RSA_op. Assumes all operations
             and parameters are based on the modulus size defined by
             the macro MP_SIZE (mparith.lib).

             The input format is as follows:
             The output value 0xAB 4E 67 8A 9D would be represented as
             the string constant "AB4E678A9D".

PARAMETER 1: ASCII encoded string
PARAMETER 2: Output for use with RSA_op

RETURN VALUE: None

END DESCRIPTION **********************************************************/

RSA_DEBUG
RSA_convert_ASCII(RSA_byte_t* in_str, RSA_byte_t* out_str) {
	auto RSA_byte_t temp[MP_SIZE*2]; // Input string is twice as long

   strcpy(temp, in_str);
   hex2mp(temp, out_str); // Conversion routine (arith.lib)
}

/*** BeginHeader MGF1 */
int MGF1(RSA_byte_t*, RSA_uint16_t, RSA_byte_t*, RSA_uint16_t);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
MGF1                                   <RSA.LIB>

SYNTAX: int MGF1(RSA_byte_t* seed, RSA_uint16_t slen, RSA_byte_t* mask,
                 RSA_uint16_t mlen);

DESCRIPTION: PKCS #1 Mask Generation Function, used by the RSA-OAEP
             encrypt/decrypt functions. Follows PKCS #1 v2.1, Appendix B,
             section B.2.1. Uses SHA-1 hash function.

PARAMETER 1: Mask seed, used to generate the mask
PARAMETER 2: Length of seed
PARAMETER 3: Output buffer for mask
PARAMETER 4: Length of desired output

RETURN VALUE: Non-zero on success, 0 on failure (mask size too big)

END DESCRIPTION **********************************************************/

RSA_DEBUG
int MGF1(RSA_byte_t* seed, RSA_uint16_t slen, RSA_byte_t* mask,
         RSA_uint16_t mlen)
{
	auto sha_state state; // State for our hash function
   auto unsigned long counter, end, endmod, offs;
   auto RSA_byte_t counter_str[4]; // String representation of counter
   auto char digest[SHA_HASH_SIZE];

	// Length check
	if(mlen > RSA_MGF1_MAX_MASK) return 0;

   // Initialize hash
   sha_init(&state);

	// The loop ends at ceil(mask length / hash length) -1
	end = mlen / SHA_HASH_SIZE;
   endmod = mlen % SHA_HASH_SIZE;
   if(mlen % 2 == 0 || endmod == 0) {
		// only subtract one if the mask length is even,
      // or no remainder (handles ceil)
      end--;
  	}

   // Generate mask
   offs = 0;
   for(counter = 0; counter < end; counter++) {
    	// Convert counter to bytes
		counter_str[0] = (RSA_byte_t)((counter & 0xFF000000L) >> 24);
		counter_str[1] = (RSA_byte_t)((counter & 0x00FF0000L) >> 16);
  		counter_str[2] = (RSA_byte_t)((counter & 0x0000FF00L) >>  8);
		counter_str[3] = (RSA_byte_t) (counter & 0x000000FFL);

      // Concatenate seed
      sha_add(&state, seed, slen);
      sha_add(&state, counter_str, 4);

      // Add the digest to the mask
      if(offs + SHA_HASH_SIZE < mlen) {
      	// We have more mask length to go
         sha_finish(&state, digest);
         memcpy(&mask[offs], digest, SHA_HASH_SIZE);
         offs += SHA_HASH_SIZE;
         sha_init(&state); // Reinit hash
      }
      else {
       	// We are done, get the last few bytes
         sha_finish(&state, digest);
         memcpy(&mask[offs], digest, mlen - (offs + SHA_HASH_SIZE));
      }
   }
	return 1;
}