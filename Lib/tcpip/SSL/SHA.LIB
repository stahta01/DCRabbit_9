/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/****************************************************************************
SHA.LIB
	SSL Module, v. 1.04

Implementation of the SHA-1 message digest algorithm
Recipe taken from 'Applied Cryptography, 2nd Edition; Bruce Schneier'

The SHA-1 API is not currently publicly available.

***************************************************************************/


/*** BeginHeader sha_round1, sha_round2, sha_round3, sha_round4, sha_xor, sha_rotC */

#ifndef __SHA_LIB__
#define __SHA_LIB__

#ifdef SHA_DEBUG
	#define _sha_debug debug
#else
	#define _sha_debug nodebug
#endif

// SHA output is 20 bytes
#define SHA_HASH_SIZE    20

// Initialization constants (part of the SHA-1 spec)
#define SHA_INIT_A 0x67452301
#define SHA_INIT_B 0xefcdab89
#define SHA_INIT_C 0x98badcfe
#define SHA_INIT_D 0x10325476
#define SHA_INIT_E 0xc3d2e1f0
#define SHA_K_1 0x5a827999
#define SHA_K_2 0x6ed9eba1
#define SHA_K_3 0x8f1bbcdc
#define SHA_K_4 0xca62c1d6

// The SHA-1 state structure. This contains everything an individual SHA-1
// hash needs to save state
typedef struct
{
   // hash must be 1st field
	unsigned long hash[5];

	// message block must be 2nd field
	unsigned long message_block[16]; //each 4-byte is in little-endian format

   // Index into message block (stores current posistion in block, since
   // we only process whole blocks)
	int message_index;

   // The total length of all input data added
	unsigned long input_length;
} sha_state;

// These are not C-callable functions! (Assembly only)
xmem void sha_round1(void);
xmem void sha_round2(void);
xmem void sha_round3(void);
xmem void sha_round4(void);
xmem void sha_xor(void);
xmem void sha_rotC(void);

// SHA_ST: store BCDE at (reg+x).  reg is IX, IY or SP.
#define SHA_ST(reg, x) \
	ex		de,hl $ \
	ld		(reg+x),hl $ \
	ld		h,b $ \
	ld		L,c $ \
	ld		(reg+x+2),hl

// SHA_LD: load BCDE from (reg+x).  reg is IX, IY or SP.
#define SHA_LD(reg, x) \
	ld		hl,(reg+x) $ \
   ex		de,hl $ \
   ld		hl,(reg+x+2) $ \
   ld		b,h $ \
   ld		c,L

// SHA_ADD: add (reg+x) to BCDE.  reg is IX, IY or SP.
#define SHA_ADD(reg, x) \
	ld		hl,(reg+x) $ \
	add	hl,de $ \
	ex		de,hl $ \
	ld		hl,(reg+x+2) $ \
	adc	hl,bc $ \
	ld		b,h $ \
	ld		c,L

// SHA_ROL: rotate BCDE left by 1
#define SHA_ROL \
	ld		a,b $ rla $ rl de $ rl c $ rl b

// SHA_ROR: rotate BCDE right 1
#define SHA_ROR \
	ld		a,e $ rra $ rr b $ rr c $ rr de

// SHA_ROL8: rotate BCDE left by 8
#define SHA_ROL8 \
	ld		a,b $ ld b,c $ ld c,d $ ld d,e $ ld e,a

// These stack offsets assume a 3 byte xmem return address is on the stack.
// These offsets are used to create a stack workspace for the SHA-1 operations.
// Since SHA1 cycles through a,b,c,d,e, instead of moving the data around, we
// let it grow down in the stack.  We use the stack for temporary storage.
// SP keeps decrementing by 4 bytes for each round step. There are 80 steps,
// so at the very end we increment the SP back up by 320.
// Initially a stack frame is set up thus (from high to low memory):
//
//       X0
//       X1
//       ...
//       X15
//       E
//       D
//       C
//       B
//       A
//        <- SP
//
// thus 'A' (first hash register) is at (sp+0).  X0-15 is the initial message
// block which we are processing.  This is stored in reverse order i.e. X0 at
// the highest offset.
#define SHA_OFFS_A  3
#define SHA_OFFS_B  7
#define SHA_OFFS_C  11
#define SHA_OFFS_D  15
#define SHA_OFFS_E  19
#define SHA_OFFS_X0  83
#define SHA_OFFS_X2  75
#define SHA_OFFS_X8  51
#define SHA_OFFS_X13 31

// Move with endianness swapping
#define SHA_RMOVE(x) \
	ld		hl,(ix+20+(x*4)) $ \
   ld		a,h $ ld h,L $ ld L,a $ \
   ld		(sp+82-(x*4)),hl $ \
	ld		hl,(ix+22+(x*4)) $ \
   ld		a,h $ ld h,L $ ld L,a $ \
   ld		(sp+80-(x*4)),hl

// SHA_F etc.:
// Result returned in BCDE.
// There are 3 distinct functions for the different SHA-1 operations:
//   F : ((c^d)&b)^d)
//   H : b^c^d
//   G : b&c | (b|c)&d
// It is assumed that the parameters b, c and d are at SP offsets x, x+4 and
// x+8 respectively.
// These could be improved somewhat...


// Result returned in BCDE.
//   G : b&c | (b|c)&d
// It is assumed that the parameters b, c and d are at SP offsets x, x+4 and
// x+8 respectively.
#define SHA_G(x) \
	ld		hl,(sp+x+4) $ \
	ex		de,hl $ \
   ld		hl,(sp+x) $ \
   or		hl,de $ \
   ex		de,hl $ \
   ld		hl,(sp+x+8) $ \
   and	hl,de $ \
   ex		de',hl $ \
	ld		hl,(sp+x+4) $ \
	ex		de,hl $ \
   ld		hl,(sp+x) $ \
   and	hl,de $ \
   ex		de,hl $ \
   ex		de',hl $ \
   or		hl,de

#define SHA_G_LSB SHA_G(SHA_OFFS_B) $ ex de,hl
#define SHA_G_MSB SHA_G(SHA_OFFS_B+2) $ ld b,h $ ld c,L

// Result returned in BCDE.
//   F : ((c^d)&b)^d)
// It is assumed that the parameters b, c and d are at SP offsets x, x+4 and x+8
// respectively.
#define SHA_F(x) \
	ld		hl,(sp+x+4) $ \
	ex		de,hl $ \
   ld		hl,(sp+x+8) $ \
   ld		a,h $ \
   xor	d $ \
   ld		d,a $ \
   ld		a,L $ \
   xor	e $ \
   ld		e,a $ \
   ld		hl,(sp+x) $ \
   and	hl,de $ \
   ex		de,hl $ \
   ld		hl,(sp+x+8) $ \
   ld		a,h $ \
   xor	d $ \
   ld		d,a $ \
   ld		a,L $ \
   xor	e $ \
   ld		e,a

#define SHA_F_LSB SHA_F(SHA_OFFS_B)
#define SHA_F_MSB SHA_F(SHA_OFFS_B+2) $ ld b,d $ ld c,e

// Result returned in BCDE.
//   H : b^c^d
// It is assumed that the parameters b, c and d are at SP offsets x, x+4 and x+8
// respectively.
#define SHA_H_LSB \
	ld		hl,(sp+SHA_OFFS_B) $ \
	ex		de,hl $ \
	ld		hl,(sp+SHA_OFFS_C) $ \
	ld		a,h $ \
	xor	d $ \
	ld		d,a $ \
	ld		a,L $ \
	xor	e $ \
	ld		hl,(sp+SHA_OFFS_D) $ \
	xor	L $ \
	ld		e,a $ \
	ld		a,d $ \
	xor	h $ \
	ld		d,a

#define SHA_H_MSB \
	ld		hl,(sp+SHA_OFFS_B+2) $ \
	ex		de,hl $ \
	ld		hl,(sp+SHA_OFFS_C+2) $ \
	ld		a,h $ \
	xor	d $ \
	ld		d,a $ \
	ld		a,L $ \
	xor	e $ \
	ld		hl,(sp+SHA_OFFS_D+2) $ \
	xor	L $ \
	ld		c,a $ \
	ld		a,d $ \
	xor	h $ \
	ld		b,a

/*** EndHeader */

// Assembly-only routines

#asm xmem

// SHA-1 rounds functions. SHA-1 has four rounds each block of data goes
// through, with round 2 and round 4 being identical.
// Each round starts by performing a specific operation, those operations
// being defined as follows:
//   F : ((c^d)&b)^d)
//   H : b^c^d
//   G : b&c | (b|c)&d
// Once the operation has been performed, common code finishes the operation

sha_round2::
sha_round4::
	SHA_H_MSB
   SHA_H_LSB
	jr	.common
sha_round3::
	SHA_G_MSB
   SHA_G_LSB
	jr	.common
sha_round1::
	SHA_F_MSB
   SHA_F_LSB
.common:
   SHA_ADD(sp, SHA_OFFS_E)
   SHA_ADD(sp, SHA_OFFS_X0)
   SHA_ADD(iy, 0)		; add in the Yn constant
   push	bc
   push	de				; save current result
	SHA_LD(sp, SHA_OFFS_A+4)	; load A and rotate left 5 bits.
   SHA_ROL8
   SHA_ROR
   SHA_ROR
   SHA_ROR
   SHA_ADD(sp,0)		; add in previously saved result
   add	sp,4
	lret					; return with BCDE = result of this round step

// Optimized XOR routine for SHA-1, using the stack trick (described in
// the sha_transform comments)
sha_xor::
	; This routine assumes latest temp result pushed on stack, which is why
   ; extra offset of 4.
   ; sets E = (X13^X8^X2^X0) <<< 1.
   ; Also does rotation of new 'C' by 30.
   ld		hl,(sp+SHA_OFFS_X0+4)  ; Get temporary result into BC:DE
   ex		de,hl
   ld		hl,(sp+SHA_OFFS_X2+4)
	ld		b,h
   ld		c,L
   ld		hl,(sp+SHA_OFFS_X8+4)  ; Get value to xor with
   ld		a,L
	ex		de',hl                 ; save H
   ld		hl,(sp+SHA_OFFS_X13+4) ; load next 16 bits
   xor	L                      ; begin xor
   xor	c
   xor	e
   ld		L,a                    ; Save initial result
   exx                          ; Get DE' into HL
   ld		a,d                    ; Puts original H into a
   exx                          ; Swap back
   xor	h                      ; Start next xor operation
   xor	b
   xor	d
   ld		h,a                    ; Save result on stack
   ld		(sp+SHA_OFFS_E+4),hl
   ld		hl,(sp+SHA_OFFS_X0+6)  ; Get next part of temporary
   ex		de,hl
   ld		hl,(sp+SHA_OFFS_X2+6)
	ld		b,h
   ld		c,L
   ld		hl,(sp+SHA_OFFS_X8+6)
   ld		a,L
	ex		de',hl                 ; Save H
   ld		hl,(sp+SHA_OFFS_X13+6)
   xor	L                      ; Begin XOR operation
   xor	c
   xor	e
   ld		c,a                    ; Save initial result in c
   exx                          ; Get DE' into HL
   ld		a,d                    ; Puts original H into a
   exx                          ; Swap back
   xor	h                      ; Begin next xor operation
   xor	b
   xor	d
   ld		b,a                    ; Put result in bc
   ld		hl,(sp+SHA_OFFS_E+4)   ; Load SHA block E into HL
   ex		de,hl                  ; put E in de
   SHA_ROL                      ; Rotate BC:DE left by 1
   SHA_ST(sp,SHA_OFFS_E+4)      ; Store on the stack at E
sha_rotC::
   SHA_LD(sp,SHA_OFFS_C)        ; Rotate SHA block C
   SHA_ROR
   SHA_ROR
   SHA_ST(sp,SHA_OFFS_C)
	lret
#endasm

/*** BeginHeader sha_init */
void sha_init(sha_state *state);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
sha_init										   <SHA.LIB>

SYNTAX: void sha_init(sha_state *state);

DESCRIPTION: Initialize a SHA-1 hash. The parameter is a SHA-1 hash
             state structure to be initialized.

PARAMETER 1: Pointer to SHA-1 state structure

RETURN VALUE: None

END DESCRIPTION **********************************************************/

// SHA-1 hash init array consisting of the SHA-1 initialization constants
static const unsigned long sha_hash_init[5] =
{
 SHA_INIT_A,
 SHA_INIT_B,
 SHA_INIT_C,
 SHA_INIT_D,
 SHA_INIT_E
};

_sha_debug
void sha_init(sha_state *state)
{
	// Start off the hash, reset the index and length
	memcpy(state->hash, sha_hash_init, sizeof(state->hash));
	state->message_index = 0;
	state->input_length = 0;
}

/*** BeginHeader sha_add */
void sha_add(sha_state *state, char *in_bytes, int count);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
sha_add 										   <SHA.LIB>

SYNTAX: void sha_add(sha_state *state, char *in_bytes, int count);

DESCRIPTION: Add an arbitrary amount of text to a SHA-1 hash. The
             current hash is passed in through the state parameter,
             and the text and its length in the other two parameters.

PARAMETER 1: Pointer to SHA-1 state structure
PARAMETER 2: Pointer to root data buffer containing input data
PARAMETER 3: The length (in bytes) of the input data

RETURN VALUE: None

END DESCRIPTION **********************************************************/

_sha_debug
void sha_add(sha_state *state, char *in_bytes, int count)
{
	word btm;
	char *message_bytes;

   // Update the total length with the size of the new data
	state->input_length += count;

   // Get a pointer to the internal hash block
	message_bytes = (char *)state->message_block;

   // While there are still bytes left to read
	while (count)
	{
   	// The hash block is 64 bytes, and we wrap as needed
      btm = 64 - state->message_index;
      if (count < btm)
      {
      	btm = count;
      }

      // Copy the input data into the hash block
      memcpy(message_bytes + state->message_index, in_bytes, btm);

      // Update the message index with the number of bytes added
		state->message_index += btm;

      // Update our count and input buffer
      count -= btm;
      in_bytes += btm;

      // See if we have read an entire block yet
		if (state->message_index == 64)
		{
      	//Run the hash on the current block and reset the block index
			sha_transform(state);
			state->message_index = 0;
		}
	}
}

/*** BeginHeader sha_finish */
void sha_finish(sha_state *state, char *digest);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
sha_finish 										<SHA.LIB>

SYNTAX: void sha_finish(sha_state *state, char *digest);

DESCRIPTION: Finish a SHA-1 hash and return the result. The output
             parameter must be a root data buffer of at least 20 bytes
             (the size of a SHA-1 hash output).

PARAMETER 1: Pointer to SHA-1 state structure
PARAMETER 2: Pointer to root data buffer for output data

RETURN VALUE: None

END DESCRIPTION **********************************************************/

// NULL padding for the finish operation
static const char sha_pad[68] = { 0, };

_sha_debug
void sha_finish(sha_state *state, char *digest)
{
	unsigned long temp_length;

	// Get the total input length in bits
	temp_length = state->input_length * 8;

	// Add padding and do final transform
	sha_add(state, "\x80", 1); //a 1 bit followed by 0 bits

   // 4 extra nulls for most sig. 32 bits of 64 bit length field...
	sha_add(state, sha_pad, ((120 - state->message_index) & 63) + 4);

   // Switch to network byte order
	sha_swap_32(&temp_length);

   // Finally, add the length
	sha_add(state, (char *)&temp_length, 4);

#ifdef SHA_DEBUG
	if(state->message_index)
	{
		printf("ERROR: message_index = %d on finish\n", state->message_index);
	}
   printf("a=%08lx\n", state->hash[0]);
   printf("b=%08lx\n", state->hash[1]);
   printf("c=%08lx\n", state->hash[2]);
   printf("d=%08lx\n", state->hash[3]);
   printf("e=%08lx\n", state->hash[4]);
#endif

	//swap and copy all five hash registers
   sha_copy_and_swap(digest, (char *)state->hash, 5);
}

/**********************
Internal helper functions
***********************/

/*** BeginHeader sha_transform */
void sha_transform(sha_state *state);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
sha_finish 										<SHA.LIB>

SYNTAX: void sha_transform(sha_state *state);

DESCRIPTION: The primary SHA-1 hash function. This function works on the
             64-byte SHA-1 message block, performing the SHA-1 operations
             upon the data in the current state's message buffer and
             storing the result for further use.

PARAMETER 1: Pointer to SHA-1 state structure

RETURN VALUE: None

END DESCRIPTION **********************************************************/


static const unsigned long sha_karray[4] =
{
 SHA_K_1,
 SHA_K_2,
 SHA_K_3,
 SHA_K_4
};

_sha_debug
void sha_transform(sha_state *state)
{
#ifdef SHA_DEBUG
	int i;
	char *message_bytes;

	printf("before transform:\n");
	message_bytes = (char *)state->message_block;
	for(i = 0;i < 64;i++) {
		printf(" %02x", message_bytes[i]);
      if (i == 31)
      	printf("\n");
   }
	printf("\n");
   printf("a=%08lx\n", state->hash[0]);
   printf("b=%08lx\n", state->hash[1]);
   printf("c=%08lx\n", state->hash[2]);
   printf("d=%08lx\n", state->hash[3]);
   printf("e=%08lx\n", state->hash[4]);
#endif

/*
   Dirty trick time:  since SHA1 cycles through a,b,c,d,e, instead of moving
   the data around, we let it grow down in the stack.  We use the stack for
   temporary storage.  SP keeps decrementing by 4 bytes for each round step.
   There are 80 steps, so at the very end we increment the SP back up by 320.
   Initially a stack frame is set up thus (from high to low memory):

       X0
       X1
       ...
       X15
       E
       D
       C
       B
       A
         <- SP

   thus 'A' (first hash register) is at (sp+0).  X0-15 is the initial message
   block which we are processing.  This is stored in reverse order i.e. X0 at
   the highest offset.

   Each round step does some calculations involving A..E and one of the X
   values (initially X0). This results in a temporary value i.e.
     t = (A<<<5) + func(B,C,D) + E + X0 + Yn.
   't' is pushed onto the stack, and becomes 'A' for the next round step.
   The old E is not needed any more, so it is replaced with a new X value
   (X16 for the first round step) i.e.
     X16 = (X13 ^ X8 ^ X2 ^ X0) <<< 1
   The next round step is done with the adjusted SP.  This continues for all
   80 round steps. (The computation of the new Xn value in the last 16 steps is
   not necessary, since the results will never be used).

   Finally, the most recent values of A..E are added in to the original hash
   state and the stack is popped by 320 bytes.
*/

#asm
	push	ix
	ld		ix,(sp+@sp+state+2)	; IX points to state struct.  First 64 bytes
                              ; are message block, next 20 bytes are
                              ; current hash.
	ld		hl,-84
   add	hl,sp
   ld		sp,hl		; allocate 64 bytes + 20 bytes
   ex		de,hl
   ld		hl,ix		; HL points to hash
   ld		bc,20
   ldir				; Load bottom of stack frame with current hash
   ; Now move message block.  We need to reverse its overall
   ; order so that X0 is at highest stack address.  Not only that,
   ; but the endianness is also swapped.
	SHA_RMOVE(0)
	SHA_RMOVE(1)
	SHA_RMOVE(2)
	SHA_RMOVE(3)
	SHA_RMOVE(4)
	SHA_RMOVE(5)
	SHA_RMOVE(6)
	SHA_RMOVE(7)
	SHA_RMOVE(8)
	SHA_RMOVE(9)
	SHA_RMOVE(10)
	SHA_RMOVE(11)
	SHA_RMOVE(12)
	SHA_RMOVE(13)
	SHA_RMOVE(14)
	SHA_RMOVE(15)

   ld		iy,sha_karray	; Point to 'Yn' additive constants
   ld		b,20				; loop count
.loop1:
	exx
   lcall	sha_round1
   push	bc
   push	de					; Save temp and shift SP down
   lcall	sha_xor
   exx
   djnz	.loop1
   ld		bc,4
   add	iy,bc

   ld		b,20				; loop count
.loop2:
	exx
   lcall	sha_round2
   push	bc
   push	de					; Save temp and shift SP down
   lcall	sha_xor
   exx
   djnz	.loop2
   ld		bc,4
   add	iy,bc

   ld		b,20				; loop count
.loop3:
	exx
   lcall	sha_round3
   push	bc
   push	de					; Save temp and shift SP down
   lcall	sha_xor
   exx
   djnz	.loop3
   ld		bc,4
   add	iy,bc

; First part of 4th round: keep doing XORs for expanded input data
   ld		b,4				; loop count
.loop4:
	exx
   lcall	sha_round4
   push	bc
   push	de		; Save temp and shift SP down
   lcall	sha_xor
   exx
   djnz	.loop4

; 2nd part of 4th round: no need to to the XORs.  Rotate 'C' only.
   ld		b,16				; loop count
.loop5:
	exx
   lcall	sha_round4
   push	bc
   push	de		; Save temp and shift SP down
   lcall	sha_rotC
   exx
   djnz	.loop5

	SHA_LD(sp, 0)		; A
   SHA_ADD(ix, 0)
   SHA_ST(ix, 0)

	SHA_LD(sp, 4)		; B
   SHA_ADD(ix, 4)
   SHA_ST(ix, 4)

	SHA_LD(sp, 8)		; C
   SHA_ADD(ix, 8)
   SHA_ST(ix, 8)

	SHA_LD(sp, 12)		; D
   SHA_ADD(ix, 12)
   SHA_ST(ix, 12)

	SHA_LD(sp, 16)		; E
   SHA_ADD(ix, 16)
   SHA_ST(ix, 16)

	ld		hl,404
   add	hl,sp
   ld		sp,hl				; discard extra 320 + 84 bytes we pushed

   pop	ix
#endasm
#ifdef SHA_DEBUG
	printf("after transform:\n");
   printf("a=%08lx\n", state->hash[0]);
   printf("b=%08lx\n", state->hash[1]);
   printf("c=%08lx\n", state->hash[2]);
   printf("d=%08lx\n", state->hash[3]);
   printf("e=%08lx\n", state->hash[4]);
#endif

}

/*** BeginHeader sha_swap_32 */
xmem void sha_swap_32(unsigned long *operand);
/*** EndHeader */

// Do a swap within a 32-bit area in memory
// This effectively reverses the order of bytes
// in a 32-bit area
// Assumes the parameter is stored in HL

#asm xmem
sha_swap_32::
	 ld	 b, (hl)		; Load BC:DE with the 32-bit value
	 inc	 hl
	 ld	 c, (hl)
	 inc	 hl
	 ld	 d, (hl)
	 inc	 hl
	 ld	 e, (hl)
	 ld	 (hl), b    ; BC:DE now goes back into (HL) in reverse
	 dec	 hl
	 ld	 (hl), c
	 dec	 hl
	 ld	 (hl), d
	 dec	 hl
	 ld	 (hl), e					;total 52 cycles
	 lret
#endasm


/*** BeginHeader sha_copy_and_swap */
xmem void sha_copy_and_swap(char * dest, char * src, word lwcount);
/*** EndHeader */

//   Copy 'lwcount' 32-bit words from src to dest, byte swapping them into
//   reverse endianness.

_sha_debug xmem void sha_copy_and_swap(char * dest, char * src, word lwcount)
{
	#asm
	push	ix
   ld		iy,hl		; dest in IY
	ld		hl,(sp+@sp+lwcount+2)
   ld		b,L		; count (max 255)
   ld		de,4		; increment
   ld		ix,(sp+@sp+src+2)	; source in IX
.loop:
	ld		hl,(ix+2)
   ld		a,h
   ld		h,L
   ld		L,a
   ld		(iy),hl
	ld		hl,(ix)
   ld		a,h
   ld		h,L
   ld		L,a
   ld		(iy+2),hl
   add	iy,de
   add	ix,de
   djnz	.loop

	pop	ix
	#endasm
}


/*** BeginHeader */
#endif
/*** EndHeader */