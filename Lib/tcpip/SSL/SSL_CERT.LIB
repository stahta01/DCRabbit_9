/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
SSL_CERT.LIB
	SSL Module, v. 1.04

DESCRIPTION:
 TLS Certificate management library. Provides utilities for extracting
 keys and data from certificate import files.

 Code was designed to be compatible with the OpenSSL (www.openssl.org)
 TLS implementation.

 May 2003 - Initial Revsion - TJS
 	- Proprietary formst, may change to standard (ASN.1) format later

END DESCRIPTION **********************************************************/

/*** BeginHeader */

#ifndef __SSL_CERT_LIB__
#define __SSL_CERT_LIB__

// Debugging for TLS certificate functions
#ifndef SSL_CERT_DEBUG
#define __SSL_CERT_DEBUG__ nodebug
#else
#define __SSL_CERT_DEBUG__ debug
#endif

// The size of the temporary buffer included in each certificate
// structure
#define SSL_CERT_BUF_SIZE 64

// Certificate import types
typedef enum {
	SSL_CERT_XIM,	// Certificate is #ximported
   SSL_CERT_XMEM, // Certificate is in an XMEM buffer
   SSL_CERT_RAM,  // Certificate is in a RAM buffer
   SSL_CERT_FS2,   // Certificate is in an FS2 file
   SSL_CERT_UID	// Certificate is in the User ID block
} SSL_Cert_Import_t;

// Certificate structure
typedef struct {
	SSL_Cert_Import_t  cert_type; // The type of import
   union {
		long 	ximport_addr; // Address for ximport
   	char* ram_addr;	  // RAM address
      long  phys_addr;	  // Physical address
      int   file_num;	  // FS2 file descriptor
   } addr;
   long mod_offs;		// Offset into file of modulus
   long pkey_offs;   // Offset of private exponent
   long exp_offs;    // Offset of public exponent
   long cert_offs;   // Offset of certificate
   int key_size;     // Size of modulus/private key
   int exp_size;     // Public exponent size
   int cert_size;    // Certificate size
   char temp_buf[SSL_CERT_BUF_SIZE]; // Temporary root buffer
} SSL_Cert_t;

/*** EndHeader */

/*** BeginHeader SSL_new_cert */
int SSL_new_cert(SSL_Cert_t* cert, long addr, SSL_Cert_Import_t import_type);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
SSL_new_cert                           <SSL_CERT.LIB>

SYNTAX: int SSL_new_cert(SSL_Cert_t* cert, long addr,
                         SSL_Cert_Import_t import_type);

DESCRIPTION: Create a new certificate for use with SSL/TLS from a
Dynamic C certificate import file. Thie function populates the certificate
structure (PARAMETER 1) with information used by the extract functions
(also in SSL_CERT.LIB). The import file may be any of the following
types: ximport, RAM buffer, FS2 file, or User ID block buffer.

PARAMETER 1: Certificate data structure to be populated
PARAMETER 2: The address or file number of the input file
PARAMETER 3: The type of input file

RETURN VALUE: 0 on success, non-zero on failure

END DESCRIPTION **********************************************************/

__SSL_CERT_DEBUG__
int SSL_new_cert(SSL_Cert_t* cert, long addr, SSL_Cert_Import_t import_type) {
	auto int key_len, exp_len, cert_len;
   auto long offset;
#ifdef __FS2_LIB
   auto File f;
#endif

	// Check for NULL
	if(cert == NULL || addr == 0)
   {
    	return 1;
   }

   offset = 0; // Start with 0
 	cert->cert_type = import_type;

   // Load certificate from an xmem location
   if(SSL_CERT_XIM == import_type ||
   	SSL_CERT_XMEM == import_type) {
    	// Certificate is ximported
      cert->addr.ximport_addr = addr;

	   // Load key length
      if(SSL_CERT_XIM == import_type) {
	      offset = sizeof(long); // Skip ximport length field
      }
		xmem2root(&key_len, addr + offset, sizeof(int));
      cert->key_size = key_len;
      offset += sizeof(int);

      // Modulus offset
   	cert->mod_offs = offset;

      // Private key offset
      offset += key_len;
      cert->pkey_offs = offset;

	   // Load exponent length
      offset += key_len;
		xmem2root(&exp_len, addr + offset, sizeof(int));
      cert->exp_size = exp_len;
		offset += sizeof(int);

      // Exponent offset
      cert->exp_offs = offset;

      // Load certificate length
      offset += exp_len;
		xmem2root(&cert_len, addr + offset, sizeof(int));
      cert->cert_size = cert_len;
		offset += sizeof(int);

      // Certificate offset
      cert->cert_offs = offset;
   }
#ifdef __FS2_LIB
   else if(SSL_CERT_FS2 == import_type) {
   	// The certificate is in a filesystem file
      cert->addr.file_num = (int)addr;

   	// Open the certificate file for reading
   	if(fopen_rd(&f, cert->addr.file_num))
      {
       	// Error opening file
         return 1;
      }

		if(!fread(&f, &key_len, sizeof(int)))
		{
      	// Error in reading
       	fclose(&f);
         return 1;
      }
      cert->key_size = key_len;
      offset += sizeof(int);

      // Modulus offset
   	cert->mod_offs = offset;

      // Private key offset
      offset += key_len;
      cert->pkey_offs = offset;

	   // Load exponent length
      offset += key_len;
      fseek(&f, offset, SEEK_SET);
		if(!fread(&f, &exp_len, sizeof(int)))
		{
      	// Error in reading
       	fclose(&f);
         return 1;
      }

      cert->exp_size = exp_len;
		offset += sizeof(int);

      // Exponent offset
      cert->exp_offs = offset;

      // Load certificate length
      offset += exp_len;
      fseek(&f, offset, SEEK_SET);
		if(!fread(&f, &cert_len, sizeof(int)))
		{
      	// Error in reading
       	fclose(&f);
         return 1;
      }
      cert->cert_size = cert_len;
		offset += sizeof(int);

      // Certificate offset
      cert->cert_offs = offset;

      fclose(&f);
   }
#endif
   else {
   	// Currently unsupported or unknown import type
      return 1;
   }

   // Success!
   return 0;
}

/*** BeginHeader SSL_extract_cert */
int SSL_extract_cert(SSL_Cert_t* cert, long cert_buf);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
SSL_extract_cert							   <SSL_CERT.LIB>

SYNTAX: int SSL_extract_cert(SSL_Cert_t* cert, long cert_buf);

DESCRIPTION: Extract a certificate from a Dynamic C certificate
import file. Inputs are the certificate file and a return buffer.

PARAMETER 1: Certificate file, initialized prior to call
PARAMETER 2: Return buffer xmem address, will contain the certificate

RETURN VALUE: 0 on success, non-zero on failure

END DESCRIPTION **********************************************************/

__SSL_CERT_DEBUG__
int SSL_extract_cert(SSL_Cert_t* cert, long cert_buf) {
	auto long cert_addr, offset;
   auto int i, frag_len;
   auto char *p;
#ifdef __FS2_LIB
   auto File f;
#endif

	// Check for NULL pointers
   if(cert == NULL || cert_buf == 0)
   {
    	return 1;
   }

   // The certificate is #ximported
   if(SSL_CERT_XIM == cert->cert_type) {
	   cert_addr = cert->addr.ximport_addr;

	   // Load exponent
 		xmem2xmem(cert_buf, cert_addr + cert->cert_offs, cert->cert_size);
	}
#ifdef __FS2_LIB
   else if(SSL_CERT_FS2 == cert->cert_type) {
   	// Open the file
     	if(fopen_rd(&f, cert->addr.file_num))
      {
      	// Error opening file
      	return 1;
      }

      // Seek to the beginning of the certificate
      fseek(&f, cert->cert_offs, SEEK_SET);

      // Use temporary buffer for reading into xmem buffer from file
		p = cert->temp_buf;
     	frag_len = SSL_CERT_BUF_SIZE; // frag_len is the size of the temp buffer
      for(i = 0; i < cert->cert_size; i += SSL_CERT_BUF_SIZE) {
      	if(i + SSL_CERT_BUF_SIZE > cert->cert_size) {
         	// Last chunk, adjust fragment length
          	frag_len = cert->cert_size - i;
         }
	      // Read the certificate into the buffer
   	   if(!fread(&f, p, frag_len))
	      {
	         // Error in reading
	         fclose(&f);
	         return 1;
	      }

	   	// Load exponent from buffer into return buffer
	 		root2xmem(cert_buf + (long)i, p, frag_len);
      }
      fclose(&f);
   }
#endif
   else {
   	// Unsupported mode, return error
    	return 1;
   }

   // Success!
   return 0;
}

/*** BeginHeader _ssl_cert_fread */
int _ssl_cert_fread(SSL_Cert_t* cert, char* buf, int len, long offs);
/*** EndHeader */

// Helper function for certificate file parsing
// Reads information from an offset in the certificate file
// (in cert parameter) into a buffer.
// This function is only called if the FS2 filesystem is included
// Parameter 1: Pointer to certificate structure
// Parameter 2: Pointer to buffer
// Parameter 3: Length of data to read
// Parameter 4: The offset into the certificate file
// Return value: 0 on success, non-zero on failure (file problem)
__SSL_CERT_DEBUG__
int _ssl_cert_fread(SSL_Cert_t* cert, char* buf, int len, long offs)
{
   auto File f;

   _ssl_assert(cert != NULL);
	_ssl_assert(buf != NULL);
	_ssl_assert(len != 0);

   // Open the file
   if(fopen_rd(&f, cert->addr.file_num))
   {
      // error in file open
      return 1;
   }

   // Seek to the beginning of the certificate and read modulus
   fseek(&f, offs, SEEK_SET);
   if(!fread(&f, buf, len))
   {
      // Error in reading
      fclose(&f);
      return 1;
   }

   fclose(&f);
   return 0; // Success
}

/*** BeginHeader SSL_extract_rsa_mod */
int SSL_extract_rsa_mod(SSL_Cert_t*, char*);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
SSL_extract_rsa_mod							<SSL_CERT.LIB>

SYNTAX: int SSL_extract_rsa_mod(SSL_Cert_t* cert, char* mod);

DESCRIPTION: Extract an RSA modulus from a Dynamic C certificate import
file. Inputs are the certificate file and a return buffer.

PARAMETER 1: Certificate file, initialized prior to call
PARAMETER 2: Return buffer, will contain the key

RETURN VALUE: 0 on success, non-zero on failure

END DESCRIPTION **********************************************************/

__SSL_CERT_DEBUG__
int SSL_extract_rsa_mod(SSL_Cert_t* cert, char* mod) {
	auto long cert_addr;

	// NULL checks
	if(cert == NULL || mod == NULL)
   {
    	return 1;
   }

   // The certificate is #ximported
   if(SSL_CERT_XIM == cert->cert_type) {
	   cert_addr = cert->addr.ximport_addr;

   	// Load modulus
 		xmem2root(mod, cert_addr + cert->mod_offs, cert->key_size);
	}
#ifdef __FS2_LIB
   else if(SSL_CERT_FS2 == cert->cert_type) {
      // Read into the modulus buffer
		if(_ssl_cert_fread(cert, mod, cert->key_size, cert->mod_offs))
      {
       	return 1;
      }
   }
#endif
   else {
   	// Unsupported mode, return error
    	return 1;
   }

   // Success!
   return 0;
}

/*** BeginHeader SSL_extract_rsa_pkey */
int SSL_extract_rsa_pkey(SSL_Cert_t*, char*);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
SSL_extract_rsa_pkey							<SSL_CERT.LIB>

SYNTAX: int SSL_extract_rsa_pkey(SSL_Cert_t* cert, char* pkey);

DESCRIPTION: Extract an RSA private exponent from a Dynamic C certificate
import file. Inputs are the certificate file and a return buffer.

PARAMETER 1: Certificate file, initialized prior to call
PARAMETER 2: Return buffer, will contain the key

RETURN VALUE: 0 on success, non-zero on failure

END DESCRIPTION **********************************************************/

__SSL_CERT_DEBUG__
int SSL_extract_rsa_pkey(SSL_Cert_t* cert, char* pkey) {
	auto long cert_addr;

	// NULL pointer checks
	if(cert == NULL || pkey == NULL)
   {
    	return 1;
   }

   // The certificate is #ximported
   if(SSL_CERT_XIM == cert->cert_type) {
	   cert_addr = cert->addr.ximport_addr;

   	// Load private key
 		xmem2root(pkey, cert_addr + cert->pkey_offs, cert->key_size);
	}
#ifdef __FS2_LIB
   else if(SSL_CERT_FS2 == cert->cert_type) {
      // Read into the modulus buffer
		if(_ssl_cert_fread(cert, pkey, cert->key_size, cert->pkey_offs))
      {
       	return 1;
      }
   }
#endif
   else {
   	// Unsupported mode, return error
    	return 1;
   }

   // Success!
   return 0;
}


/*** BeginHeader SSL_extract_rsa_exp */
int SSL_extract_rsa_exp(SSL_Cert_t*, char*);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
SSL_extract_rsa_exp							<SSL_CERT.LIB>

SYNTAX: int SSL_extract_rsa_exp(SSL_Cert_t* cert, char* pkey);

DESCRIPTION: Extract an RSA public exponent from a Dynamic C certificate
import file. Inputs are the certificate file and a return buffer.

PARAMETER 1: Certificate file, initialized prior to call
PARAMETER 2: Return buffer, will contain the key

RETURN VALUE: 0 on success, non-zero on failure

END DESCRIPTION **********************************************************/

__SSL_CERT_DEBUG__
int SSL_extract_rsa_exp(SSL_Cert_t* cert, char* exp) {
	auto long cert_addr;

	// NULL pointer check
   if(cert == NULL || exp == NULL)
   {
    	return 1;
   }

   // The certificate is #ximported
   if(SSL_CERT_XIM == cert->cert_type) {
	   cert_addr = cert->addr.ximport_addr;

	   // Load exponent
 		xmem2root(exp, cert_addr + cert->exp_offs, cert->exp_size);
	}
#ifdef __FS2_LIB
   else if(SSL_CERT_FS2 == cert->cert_type) {
      // Read into the modulus buffer
		if(_ssl_cert_fread(cert, exp, cert->exp_size, cert->exp_offs))
      {
       	return 1;
      }
   }
#endif
   else {
   	// Unsupported mode, return error
    	return 1;
   }

   // Success!
   return 0;
}

/*** BeginHeader */
#endif
/*** EndHeader */