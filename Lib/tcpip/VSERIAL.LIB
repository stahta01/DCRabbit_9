/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __VSERIAL_LIB
#define __VSERIAL_LIB

#ifdef VSERIAL_DEBUG
	#define _vserial_nodebug
#else
	#define _vserial_nodebug nodebug
#endif
/*** EndHeader */

/*** BeginHeader telnet_init */
/*
 * The telnet-cooker, to cook off the telnet control codes
 * from a telnet client, and negotiate any necessary
 * options.
 */
typedef struct {
	int	state;
#define TELNET_COOKER_NORMAL		0
#define TELNET_COOKER_IAC			1
#define TELNET_COOKER_DO			2
#define TELNET_COOKER_DONT			3
#define TELNET_COOKER_WILL			4
#define TELNET_COOKER_WONT			5
#define TELNET_COOKER_CR			6

	tcp_Socket	*s;

	/* telnet state flags */
	char	suppress_ga;
	char	local_echo;

	/* other internal FSM flags */
	char	send_nl;
	int	user_options;
} _TelnetCooker;

/* special telnet characters/commands */
#define TELNET_IAC		255		// "Is A Command"
#define TELNET_DONT		254		// "Don't do this"
#define TELNET_DO			253		// "Do this"
#define TELNET_WONT		252		// "I won't do this"
#define TELNET_WILL		251		// "I will do this"
#define TELNET_SB			250		// "Sub-negotiation follows"
#define TELNET_GA			249		// "Go-Ahead"
#define TELNET_EL			248		// "Erase Line"
#define TELNET_EC			247		// "Erase Character"
#define TELNET_AYT		246		// "Are You There"
#define TELNET_AO			245		// "Abort Output"
#define TELNET_IP			244		// "Suspend/Interrupt"
#define TELNET_BRK		243		// "Break/Attention"
#define TELNET_DM			242		// "Data Mark"
#define TELNET_NOP		241		// "NOOP"
#define TELNET_SE			240		// "End of Sub-negotiation"

/* do/will commands */
#define TELNET_ECHO			1		// "local echo on"
#define TELNET_SUPPRESS_GA	3		// "suppress usage of GA"

int telnet_init(_TelnetCooker *state, tcp_Socket *s, int options);
#define TELNET_OPTION_GA    0x01  // disable GA messages
#define TELNET_OPTION_ECHO  0x02  // turn off local (client) echo

/* not really public, but necessary for other internal functions below... */
int telnet_send_command(_TelnetCooker *state, char command, char option);
/*** EndHeader */

_vserial_nodebug
int telnet_send_command(_TelnetCooker *state, char command, char option)
{
	auto char buf[3];
	buf[0] = 255;
	buf[1] = command;
	buf[2] = option;
	return sock_fastwrite(state->s,buf,3);
}

#define TELNET_COOKER_STORECHAR	*(dp++) = c; actual_len += 1;
_vserial_nodebug
int telnet_init(_TelnetCooker *state, tcp_Socket *s, int options)
{
	/* assume the next character is a normal character, untill we know otherwise */
	state->state = TELNET_COOKER_NORMAL;

	/* point at the socket to be used */
	state->s = s;

	/* initial configuration */
	state->suppress_ga = 0;	// default to using GA
	state->local_echo = 0;		// default to remote (client) echo
	state->send_nl = 0;		// no new-line is pending

	/* remember the user's options */
	state->user_options = options;

	/* send the initial ECHO request? */
	if(TELNET_OPTION_ECHO & state->user_options) {
		telnet_send_command(state,TELNET_WILL,TELNET_ECHO);
	}
}

/*** BeginHeader telnet_fastread */
int telnet_fastread(_TelnetCooker *state, byte *dp, int len);
/*** EndHeader */
_vserial_nodebug
int telnet_fastread(_TelnetCooker *state, byte *dp, int len)
{
	auto int actual_len;
	auto int rv;
	auto char c;

	/* only if they actually requested data */
	if(len < 1)
		return 0;

	/* is there enough room in the TX buffer to transmit our reply? */
	if(sock_tbleft(state->s) < 3)
		return 0;

	actual_len = 0; // havn't read any data yet
	while((len-actual_len) > 0) {
		// was a new-line queued to be sent?
		if(state->send_nl) {
			/* it was - store it! */
			state->send_nl = 0;
			c = '\n';
			TELNET_COOKER_STORECHAR;
			continue;
		}

		// get a character from the socket
		switch(sock_fastread(state->s,&c,1)) {
		case 1:
			// received a character properly - enter the FSM
			break;

		case 0:
			// no more data for now
			goto telnet_cooker_alldone;

		case -1:
		default:
			// socket error! propogate the error back to the user
			return -1;
		}

		// the main FSM to cook the data, each pass through processes one character
		switch(state->state) {
		case TELNET_COOKER_NORMAL:
			// is this a character we are interested in?
			switch(c) {
			case TELNET_IAC:
				// a command was received
				state->state = TELNET_COOKER_IAC;
				break;

			case '\r':
				// a CR char was received - if the next char is null, we will mod it
				// pass the CR through to the user as well
				TELNET_COOKER_STORECHAR;
				state->send_nl = 1;	// queue the new-line to be sent as the next character
				state->state = TELNET_COOKER_CR;
				break;

			default:
				// this is a normal character - just store it
				TELNET_COOKER_STORECHAR;
			}
			break;

		case TELNET_COOKER_IAC:
			// received the IAC character - the next character is a command
			switch(c) {
			case TELNET_NOP:
				// do nothing
				state->state = TELNET_COOKER_NORMAL;
				break;
			case TELNET_DO:
				// this is a request for us to do something
				state->state = TELNET_COOKER_DO;
				break;
			case TELNET_DONT:
				// this is a request for us to _NOT_ do something
				state->state = TELNET_COOKER_DONT;
				break;
			case TELNET_WILL:
				// a notification that the other side will do something
				state->state = TELNET_COOKER_WILL;
				break;
			case TELNET_WONT:
				// a notification that the other side will _NOT_ do something
				state->state = TELNET_COOKER_WONT;
				break;
			default:
				// unknown command
				break;
			}
			break;

		case TELNET_COOKER_DO:
			// what commands can we be told to turn on?
			switch(c) {
			case TELNET_ECHO:
				// we will turn on local echo
				state->local_echo = 1;
				break;
			case TELNET_SUPPRESS_GA:
				// we will suppress the use of the GA command
				if(TELNET_OPTION_GA & state->user_options) {
					telnet_send_command(state,TELNET_WILL,TELNET_SUPPRESS_GA);
					state->suppress_ga = 1;	// mark that we are doing this
				} else {
					telnet_send_command(state,TELNET_WONT,TELNET_SUPPRESS_GA);
				}
				break;
			default:
				// we don't support that option
				telnet_send_command(state,TELNET_WONT,c);
			}
			state->state = TELNET_COOKER_NORMAL;
			goto telnet_cooker_alldone;

		case TELNET_COOKER_DONT:
			switch(c) {
			case TELNET_ECHO:
				state->local_echo = 0;
				break;
			case TELNET_SUPPRESS_GA:
				// force our option to be off
				state->suppress_ga = 0;
				break;
			default:
				// no special processing for unknown DONTs
				break;
			}
			telnet_send_command(state,TELNET_WONT,c);
			state->state = TELNET_COOKER_NORMAL;
			goto telnet_cooker_alldone;

		case TELNET_COOKER_WILL:
			switch(c) {
			case TELNET_ECHO:
				// we will turn on local echo
				state->local_echo = 1;
				break;
			case TELNET_SUPPRESS_GA:
				// we will suppress the use of the GA command
				if(TELNET_OPTION_GA & state->user_options) {
					telnet_send_command(state,TELNET_DO,TELNET_SUPPRESS_GA);
					state->suppress_ga = 1;	// mark that we are doing this
				} else {
					telnet_send_command(state,TELNET_DONT,TELNET_SUPPRESS_GA);
				}
				break;
			default:
				// we don't support that option
				telnet_send_command(state,TELNET_DONT,c);
			}
			state->state = TELNET_COOKER_NORMAL;
			goto telnet_cooker_alldone;

		case TELNET_COOKER_WONT:
			switch(c) {
			case TELNET_ECHO:
				// force our local echo off
				state->local_echo = 0;
				break;
			case TELNET_SUPPRESS_GA:
				// force our option to be off
				state->suppress_ga = 0;
				break;
			default:
				// no special processing for unknown WONTs
				break;
			}
			telnet_send_command(state,TELNET_DONT,c);
			state->state = TELNET_COOKER_NORMAL;
			goto telnet_cooker_alldone;

		case TELNET_COOKER_CR:
			// got the CR... is this a null or a NL?
			if(('\0' == c) || ('\n' == c)) {
				// it was - just drop this character
			} else {
				// it was a normal character - store it like normal
				TELNET_COOKER_STORECHAR;
			}
			state->state = TELNET_COOKER_NORMAL;
			break;

		default:
			// this should never happen!
			state->state = TELNET_COOKER_NORMAL;
			return -1;
		}
	}

telnet_cooker_alldone:
	return actual_len; // return the actuall ammount read into their buffer
}

/*** BeginHeader telnet_fastwrite */
int telnet_fastwrite(_TelnetCooker *state, byte *dp, int len);
/*** EndHeader */
_vserial_nodebug
int telnet_fastwrite(_TelnetCooker *state, byte *dp, int len)
{
	return sock_fastwrite(state->s,dp,len);
}

/*** BeginHeader telnet_rdUsed */
int telnet_rdUsed(_TelnetCooker *state);
/*** EndHeader */
_vserial_nodebug
int telnet_rdUsed(_TelnetCooker *state)
{
	if(sock_rbused(state->s) > 0) {
		return 1;
	} else {
		return 0;
	}
}

/*** BeginHeader telnet_wrUsed */
int telnet_wrUsed(_TelnetCooker *state);
/*** EndHeader */
_vserial_nodebug
int telnet_wrUsed(_TelnetCooker *state)
{
	return sock_tbused(state->s);
}

/*** BeginHeader telnet_wrFree */
int telnet_wrFree(_TelnetCooker *state);
/*** EndHeader */
_vserial_nodebug
int telnet_wrFree(_TelnetCooker *state)
{
	return sock_tbleft(state->s);
}

/*** BeginHeader vserial_init */

/* Set this to turn on debug messages */
//#define VSERIAL_DEBUG

/*
 * The public spec entry
 */
typedef struct {
	int id;					// unique ID to match w/ calls to listen/open
	int (*open)();			// serial port routines, or
	int (*close)();		// serial port compatable routines.
	int (*tick)();
	int (*rdUsed)();
	int (*wrFree)();
	int (*read)();
	int (*write)();
} VSerialSpec;

/* public macros to ease use */
#define VSERIAL_PORTA(id) { (id), serAopen, serAclose, NULL, serArdUsed, serAwrFree, serAread, serAwrite }
#define VSERIAL_PORTB(id) { (id), serBopen, serBclose, NULL, serBrdUsed, serBwrFree, serBread, serBwrite }
#define VSERIAL_PORTC(id) { (id), serCopen, serCclose, NULL, serCrdUsed, serCwrFree, serCread, serCwrite }
#define VSERIAL_PORTD(id) { (id), serDopen, serDclose, NULL, serDrdUsed, serDwrFree, serDread, serDwrite }
#define VSERIAL_PORTE(id) { (id), serEopen, serEclose, NULL, serErdUsed, serEwrFree, serEread, serEwrite }
#define VSERIAL_PORTF(id) { (id), serFopen, serFclose, NULL, serFrdUsed, serFwrFree, serFread, serFwrite }

/* FLAGS */
#define VSERIAL_COOKED		0x0001
/* internal flags - the user should not specify these, as they are set in the open/listen function */
#define VSERIAL_OPEN			0x0002
#define VSERIAL_LISTEN		0x0004

int vserial_init(void);
/* START FUNCTION DESCRIPTION ********************************************
vserial_init                   		<VSERIAL.LIB>

SYNTAX: int vserial_init(void);

KEYWORDS:		tcpip, serial, telnet

DESCRIPTION: 	Initilize the serial->telnet daemon

RETURN VALUE: 	0 on success, 1 on failure.

SEE ALSO: 	vserial_tick, vserial_open, vserial_listen,
				vserial_close, vserial_keepalive

END DESCRIPTION **********************************************************/

/*
 * Internal storage
 */
typedef struct {
	VSerialSpec *spec;
	int state;
	long keepalive;	// timeout for tcp keepalives
	long retry;			// retry time in seconds
	tcp_Socket sock;	// the actuall tcp socket
	tcp_Socket *s;		// pointer to the socket
	long baud;			// serial port baud rate
	int port;			// local/remote tcp port
	long remote_host;	// remote host to connect to
	int flags;			// our config flags
	long timeout;		// general purpose timeout storage
	int code_bytes_needed;  // state info for cooking the input
	char response, command; // storage for use when cooking the input
	_TelnetCooker	cooker;	// cooker structure, to parse out the telnet codes
	_TelnetCooker	*c;		// pointer to the cooker
} _VSerialState;

/* our states for the internal FSM */
#define VSERIAL_INIT				0
#define VSERIAL_NOTHING			1
#define VSERIAL_CONNECT			2
#define VSERIAL_RETRY			3
#define VSERIAL_WAITRETRY		4
#define VSERIAL_WAITESTABLISH	5
#define VSERIAL_STEADY			6
#define VSERIAL_RESET			7

/*** EndHeader */

_VSerialState _VSerialStateList[VSERIAL_NUM_GATEWAYS];

_vserial_nodebug
int vserial_init(void)
{
	auto int i;

	/* init all state machines */
	for(i=0;i<VSERIAL_NUM_GATEWAYS;i++) {
		_VSerialStateList[i].spec = &(VSerialSpecTable[i]);
		_VSerialStateList[i].state = VSERIAL_NOTHING;
		_VSerialStateList[i].keepalive = 0; // default to keepalives off
		_VSerialStateList[i].s = &(_VSerialStateList[i].sock);
		_VSerialStateList[i].c = &(_VSerialStateList[i].cooker);
	}

	return 0;
}

/*** BeginHeader vserial_tick */

int vserial_tick(void);
/* START FUNCTION DESCRIPTION ********************************************
vserial_tick                   		<VSERIAL.LIB>

SYNTAX: int vserial_tick(void);

KEYWORDS:		tcpip, serial, telnet

DESCRIPTION: 	Run the telnet daemon - must be called periodicly.

RETURN VALUE: 	0 on success, 1 on error. Call it periodicly no
					matter the return value, though! An error message can
					be seen when 1 is returned if you #define VSERIAL_DEBUG
					at the top of your program.

SEE ALSO: 	vserial_init, vserial_open, vserial_listen,
				vserial_close, vserial_keepalive

END DESCRIPTION **********************************************************/

/*** EndHeader */

extern _VSerialState _VSerialStateList[VSERIAL_NUM_GATEWAYS];

/* telnet command codes */
#define __DO	253
#define __DONT	254
#define __WILL	251
#define __WONT	252

/* a tempbuf for use in moving the data between the serial port and the network */
char _vserial_tempbuf[16];

_vserial_nodebug
void _vserial_SerialToNet(_VSerialState *state)
{
	auto int len, retval;

	/* while() data is on the serial port... */
	while((len = state->spec->rdUsed()) > 0) {
		if(state->flags & VSERIAL_COOKED) {
			if(len > telnet_wrFree(state->c))
				len = telnet_wrFree(state->c); // not enough space in tx buffer for all received data
		} else {
			if(len > sock_tbleft(state->s))
				len = sock_tbleft(state->s); // not enough space in tx buffer for all received data
		}

		if(len < 1) // no data to process
			return;

		if(len > 16)
			len = 16; // our block size

		/* read from the serial port */
		len = state->spec->read(_vserial_tempbuf,len,0);

		/* write it out to the network */
		if(state->flags & VSERIAL_COOKED) {
			retval = telnet_fastwrite(state->c, _vserial_tempbuf, len);
		} else {
			retval = sock_fastwrite(state->s, _vserial_tempbuf, len);
		}
		if((-1 == retval) || (retval != len)) {
			/* error */
			state->state = VSERIAL_RESET;
			return;
		}
	}
}

_vserial_nodebug
void _vserial_NetToSerial(_VSerialState *state)
{
	auto int len, retval, offset, length;
	auto char c;

	if(state->flags & VSERIAL_COOKED) {
		/* cook the data! */

		/* init our length to how much space we have free */
		length = state->spec->wrFree();

		while(length > 0) {
			retval = telnet_fastread(state->c, &c, 1);
			if(retval == 0)
				return; /* all done */
			if(retval == -1) {
				/* error */
				state->state = VSERIAL_RESET;
				return;
			}
			/* write it out to the serial port */
			retval = state->spec->write(&c, 1);
			if(retval != 1) {
				/* error - couldn't write the proper ammount of data */
				state->state = VSERIAL_RESET;
				return;
			}
			length -= 1;
		}
	} else {
		/* just run a raw data port */

		/* while() data is on the serial port... */
		while((len = sock_rbused(state->s)) > 0) {
			if(len > state->spec->wrFree())
				len = state->spec->wrFree(); // not enough space in tx buffer for all received data

			if(len < 1) // no data to process
				return;

			if(len > 16)
				len = 16; // our block size

			/* read from the serial port */
			retval = sock_fastread(state->s, _vserial_tempbuf, len);
			if((-1 == retval) || (retval != len)) {
				/* error - we should have received more data */
				state->state = VSERIAL_RESET;
				return;
			}

			/* write it out to the serial port */
			retval = state->spec->write(_vserial_tempbuf, len);
			if(retval != len) {
				/* error - couldn't write the proper ammount of data */
				state->state = VSERIAL_RESET;
				return;
			}
		}
	}
}

_vserial_nodebug
int _vserial_handler(_VSerialState *state)
{
	static char tempbuf[16];
	switch(state->state) {
	case VSERIAL_INIT:
		/* this state is not used */
		state->state = VSERIAL_NOTHING;
		break;

	case VSERIAL_NOTHING:
		/* waiting for an open/listen command */
		break;

	case VSERIAL_CONNECT:
		if(state->flags & VSERIAL_LISTEN) {
			if(1 != tcp_listen(&(state->sock), state->port, state->remote_host, 0, NULL, 0)) {
				/* error in tcp_listen */
				/* shouldn't ever get here - buffer allocation error or somesuch */
#ifdef VSERIAL_DEBUG
				printf("VSERIAL> Error in tcp_listen - did you allocate enough socket buffers?\n");
#endif
				state->state = VSERIAL_INIT;
				return 1;
			} else {
				state->state = VSERIAL_WAITESTABLISH;
			}

		} else if(state->flags & VSERIAL_OPEN) {
			if(0 == tcp_open(&(state->sock), 0, state->remote_host, state->port, NULL)) {
				/* error - couldn't resolve remote hardware address */
#ifdef VSERIAL_DEBUG
				printf("VSERIAL> Couldn't open a connection to: %s:%d\n",inet_ntoa(tempbuf,state->remote_host),state->port);
#endif
				state->state = VSERIAL_RETRY;
				return 1;
			} else {
				state->state = VSERIAL_WAITESTABLISH;
			}

		} else {
			/* shouldn't ever get here */
			/* error - no flags were set! reset and return error */
#ifdef VSERIAL_DEBUG
			printf("VSERIAL> Error in connect - flags were not set!\n");
#endif
			state->state = VSERIAL_INIT;
			return 1;
		}
		break;

	case VSERIAL_RETRY:
		if(state->flags & VSERIAL_OPEN) {
			state->timeout = state->retry + SEC_TIMER;
			state->state = VSERIAL_WAITRETRY;
		} else {
			state->state = VSERIAL_CONNECT;
		}
		break;

	case VSERIAL_WAITRETRY:
		if(SEC_TIMER > state->timeout) {
			/* retry timer has expired */
			state->state = VSERIAL_CONNECT;
		}
		break;

	case VSERIAL_WAITESTABLISH:
		if(sock_established(state->s)) {
			/* we are connected */

			/* turn on TCP keepalives, if necessary */
			if(state->keepalive)
				tcp_keepalive((tcp_Socket *)state->s, state->keepalive);

			if(state->flags & VSERIAL_COOKED) {
				/* turn on the telnet-cooker */
				telnet_init(state->c, state->s, TELNET_OPTION_GA|TELNET_OPTION_ECHO);
			}

			state->code_bytes_needed = 0; // reset mini-FSM in the data cooker
			state->state = VSERIAL_STEADY;
		} else if(-1 != sock_bytesready(state->s)) {
			/* data is there, but the socket closed allready - we will just try and reconnect */
			/* after a timeout, though */
			state->state = VSERIAL_RETRY;
		}
		break;

	case VSERIAL_STEADY:
		/* run it! this is the main state where we actually swap the data back and forth */
      if (tcp_tick((tcp_Socket *)state->s) == 0) {
      	state->state = VSERIAL_RESET;
         break;
      }
		_vserial_SerialToNet(state);
		_vserial_NetToSerial(state);
		break;

	case VSERIAL_RESET:
		/* reset everything, then retry */
		//printf("Resetting connection!\n");
		sock_close(state->s);
		state->state = VSERIAL_RETRY;
		break;

	default:
		/* error - shouldn't ever get here */
		state->state = VSERIAL_INIT;
	}

	return 0;
}

_vserial_nodebug
int vserial_tick(void)
{
	auto int i, retval;

	tcp_tick(NULL); // run the network!

	retval = 0;
	for(i=0; i<VSERIAL_NUM_GATEWAYS; i++) {
		retval |= _vserial_handler(&(_VSerialStateList[i]));
	}
}

/*** BeginHeader vserial_open */

int vserial_open(int id, long baud, int port, long remote_host, int flags, long retry);
/* START FUNCTION DESCRIPTION ********************************************
vserial_open                   		<VSERIAL.LIB>

SYNTAX: int vserial_open(int id, long baud, int port, long remote_host, int flags, long retry);

KEYWORDS:		tcpip, serial, telnet

DESCRIPTION: 	Open a connection to a remote host, and maintain it,
					starting the gateway process.

PARAMETER1:		ID of the gateway to change, as specified in the spec table.
PARAMETER2:		The parameter that will be sent to the open() serial port
					command; usually the baud rate.
PARAMETER3:		The TCP port on the remote host to connect to.
PARAMETER4:		The remote host to connect to.
PARAMETER5:		Option flags about this gateway. Currently only VSERIAL_COOKED
					to strip out telnet control codes, or 0 to leave it a raw
					data link.
PARAMETER6:		The retry timeout, in seconds. When a connection fails, or if
					the connection was refused, we will wait this number of seconds
					befor retrying.

RETURN VALUE: 	0 on success, 1 on failure.

SEE ALSO: 	vserial_init, vserial_tick, vserial_listen,
				vserial_close, vserial_keepalive

END DESCRIPTION **********************************************************/

/*** EndHeader */

extern _VSerialState _VSerialStateList[VSERIAL_NUM_GATEWAYS];

_vserial_nodebug
int vserial_open(int id, long baud, int port, long remote_host, int flags, long retry)
{
	auto int i;
	auto _VSerialState *state;

	for(i=0;i<VSERIAL_NUM_GATEWAYS;i++) {
		state = &(_VSerialStateList[i]);
		if(state->spec->id == id) {
			if((VSERIAL_NOTHING != state->state) && (VSERIAL_INIT != state->state)) {
				/* no in a waiting state! error out */
#ifdef VSERIAL_DEBUG
				printf("VSERIAL> Error - call vserial_close() first!\n");
#endif
				return 1;
			}

			if(NULL != state->spec->open)
				state->spec->open(baud);

			/* store our options */
			state->baud = baud;
			state->port = port;
			state->remote_host = remote_host;
			state->flags = flags | VSERIAL_OPEN;
			state->retry = retry;

			state->state = VSERIAL_CONNECT;
			return 0;
		}
	}

	/* id not found */
#ifdef VSERIAL_DEBUG
	printf("VSERIAL> ID %d not found!\n",id);
#endif
	return 1;
}

/*** BeginHeader vserial_listen */

int vserial_listen(int id, long baud, int port, long remote_host, int flags);
/* START FUNCTION DESCRIPTION ********************************************
vserial_listen                   		<VSERIAL.LIB>

SYNTAX: int vserial_listen(int id, long baud, int port, long remote_host, int flags);

KEYWORDS:		tcpip, serial, telnet

DESCRIPTION: 	Listen on the specified port for a telnet connection, and
					start the gateway process when they connect. On disconnect,
					we will re-listen automaticly.

PARAMETER1:		ID of the gateway to change, as specified in the spec table.
PARAMETER2:		The parameter that will be sent to the open() serial port
					command; usually the baud rate.
PARAMETER3:		The local TCP port to listen on.
PARAMETER4:		The remote host to limit connections from, or 0 to accept
					a connection from anybody.
PARAMETER5:		Option flags about this gateway. Currently only VSERIAL_COOKED
					to strip out telnet control codes, or 0 to leave it a raw
					data link.

RETURN VALUE: 	0 on success, 1 on failure.

SEE ALSO: 	vserial_init, vserial_open, vserial_tick,
				vserial_close, vserial_keepalive

END DESCRIPTION **********************************************************/

/*** EndHeader */

extern _VSerialState _VSerialStateList[VSERIAL_NUM_GATEWAYS];

_vserial_nodebug
int vserial_listen(int id, long baud, int port, long remote_host, int flags)
{
	auto int i, retval;
	auto _VSerialState *state;

	for(i=0;i<VSERIAL_NUM_GATEWAYS;i++) {
		state = &(_VSerialStateList[i]);
		if(state->spec->id == id) {
			if((VSERIAL_NOTHING != state->state) && (VSERIAL_INIT != state->state)) {
				/* no in a waiting state! error out */
#ifdef VSERIAL_DEBUG
				printf("VSERIAL> Error - call vserial_close() first!\n");
#endif
				return 1;
			}

			if(NULL != state->spec->open)
				state->spec->open(baud);

			/* store our options */
			state->baud = baud;
			state->port = port;
			state->remote_host = remote_host;
			state->flags = flags | VSERIAL_LISTEN;

			state->state = VSERIAL_CONNECT;
			return 0;
		}
	}

	/* id not found */
#ifdef VSERIAL_DEBUG
	printf("VSERIAL> ID %d not found!\n",id);
#endif
	return 1;
}

/*** BeginHeader vserial_close */

int vserial_close(int id);
/* START FUNCTION DESCRIPTION ********************************************
vserial_close                   		<VSERIAL.LIB>

SYNTAX: int vserial_close(int id);

KEYWORDS:		tcpip, serial, telnet

DESCRIPTION: 	Close a given gateway. This will not only terminate any
					network activity, but will also close the serial port.

PARAMETER1:		ID of the gateway to change, as specified in the spec table.

RETURN VALUE: 	0 on success, 1 on failure.

SEE ALSO: 	vserial_init, vserial_open, vserial_listen,
				vserial_tick, vserial_keepalive

END DESCRIPTION **********************************************************/

/*** EndHeader */

extern _VSerialState _VSerialStateList[VSERIAL_NUM_GATEWAYS];

_vserial_nodebug
int vserial_close(int id)
{
	auto int i;

	for(i=0;i<VSERIAL_NUM_GATEWAYS;i++) {
		if(_VSerialStateList[i].spec->id == id) {
			/* close the socket */
			sock_close(&(_VSerialStateList[i].sock));

			/* close the serial port */
			if(NULL != _VSerialStateList[i].spec->close)
				_VSerialStateList[i].spec->close();

			_VSerialStateList[i].state = VSERIAL_NOTHING;

			return 0;
		}
	}

	/* id not found */
#ifdef VSERIAL_DEBUG
	printf("VSERIAL> ID %d not found!\n",id);
#endif
	return 1;
}

/*** BeginHeader vserial_keepalive */

int vserial_keepalive(int id, long timeout);
/* START FUNCTION DESCRIPTION ********************************************
vserial_keepalive                   		<VSERIAL.LIB>

SYNTAX: int vserial_keepalive(int id, long timeout);

KEYWORDS:		tcpip, serial, telnet

DESCRIPTION: 	Set the keepalive timer. This will generate TCP keepalives
					after "timeout" periods of inactivity, to help detect if
					the connection has gone bad.

PARAMETER1:		ID of the gateway to change, as specified in the spec table.
PARAMETER2:		Timeout before sending a TCP keepalive, in seconds, or 0 to
					shut off TCP keepalives.

RETURN VALUE: 	0 on success, 1 on failure.

SEE ALSO: 	vserial_init, vserial_open, vserial_listen,
				vserial_close, vserial_tick

END DESCRIPTION **********************************************************/

/*** EndHeader */

extern _VSerialState _VSerialStateList[VSERIAL_NUM_GATEWAYS];

_vserial_nodebug
int vserial_keepalive(int id, long timeout)
{
	auto int i;

	for(i=0;i<VSERIAL_NUM_GATEWAYS;i++) {
		if(_VSerialStateList[i].spec->id == id) {
			_VSerialStateList[i].keepalive = timeout;
			return 0;
		}
	}

	/* id not found */
#ifdef VSERIAL_DEBUG
	printf("VSERIAL> ID %d not found!\n",id);
#endif
	return 1;
}

/*** BeginHeader */
#endif /*__VSERIAL_LIB*/
/*** EndHeader */