/*
 *    FTP_CLIENT.lib
 *    Copyright (C) Z-World, Inc. All rights reserved.
 * 	A File Transfer Protocol (FTP) client subroutines.
 *
 * 	Defines:
 * 		FTP_VERBOSE - Adds some diagnostic and progress printf() output.
 *
 * 		FTP_MAX_NAMELEN - Max string size for username and password.
 * 		FTP_MAX_FNLEN - Max string size for file name.
 * 		FTP_MAX_DIRLEN - Max string size for directory name.
 *
 */

/*** BeginHeader ftp */
#ifndef FTP_CLIENT_H
#define FTP_CLIENT_H

#ifdef FTP_DEBUG
	#define _ftpc_nodebug debug
#else
	#define _ftpc_nodebug nodebug
#endif

#ifndef FTP_MAX_NAMELEN
	#define FTP_MAX_NAMELEN	16
#endif

#ifndef FTP_MAX_FNLEN
	#define FTP_MAX_FNLEN	16
#endif

#ifndef FTP_MAX_DIRLEN
	#define FTP_MAX_DIRLEN	64
#endif

#ifndef FTP_MAXLINE
	#define FTP_MAXLINE	256
#endif

#ifndef FTP_TIMEOUT
	#define FTP_TIMEOUT	16
#endif

#define FTP_MODE_UPLOAD		0x0000
#define FTP_MODE_DOWNLOAD	0x0001
#define FTP_MODE_PASSIVE	0x0100
#define FTP_MODE_GETLIST	0x0200


typedef struct {
	/* Network stuff */
	tcp_Socket		sock;
	tcp_Socket *	s;
	tcp_Socket		dtp_sock;
	tcp_Socket *	dtp_s;
	word 				dtpport;

	/* General info */
	char 				username[FTP_MAX_NAMELEN];
	char				nt1;
	char 				password[FTP_MAX_NAMELEN];
	char				nt2;
	int 				mode;
	char 				filename[FTP_MAX_FNLEN];
	char				nt3;
	char 				dir[FTP_MAX_DIRLEN];
	char				nt4;
	char *			buffer;
	longword			length;
	longword			offset;

	/* State machine vars */
	word			state;	// Queue of up to 2 states
#define FTP_SETSTATE(s) (ftp.state = (s))
#define FTP_SETSTATE2(s1, s2) (ftp.state = (s1) | (s2)<<8)
#define FTP_NEXTSTATE (ftp.state >>= 8)
#define FTP_STATE ((int)(ftp.state & 0xFF))
	//int 				nextstate;
	//int 				next2state;
	longword			timeout;

	/* readln stuff */
	char 				line[FTP_MAXLINE];
	char *			pline;
	int 				readln_is_ready;
	int				code1;		// 1st digit of server messages (0-9) - stored in binary, not char
	int				code;			// All digits (0-999)

	/* msg send stuff */
	int 				msglen;
	int				msgcomplete;
	char *			message;

	// Data handler stuff
	int 				(*dhnd)();
	void *			dhnd_data;
	int				dhnd_rc;		// Final return code

} FtpInfo;

extern FtpInfo ftp;

/* States */
#define FTP_CONNECTWAIT	0
#define FTP_GETLINE		1
#define FTP_MSGWAIT		2
#define FTP_BAIL			3
#define FTP_USERNAME		4
#define FTP_PASSWORD		5
#define FTP_SETMODE		6
#define FTP_SETDIR		7
#define FTP_SETDIR2		8
#define FTP_SETPORT		9
#define FTP_CMD			10
#define FTP_UPLOAD		11
#define FTP_DOWNLOAD		12
#define FTP_DOWNLOADING	13
#define FTP_DONE			14
#define FTP_DONE2			15
#define FTP_DONE3			16
#define FTP_PASV			17

/*** EndHeader */

FtpInfo ftp;


/*****************************************************************
 * The readln interface:                                         *
 *                                                               *
 * ftpc_readln_init() must be called first, to start the process.*
 * ftpc_readln_tick() should be called to drive readln.          *
 * ftpc_readln()	will return the line itself (char *)           *
 *****************************************************************/

/*** BeginHeader ftpc_readln_init */
void ftpc_readln_init(void);
/*** EndHeader */

_ftpc_nodebug
void ftpc_readln_init(void)
{
	ftp.readln_is_ready = 0;

	ftp.pline = ftp.line;
}

/*** BeginHeader ftpc_readln_tick */
void ftpc_readln_tick(void);
/*** EndHeader */

_ftpc_nodebug
void ftpc_readln_tick(void)
{
	static int retval;
	static char buf[3];

	if(ftp.readln_is_ready)
		return;		/* old line hasn't been used yet */

  	tcp_tick(NULL);

	while(1) {
		retval = sock_fastread(ftp.s, buf, 1);
		if (retval < 0)
			// Command socket expired: reset state.
			FTP_SETSTATE(FTP_BAIL);
		if(retval < 1)
			return;	/* no data; wait till next tick */

		/* strip off all telnet control codes */
		if (buf[0] == 255) {
			retval = sock_fastread(ftp.s, buf, 2);
			if(2 == retval) {
				switch (buf[0]) {
				// The fastwrites look strange, but we must respond to some telnet codes.
				case 251:
				case 252:
				   buf[2] = buf[1];
				   *(word *)buf = 0xFEFF;
					sock_fastwrite(ftp.s, buf, 3);
					continue;
				case 253:
				case 254:
					buf[2] = buf[1];
				   *(word *)buf = 0xFCFF;
					sock_fastwrite(ftp.s, buf, 3);
					continue;
				case 255:
					break;
				default:
					continue;   /* ignore command */
				}
			}
		}

		/* data byte is good; add it to the list */
		*ftp.pline = buf[0];
		ftp.pline++;
		if (buf[0] == '\n')
			break;
	}

	/* clean it up */

	/* strip off EOLN */
	ftp.pline--;
	*ftp.pline = '\0';
	ftp.pline--;
	*ftp.pline = '\0';

#ifdef FTP_VERBOSE
	printf("FTPC: got '%s'\n",ftp.line);
#endif
	ftp.readln_is_ready = 1;

	/* if it is a multi-line message, reset and get another */
	if(ftp.line[3] == '-')
		ftpc_readln_init();

	/* Else parse the 3 initial digits into ints to avoid string tests */
	ftp.code1 = ftp.line[0] - '0';
	ftp.code = ftp.code1*100 + (ftp.line[1] - '0')*10 + (ftp.line[2] - '0');
}


/*** BeginHeader ftpc_readln */
char *ftpc_readln(void);
/*** EndHeader */

_ftpc_nodebug
char *ftpc_readln(void)
{
	ftpc_readln_init();	/* reset readln */

	return ftp.line;
}

/* End of readln interface */
/******************************************************/

/*** Message send stuff. ***/
/*
 * Send a message over the command socket to the FTP client
 */
/*** BeginHeader ftpc_msg */
void ftpc_msg(char *str, int nextstate);
/*** EndHeader */

_ftpc_nodebug
void ftpc_msg(char *str, int nextstate)
{
	ftp.message = str;
	ftp.msglen = strlen(ftp.message);
	ftp.msgcomplete = sock_fastwrite(ftp.s, ftp.message, ftp.msglen);
#ifdef FTP_VERBOSE
	printf("FTPC: sending %s", ftp.message);
#endif
	if (ftp.msgcomplete < 0) {
		FTP_SETSTATE(FTP_BAIL);
		return;
	}
	if (ftp.msgcomplete < ftp.msglen) {
		FTP_SETSTATE2(FTP_MSGWAIT, nextstate);
		return;
	}
	sock_flush(ftp.s);
	FTP_SETSTATE2(FTP_GETLINE, nextstate);
}

/*** BeginHeader ftpc_finish_msg */
void ftpc_finish_msg(void);
/*** EndHeader */

/* finish sending the message, if sock_fastwrite didn't finish the first time */
_ftpc_nodebug
void ftpc_finish_msg(void)
{
	auto int rc;
	rc = sock_fastwrite(ftp.s, ftp.message + ftp.msgcomplete,
							  ftp.msglen - ftp.msgcomplete);
	if (rc < 0) {
		FTP_SETSTATE(FTP_BAIL);
		return;
	}
	ftp.msgcomplete += rc;
	if(ftp.msgcomplete < ftp.msglen)
		return;
	// Trick here to avoid 3-length queue.  Set current state to GETLINE without
	// disturbing the queued next state.
	ftp.state &= 0xFF00;
	ftp.state |= FTP_GETLINE;
	sock_flush(ftp.s);
}


/*** BeginHeader ftp_client_setup */
/* START FUNCTION DESCRIPTION ********************************************
ftp_client_setup                   <FTP_CLIENT.LIB>

SYNTAX:	int ftp_client_setup(
				long host, int port, char *username,
				char *password, int mode, char *filename,
				char *dir, char *buffer, int length
				);

KEYWORDS:		tcpip, ftp

DESCRIPTION:	Sets up a FTP transfer. It is called first, then
               ftp_client_tick is called until it returns non-zero.
               Failure can occur if the host address is zero, if the
               length is negative, or if the internal control socket
               to the FTP server cannot be opened (e.g. because of
               lack of socket buffers).

PARAMETER1:	   Host IP address of FTP server
PARAMETER2:	   Port of FTP server, 0 for default
PARAMETER3:	   Username of account on FTP server
PARAMETER4:	   Password of account on FTP server
PARAMETER5:	   Mode of transfer: FTP_MODE_UPLOAD or FTP_MODE_DOWNLOAD.
               You may also OR in the value FTP_MODE_PASSIVE to use
               passive mode transfer (important if you are behind a
               firewall).

               Use FTP_MODE_GETLIST if you just want to retrieve the file
               information given by "LIST filename." If FTP_MODE_GETLIST is
               used with a NULL filename the, the results of "LIST" are
               given. These results may just be a list of file names, or
               they may contain more information with each file - this is
               server-dependent.
PARAMETER6:	   Filename to get/put
PARAMETER7:	   Directory file is in, NULL for default directory
PARAMETER8:	   Buffer to get/put the file to/from.  Must be NULL if
               a data handler function will be used.  See ftp_data_handler
               for more details.
PARAMETER9:	   On upload, length of file; on download size of buffer.
               This parameter limits the transfer size to a maximum of
               32767 bytes.  For larger transfers, it will be necessary
               to use a data handler function.

RETURN VALUE:	0 on success, 1 on failure

SEE ALSO:      ftp_client_tick, ftp_data_handler

END DESCRIPTION **********************************************************/
int ftp_client_setup(
	long host,	/* remote host */
	int port,	/* main port on remote host, 0 == default */
	char *username,	/* login info */
	char *password,
	int mode,	/* mode of FTP (see #defines above) */
	char *filename,	/* file to get */
	char *dir,	/* directory (NULL == default dir) */
	char *buffer,	/* pointer to file, or area to store dl'd file */
	int length	/* length of file, of size of storage area */
	);
/*** EndHeader */

_ftpc_nodebug
int ftp_client_setup(long host, int port, char *username,
	char *password, int mode, char *filename,
	char *dir, char *buffer, int length)
{
	/* default the port to the normal FTP port */
	if(0 == port)
		port = 21;
	if (!host) {
#ifdef FTP_VERBOSE
		printf("FTPC: no host address.\n");
#endif
		return 1;
	}
	if (length < 0) {
#ifdef FTP_VERBOSE
		printf("FTPC: invalid length %d.\n", length);
#endif
		return 1;
	}

	/* init the readln interface */
	ftpc_readln_init();

	/* Init all data */
	strncpy(ftp.username,username,sizeof(ftp.username));
	ftp.nt1 = ftp.nt2 = ftp.nt3 = ftp.nt4 = 0;	// Null terminators
	strncpy(ftp.password,password,sizeof(ftp.password));
	ftp.mode = mode;
	strncpy(ftp.filename,filename,sizeof(ftp.filename));
	if(dir == NULL)
		ftp.dir[0] = '\0';
	else
		strncpy(ftp.dir,dir,sizeof(ftp.dir));

	ftp.buffer = buffer;
	ftp.length = length;
	ftp.offset = 0;

	FTP_SETSTATE(FTP_CONNECTWAIT);

	/* Start connection to remote host */
	ftp.s = &ftp.sock;
	ftp.dtp_s = &ftp.dtp_sock;
	if (!tcp_open(&ftp.sock, 0, host, port, NULL)) {
#ifdef FTP_VERBOSE
		printf("FTPC: cannot talk to %08lX\n", host);
		sock_perror(&ftp.sock, NULL);
#endif
		return 1;
	}
   sock_set_tos(&ftp.sock, IPTOS_FAST);
   ftp.code = 0;
	return 0;
}

/*** BeginHeader ftp_data_handler */
/* START FUNCTION DESCRIPTION ********************************************
ftp_data_handler                   <FTP_CLIENT.LIB>

SYNTAX:	void ftp_data_handler(int (*dhnd)(), void * dhnd_data, word opts)

KEYWORDS:		tcpip, ftp

DESCRIPTION:	Sets a data handler for further FTP data transfer(s).
               This handler is only used if the "buffer" parameter to
               ftp_client_setup() is passed as NULL.

               The handler is a function which must be coded according
               the the following prototype:

                 int my_handler(char * data, int len, longword offset,
                                int flags, void * dhnd_data);

               This function is called with "data" pointing to a data
               buffer, and "len" containing the length of that buffer.
               "offset" is the byte number relative to the first byte
               of the entire FTP stream.  This is useful for data
               handler functions which do not wish to keep track of the
               current state of the data source.
               "dhnd_data" is the pointer that was passed to
               ftp_data_handler().

               "flags" contains an indicator of the current operation:
                 FTPDH_IN : data is to be stored on this host (obtained
                   from an FTP download).
                 FTPDH_OUT : data is to be filled with the next data
                   to upload to the FTP server.
                 FTPDH_END : data and len are irrelevant: this marks
                   the end of data, and gives the function an
                   opportunity to e.g. close the file.  Called after
                   either in or out processing.
                 FTPDH_ABORT : end of data; error encountered during
                   FTP operation.  Similar to END except the transfer
                   did not complete.  Can use this to e.g. delete a
                   partially written file.

               The return value from this function depends on the in/out
               flag.  For FTPDH_IN, the function should return 'len'
               if the data was processed successfully and download should
               continue; -1 if an error has occurred and the transfer
               should be aborted.  For FTPDH_OUT, the function should
               return the actual number of bytes placed in the data
               buffer, or -1 to abort.  If 0 is returned, then the
               upload is terminated normally.  For FTPDH_END, the
               return code should be 0 for success or -1 for error.  If
               an error is flagged, then this is used as the return code
               for ftp_client_tick().  For FTPDH_ABORT, the return code
               is ignored.

PARAMETER1:	   Pointer to data handler function, or NULL to remove
               the current data handler.
PARAMETER2:    A pointer which is passed to the data handler function.
               This may be used to point to any further data required by
               the data handler such as an open file descriptor.
PARAMETER3:    Options word (currently reserved, set to zero).

SEE ALSO:      ftp_client_setup

END DESCRIPTION **********************************************************/

#define FTPDH_IN		1
#define FTPDH_OUT 	2
#define FTPDH_END 	3
#define FTPDH_ABORT	4

void ftp_data_handler(int (*dhnd)(), void * dhnd_data, word opts);
/*** EndHeader */

_ftpc_nodebug
void ftp_data_handler(int (*dhnd)(), void * dhnd_data, word opts)
{
	ftp.dhnd = dhnd;
	ftp.dhnd_data = dhnd_data;
}


/*** BeginHeader ftpc_dtp_open */
void ftpc_dtp_open(void);
/*** EndHeader */

_ftpc_nodebug
void ftpc_dtp_open(void)
{
	if (!(ftp.mode & FTP_MODE_PASSIVE)) {
		ftp.dtpport = findfreeport(0, 1);
		if (!tcp_listen(&ftp.dtp_sock, ftp.dtpport, 0, 0, NULL, 0)) {
#ifdef FTP_VERBOSE
			printf("FTPC: cannot listen on data transfer port\n");
			sock_perror(&ftp.dtp_sock, NULL);
#endif
			FTP_SETSTATE(FTP_BAIL);
			return;
		}
	   sock_set_tos(&ftp.dtp_sock, IPTOS_CAPACIOUS);
   }
	FTP_SETSTATE(FTP_SETPORT);
}


/*** BeginHeader ftp_client_tick */
/* START FUNCTION DESCRIPTION ********************************************
ftp_client_tick                   <FTP_CLIENT.LIB>

SYNTAX:	int ftp_client_tick(void);

KEYWORDS:		tcpip, ftp

DESCRIPTION:	Tick function to run the ftp. Must be called periodically.
               The return codes are not very specific.  You can call
               ftp_last_code() to get the integer
               value of the last FTP message received from the server.
               See RFC959 for details.  For example, code 530 means that
               the client was not logged in to the server.

RETURN VALUE:	FTPC_AGAIN (0): still pending, call again
               FTPC_OK (1): success
               FTPC_ERROR (2): failure (call ftp_last_code() for more
                 details).
               FTPC_NOHOST (3): failure (Couldn't connect to server)
               FTPC_NOBUF (4): failure (no buffer or data handler)
               FTPC_TIMEOUT (5): warning (Timed out on close: data may or
                 may not be OK)
               FTPC_DHERROR (6): error (Data handler error in FTPDH_END
                 operation)
               FTPC_CANCELLED (7): FTP control socket was aborted (reset)
                 by the server.

SEE ALSO:      ftp_client_setup, ftp_client_filesize, ftp_client_xfer,
               ftp_last_code

END DESCRIPTION **********************************************************/
int ftp_client_tick(void);

#define FTPC_AGAIN			0
#define FTPC_OK				1
#define FTPC_ERROR			2
#define FTPC_NOHOST			3
#define FTPC_NOBUF			4
#define FTPC_TIMEOUT			5
#define FTPC_DHERROR			6
#define FTPC_CANCELLED		7

/*** EndHeader */

_ftpc_nodebug
int ftp_client_tick(void)
{
	static int i, nd, rc;
	static longword hisip;
	static word hisport;
	static char *p, *buf;
	auto char ip_buffer[16];
	auto int temp;

	if (!tcp_tick(ftp.s) && FTP_STATE != FTP_DONE3 &&
   FTP_STATE != FTP_DONE2) {
#ifdef FTP_VERBOSE
		printf("FTPC: control connection reset by peer.\n");
		sock_perror(ftp.s, NULL);
#endif
		ftp.code = FTPC_CANCELLED;
		goto _ftp_client_bail;
	}

	switch(FTP_STATE) {
	case FTP_CONNECTWAIT:
		if (!ftp.buffer && !ftp.dhnd) {
#ifdef FTP_VERBOSE
			printf("FTPC: buffer and data handler both NULL.\n");
#endif
			ftp.code = FTPC_NOBUF;
			goto _ftp_client_bail;
		}
		if (sock_established(ftp.s))
			FTP_SETSTATE2(FTP_GETLINE, FTP_USERNAME);
		else if (sock_error(ftp.s, 0)) {
#ifdef FTP_VERBOSE
			printf("FTPC: cannot connect to server.\n");
			sock_perror(ftp.s, NULL);
#endif
			ftp.code = FTPC_NOHOST;
			goto _ftp_client_bail;
		}
		break;

	case FTP_GETLINE:
		ftpc_readln_tick();
		if(ftp.readln_is_ready) {
			ftpc_readln();
			FTP_NEXTSTATE;
		}
		break;

	case FTP_MSGWAIT:
		ftpc_finish_msg();
		break;

	case FTP_USERNAME:
		// Could get a 120 (service available in the future) but treat as error.
		if (ftp.code != 220)
			goto _ftp_client_bail;

		sprintf(ftp.line, "USER %s\r\n", ftp.username);
		ftpc_msg(ftp.line, FTP_PASSWORD);
		break;

	case FTP_PASSWORD:
		if (ftp.code == 230) {
			// That's nice, don't need password
			FTP_SETSTATE(FTP_SETMODE);
			break;
		}
		if (ftp.code != 331)
			// Go directly to jail.  Do not pass GO.  Do not collect $200...
			goto _ftp_client_bail;

		sprintf(ftp.line, "PASS %s\r\n", ftp.password);
		ftpc_msg(ftp.line, FTP_SETMODE);
		break;

	case FTP_SETMODE:
		if (ftp.code != 230)
			goto _ftp_client_bail;

		ftpc_msg("TYPE I\r\n", FTP_SETDIR);
		break;

	case FTP_SETDIR:
		if (ftp.code != 200)
			goto _ftp_client_bail;

		if (!ftp.dir[0])
			ftpc_dtp_open();
		else {
			sprintf(ftp.line, "CWD %s\r\n", ftp.dir);
			ftpc_msg(ftp.line, FTP_SETDIR2);
		}
		break;

	case FTP_SETDIR2:
		if (ftp.code != 250)
			goto _ftp_client_bail;
		ftpc_dtp_open();
		break;

	case FTP_SETPORT:
		if (ftp.mode & FTP_MODE_PASSIVE) {
			ftpc_msg("PASV\r\n", FTP_PASV);
			break;
		}
		memcpy(ftp.line, "PORT ", 5);
		strcpy(ftp.line+5, inet_ntoa(ip_buffer, my_ip_addr));
		temp = strlen(ftp.line);
		// Convert dots to commas
		for (i=5; i<temp; i++) {
			if (ftp.line[i] == '.')
				ftp.line[i] = ',';
		}
		p = ftp.line + temp;
		*p++ = ',';
		sprintf(p, "%u,%u\r\n", ftp.dtpport >> 8, ftp.dtpport & 0xFF);

		ftpc_msg(ftp.line, FTP_CMD);
		break;

	case FTP_PASV:
		if (ftp.code != 227)
			goto _ftp_client_bail;
		// Parse out his IP address and port for DTP socket.  Expect 6 groups of
		// decimal digits separated by non-digits (should be commas).
		p = ftp.line + 4;	// Skip '227 '.
		while (*p && !isdigit(*p)) p++;
		hisip = 0;
		hisport = 0;
		for (nd = 0; nd < 6; nd++) {
			i = 0;
			while (isdigit(*p) && i < 256) {
				i = i*10 + (*p - '0');
				p++;
			}
			while (*p && !isdigit(*p)) p++;
			if (i > 255)
				goto _ftp_client_bail;
			if (nd < 4)
				hisip = (hisip << 8) + i;
			else
				hisport = (hisport << 8) + i;
		}
#ifdef FTP_VERBOSE
		printf("FTPC: opening to [%08lX]:%u\n", hisip, hisport);
#endif
		if (!tcp_open(ftp.dtp_s, 0, hisip, hisport, NULL)) {
#ifdef FTP_VERBOSE
			printf("FTPC: cannot open data transfer port.\n");
			sock_perror(ftp.dtp_s, NULL);
#endif
			goto _ftp_client_bail;
		}
		sock_set_tos(ftp.dtp_s, IPTOS_CAPACIOUS);
		FTP_SETSTATE(FTP_CMD);
		ftp.code = 200;	// Make ignore following test
		// fall through
	case FTP_CMD:
		if (ftp.code != 200)
			goto _ftp_client_bail;

		switch (ftp.mode & ~FTP_MODE_PASSIVE) {
		case FTP_MODE_UPLOAD:
			sprintf(ftp.line, "STOR %s\r\n", ftp.filename);
			ftpc_msg(ftp.line, FTP_UPLOAD);
			break;

		case FTP_MODE_DOWNLOAD:
			sprintf(ftp.line, "RETR %s\r\n", ftp.filename);
			ftpc_msg(ftp.line, FTP_DOWNLOAD);
			break;

		case FTP_MODE_GETLIST:
         sprintf(ftp.line, "LIST %s\r\n", ftp.filename);
			ftpc_msg(ftp.line, FTP_DOWNLOAD);
			break;

		default:
			goto _ftp_client_bail;
		}
		break;

	case FTP_UPLOAD:
		if (ftp.code != 150 && ftp.code != 125)
			goto _ftp_client_bail;

		if (!sock_alive(ftp.dtp_s)) {
		_ftp_dtp_was_aborted:
#ifdef FTP_VERBOSE
			printf("FTPC: data transfer port reset by peer.\n");
			sock_perror(ftp.dtp_s, NULL);
#endif
			goto _ftp_client_bail;
		}
		if (!sock_established(ftp.dtp_s))
			break;
		else {
			if (!ftp.buffer) {
				rc = sock_tbleft(ftp.dtp_s);
				if (!rc)
					break;
				if (rc > sizeof(ftp.line))
					rc = sizeof(ftp.line);
				rc = ftp.dhnd(ftp.line, rc, ftp.offset, FTPDH_OUT, ftp.dhnd_data);
				if (rc < 0)
					goto _ftp_client_bail;
				if (rc > 0)
					// Guaranteed to work completely since checked tbleft above.
					ftp.offset += sock_fastwrite(ftp.dtp_s, ftp.line, rc);
			}
			else {
				ftp.offset += sock_fastwrite(ftp.dtp_s, ftp.buffer + (word)ftp.offset,
									(word)ftp.length - (word)ftp.offset);
				rc = ftp.offset < ftp.length;
			}
			if (!rc) {
				/* all done */
				FTP_SETSTATE2(FTP_GETLINE, FTP_DONE);
				sock_close(ftp.dtp_s);
			}
		}
		break;

	case FTP_DOWNLOAD:
		if (ftp.code != 150 && ftp.code != 125)
			goto _ftp_client_bail;

		if (!sock_alive(ftp.dtp_s))
			goto _ftp_dtp_was_aborted;
		if (!sock_established(ftp.dtp_s))
			break;
		FTP_SETSTATE(FTP_DOWNLOADING);
		// Fall thru
	case FTP_DOWNLOADING:
		//This mod for RabbitSys is not quite the same test.  sock_established()
		//returns true if tcp_StateCLOSWT is set, while the old test counted
		//this as a "closed/closing" equivalent.
		if ( sock_bytesready(ftp.dtp_s) <= 0 && !sock_established(ftp.dtp_s) )
//			ftp.dtp_s->state & (tcp_StateCLOSWT|tcp_StateCLOSING|
//	      tcp_StateLASTACK|tcp_StateTIMEWT|tcp_StateCLOSED) )
			goto _ftp_client_rx_finished;
		if (!ftp.buffer) {
			rc = sizeof(ftp.line);
			rc = sock_fastread(ftp.dtp_s, ftp.line, rc);
			if (rc) {
				rc = ftp.dhnd(ftp.line, rc, ftp.offset, FTPDH_IN, ftp.dhnd_data);
				if (rc < 0)
					goto _ftp_client_bail;
				ftp.offset += rc;
			}
		}
		else {
			rc = (int)(ftp.length - ftp.offset);
			if (rc) {
				rc = sock_fastread(ftp.dtp_s, ftp.buffer + (word)ftp.offset, rc);
				// Cannot be -ve since checked above for errors.
				ftp.offset += rc;
			}
			else
				// Discard data past end of buffer
				sock_fastread(ftp.dtp_s, NULL, 32767);
		}
		break;

	_ftp_client_rx_finished:
#ifdef FTP_VERBOSE
		printf("FTPC: Received %lu byte file.\n", ftp.offset);
#endif
		FTP_SETSTATE2(FTP_GETLINE, FTP_DONE);
		break;

	case FTP_DONE:
		if (!ftp.buffer)
			ftp.dhnd_rc = ftp.dhnd(ftp.line, 0, ftp.offset, FTPDH_END, ftp.dhnd_data);
		else
			ftp.dhnd_rc = 0;
		ftpc_msg("QUIT\r\n", FTP_DONE2);
//    "REIN" works better when downloading two files on a non-Rabbit server
//    because the QUIT causes the server to close the connection
		break;

	case FTP_DONE2:
#ifdef FTP_VERBOSE
		printf("FTPC: Closing...\n");
#endif
		ftp.timeout = _SET_TIMEOUT(FTP_TIMEOUT * 1000L);

		if (sock_alive(ftp.s)) {
#ifdef FTP_VERBOSE
			printf("FTPC: Closing main socket.\n");
#endif
			sock_close(ftp.s);
		}
		if (sock_alive(ftp.dtp_s)) {
#ifdef FTP_VERBOSE
			printf("FTPC: Closing dtp socket.\n");
#endif
			sock_close(ftp.dtp_s);
		}
		FTP_SETSTATE(FTP_DONE3);
		// fall thru

	case FTP_DONE3:
		// Discard any remaining data in socket(s)
		if (sock_readable(ftp.s))
			sock_fastread(ftp.s, NULL, 1000);
		if (sock_readable(ftp.dtp_s))
			sock_fastread(ftp.dtp_s, NULL, 1000);
		if (chk_timeout(ftp.timeout)) {
#ifdef FTP_VERBOSE
			printf("FTPC: timeout on close\n");
#endif
			sock_abort(ftp.s);
			sock_abort(ftp.dtp_s);
			return FTPC_TIMEOUT;
		}
		if( !sock_alive(ftp.s) && !sock_alive(ftp.dtp_s) ) {
#ifdef FTP_VERBOSE
			printf("FTPC: done\n");
#endif
			if (ftp.dhnd_rc < 0)
				return FTPC_DHERROR;
			return FTPC_OK;
		}
		break;

	_ftp_client_bail:
		FTP_SETSTATE(FTP_BAIL);
		// fall thru
	case FTP_BAIL:
#ifdef FTP_VERBOSE
		printf("FTPC: bailing out\n");
#endif
		if (!ftp.buffer && ftp.dhnd)
			ftp.dhnd(ftp.line, 0, ftp.offset, FTPDH_ABORT, ftp.dhnd_data);
		sock_abort(ftp.s);
		sock_abort(ftp.dtp_s);
		if (ftp.code > 0 && ftp.code < 100)
			return ftp.code;
		return FTPC_ERROR;
	}
	return FTPC_AGAIN;
}

/*** BeginHeader ftp_client_filesize */
/* START FUNCTION DESCRIPTION ********************************************
ftp_client_filesize                   <FTP_CLIENT.LIB>

SYNTAX: int ftp_client_filesize(void);

KEYWORDS:		tcpip, ftp

DESCRIPTION:	Returns the byte count of data transferred.  This function
               is deprecated in favor of ftp_client_xfer(), which
               returns a long value.

               If the number of bytes transferred was over 32767, then
               this function returns 32767 which may be misleading.

RETURN VALUE:	size, in bytes

SEE ALSO:	   ftp_client_setup, ftp_data_handler, ftp_client_xfer

END DESCRIPTION **********************************************************/
int ftp_client_filesize(void);
/*** EndHeader */

_ftpc_nodebug
int ftp_client_filesize(void)
{
	if (ftp.offset > 32767)
		return 32767;
	else
		return (int)ftp.offset;
}


/*** BeginHeader ftp_client_xfer */
/* START FUNCTION DESCRIPTION ********************************************
ftp_client_xfer                   <FTP_CLIENT.LIB>

SYNTAX: longword ftp_client_xfer(void);

KEYWORDS:		tcpip, ftp

DESCRIPTION:	Returns the byte count of data transferred.  Transfers of
               over 2**32 bytes (about 4GB) are not reported correctly.

RETURN VALUE:	size, in bytes

SEE ALSO:	   ftp_client_setup, ftp_data_handler, ftp_client_filesize

END DESCRIPTION **********************************************************/
longword ftp_client_xfer(void);
/*** EndHeader */

_ftpc_nodebug
longword ftp_client_xfer(void)
{
	return ftp.offset;
}


/*** BeginHeader ftp_last_code */
/* START FUNCTION DESCRIPTION ********************************************
ftp_last_code                   <FTP_CLIENT.LIB>

SYNTAX: int ftp_last_code(void)

KEYWORDS:		tcpip, ftp

DESCRIPTION:	Returns the most recent message code sent by the FTP
               server.  RFC959 describes the codes in detail.  This
               function is most useful for error diagnosis in the case
               that an FTP transfer failed.

RETURN VALUE:	error code; a number between 0 and 999.  Codes less than
               100 indicate that an internal error occurred e.g.
               the server was never contacted.

SEE ALSO:	   ftp_client_setup, ftp_client_tick

END DESCRIPTION **********************************************************/
int ftp_last_code(void);
/*** EndHeader */

_ftpc_nodebug
int ftp_last_code(void)
{
	return ftp.code;
}


/*** BeginHeader */
#endif
/*** EndHeader */