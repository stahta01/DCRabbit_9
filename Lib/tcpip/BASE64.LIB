/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader ***************************************************/

#ifndef _base64_debug
	#define _base64_debug nodebug
#endif

/*** EndHeader *****************************************************/

/*
	base64.LIB

	This library provides basic base64 encoding and decoding routines.
	base64 is an encoding method for storing 8-bit binary data in readable
	7-bit ASCII text (upper and lowercase letters, digits, + and /).

	base64_decode converts from a base64-encoded string to binary data.

	base64_encode converts binary data into a base64-encoded string.
*/

/*** BeginHeader base64_char, base64_decode */
unsigned char base64_char (char c);
unsigned int base64_decode (char *dest, char *src);
/*** EndHeader */
_base64_debug
unsigned char base64_char(char c)
{
	if(c>='A'&&c<='Z')
		return c-'A';
	else if(c>='a' && c<='z')
		return c-'a'+26;
	else if(c>='0' && c<='9')
		return c-'0'+52;
	else if(c=='+')
		return 62;
	else if(c=='/')
		return 63;

	return 0;
}

/* START FUNCTION DESCRIPTION ********************************************
base64_decode                	                    <base64.LIB>

SYNTAX:       unsigned int base64_decode (char *dest, char *src)

KEYWORDS:     base64

DESCRIPTION:  Decode a base64-encoded string.

PARAMETER1:   Buffer for storing decoded binary data.  Must be at least
              (ceil (strlen (src) / 4) * 3) bytes long.

PARAMETER2:   base64-encoded string.

NOTE:         You can use the same buffer for src and dest to decode a
              base64-encoded string "in place".

RETURN VALUE: Number of bytes written to dest.

SEE ALSO:     base64_encode

END DESCRIPTION **********************************************************/
_base64_debug
unsigned int base64_decode (char *dest, char *src)
{
	unsigned int datasize;

	datasize = 0;
	while (*src) {
		*dest++ = (base64_char(src[0]) << 2) + (base64_char(src[1]) >> 4);
		if (src[2] == '=') return (datasize + 1);
		*dest++ = ((base64_char(src[1]) & 0xf) << 4) + (base64_char(src[2]) >> 2);
		if (src[3] == '=') return (datasize + 2);
		*dest++ = ((base64_char(src[2]) & 0x3) << 6) + (base64_char(src[3]));
		datasize += 3;
		src += 4;
	}
	return datasize;
}

/*** BeginHeader base64_encode */
unsigned int base64_encode (char *dest, char *src, unsigned int srclen);
/*** EndHeader */

const char _base64[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

/* START FUNCTION DESCRIPTION ********************************************
base64_encode                	                    <base64.LIB>

SYNTAX:       base64_encode (char *dest, char *src, unsigned int srclen)

KEYWORDS:     base64

DESCRIPTION:  Create a base64-encoded string.

PARAMETER1:   Buffer for storing the base64-encoded string.  This buffer
              must be at least (ceil (srclen / 3) * 4) bytes long.

PARAMETER2:   Buffer of data to encode.

PARAMETER3:   Number of bytes to encode.

RETURN VALUE: Number of bytes written to dest (strlen (dest).

SEE ALSO:     base64_decode

END DESCRIPTION **********************************************************/
_base64_debug
unsigned int base64_encode (char *dest, char *src, unsigned int srclen)
{
	char lastblock;
	char work[3];
	int i;
	unsigned int offset;
	unsigned int destlen;

	*dest = 0;
	destlen = 0;

	offset = 0;
	while (offset < srclen) {
		lastblock = 3;
		for (i = 0; i < 3; i++) {
			if (offset < srclen) {
				lastblock--;
				work[i] = src[offset++];
			} else work[i] = 0;
		}

		destlen += 4;

		*dest++ = _base64[work[0] >> 2];
		*dest++ = _base64[((work[0] << 4) | (work[1] >> 4)) & 0x3F];

		if (lastblock == 2) *dest++ = '=';
		else *dest++ = _base64[((work[1] << 2) | (work[2] >> 6)) & 0x3F];

		if (lastblock) *dest++ = '=';
		else *dest++ = _base64[work[2] & 0x3F];
	}
	*dest = 0;
	return destlen;
}

