/*** BeginHeader  ********************************************/
#ifndef __COSTATE_LIB
#define __COSTATE_LIB
/*** EndHeader ***********************************************/


/*** BeginHeader hl0 */

/*

STOPPED && INIT: task is "dead" not active
STOPPED && !INIT: task is waiting for something, but is "active"
!STOPPED && INIT: "restart" from beginning, reset the flag
!STOPPED && !INIT: use current PC field

*/

#define _CS_STOPPED 0x01
#define _CS_INIT 0x02
#define _CS_NORESET 0x04
#define _CS_INITB 1

typedef struct _CoData
{
	char CSState;            // +0
		// CSState is assumed to be
		// the first byte of the structure,
		// if moved, must change the
		// rest of the costatement support
		// code!
	unsigned lastlocADDR;    // +1
	char lastlocCBR;         // +3
	char ChkSum;             // +4
	char firsttimeflag;          //
	union
	{
		unsigned long ul;
		struct
		{
			unsigned u1;
			unsigned u2;
		} us;
	} content;
	char ChkSum2;
} CoData;

root void h10();

/*** EndHeader */

#asm fast

hl0::
		ld      a,0
		cp      l
		jr      nz,.c1
		cp      h
.c1:
		ret

#endasm

/*** BeginHeader funcblk_entry, funcblk_exit, funcblk_init,CoBegin,CoReset,
CoResume,CoPause,isCoRunning,isCoDone,funcblk_begin */

root void CoBegin( CoData *p);
root void CoReset( CoData *p);
root void CoPause( CoData *p);
root void CoResume( CoData *p);
root int isCoRunning( CoData *p);
root int isCoDone( CoData *p);
root void funcblk_entry();
root void funcblk_exit();
root void funcblk_init();
root void funcblk_begin();

/*** EndHeader */
/* START FUNCTION DESCRIPTION ********************************************
CoBegin                      <COSTATE.LIB>

SYNTAX: void CoBegin(CoData *p);

KEYWORDS: funcblk, costate

DESCRIPTION:   Initialize a costatement structure so the costatement will
be executed next time it is encountered.

PARAMETER1: address of costatement

RETURN VALUE:  None.
END DESCRIPTION **********************************************************/

/* START FUNCTION DESCRIPTION ********************************************
CoReset                      <COSTATE.LIB>

SYNTAX: void CoReset(CoData *p)

KEYWORDS: funcblk, costate

DESCRIPTION:   Initializes a costatement structure so the costatement will
not be executed next time it is encountered.

PARAMETER1: address of costatement

RETURN VALUE:  None.
END DESCRIPTION **********************************************************/

/* START FUNCTION DESCRIPTION ********************************************
CoPause                      <COSTATE.LIB>

SYNTAX: void CoPause(CoData *p)

KEYWORDS: costate

DESCRIPTION:   pause execution of a costatement so that it will not run
the next time it is encountered unless and until CoResume(p) or CoBegin(p)
are called.

PARAMETER1: address of costatement

RETURN VALUE:  None.
END DESCRIPTION **********************************************************/

/* START FUNCTION DESCRIPTION ********************************************
CoResume                      <COSTATE.LIB>

SYNTAX: void CoResume(CoData *p)

KEYWORDS: costate

DESCRIPTION:   Resume execution of a costatement that has been paused.

PARAMETER1: address of costatement

RETURN VALUE:  None.
END DESCRIPTION **********************************************************/

/* START FUNCTION DESCRIPTION ********************************************
isCoDone                      <COSTATE.LIB>

SYNTAX: int isCoDone(CoData *p)

KEYWORDS: costate

DESCRIPTION: Determine if costatement is initialized and not running

PARAMETER1: address of costatement

RETURN VALUE:  1 if costatement is initialized and not running else 0
END DESCRIPTION **********************************************************/

/* START FUNCTION DESCRIPTION ********************************************
isCoRunning                      <COSTATE.LIB>

SYNTAX: int isCoRunning(CoData *p)

KEYWORDS: costate

PARAMETER1: address of costatement

DESCRIPTION: Determine if costatement is stopped or running

RETURN VALUE:  1 if costatement is running else 0
END DESCRIPTION **********************************************************/

#asm fast

; if 16 bit address is zero function block is inactive
; if 16 bit address is zero and start flag is non zero
;  then a start is done and the start flag is cleared
; if the 16 bit address is non zero the fb is active
;  and a jump tot he 24 bit address is performed
; 53 clocks to jump around inactive function block
; 107 clocks to jump into function block
; 98 clocks to start function block
;; on entry hl = address of structure
;; returns zero flag to skip past function block if at start
;; non zero flag to enter into block
;;
funcblk_entry::
		ld    a,(hl)   ; get status flag
		and ~_CS_NORESET
		ld      (hl),a
		and   _CS_STOPPED | _CS_INIT
		jr    nz,.f050
		inc   hl
		ld    e,(hl)
		inc   hl
		ld    d,(hl)
		jr    .fblk_on  ; if function block already started
.f050:
		and   _CS_STOPPED   ; check if stopped
		jr    z,__f100
		xor   a        ;  clears a and set Z flag
		ret            ;  and return immediately
__f100:
		;  CS_INIT
		res _CS_INITB,(hl)

; now a start has been requested
		inc   hl
		pop   de       ; set the start to the return initially
		ld    (hl),e   ; put de in struct
		inc   hl
		ld    (hl),d
		ld    a,0xdf   ;  e0 - 1 because e0 should set m flag
		cp    d
		jr    nc,.fblk_noCBR
		inc   hl
		ld		a,xpc
		ld    (hl),a
.fblk_noCBR:
		xor   d        ; compute checksum
		xor   e
		inc   hl
		ld    (hl),a   ; checksum
		ex    de,hl
		or    1        ; must be no zero flag on return to start
		jp    (hl)     ; return
; jump into middle of function block
.fblk_on:
		inc   hl
		ld    b,(hl)   ; new cbr
		inc   hl
		ld    a,(hl)   ; checksum
		xor   d
		xor   e
		xor   b
		jr    nz,.fblk_error  ; if bad checksum
		pop   hl       ;toss return
		ex    de,hl
		ld    a,h
		cp    0xe0
		jr    c,.fblk_on_noCBR
		ld		a,b
		ld		xpc,a
.fblk_on_noCBR:
		or    1  ; must be nz case still at entry to fb
		jp (hl)  ; 107 clocks to exit from here
;
; error handling
.fblk_error:
		ld		hl, -EFUNCBLK
		push	hl
		call	exception
		pop	hl
		call	exit			; if return from runtime err handler, exit out!

;;body of funcblk
; enter with hl pointing to structure
funcblk_exit::
		ld    a,(hl)
		and _CS_NORESET  	    	;   flags already set by a routine, do not reset
										;   by defaults
		ret nz
		ld      a,(hl)
		and   ~(_CS_STOPPED | _CS_INIT)
		or    b
		ld    (hl),a
funcblk_begin::
		inc     hl              ;	pass start flag
		ld      b,0
		ld      (hl),b  ; clear lastloc
		inc     hl
		ld      (hl),b
		inc     hl
		ld      (hl),b  ; clear cbr
		inc     hl
		ld      (hl),b  ; check sum
;       inc     hl              ;
		ret

;; function block initialization
funcblk_init::
#if   !__SEPARATE_INST_DATA__
		pop     hl              ; non-ID space : return address = address of data
										; ID space		: hl is already pointer into constants
										; The difference is handled how we return below.
#endif
__f1:
		ld              e,(hl)
		inc     hl
		ld              d,(hl)
		inc     hl
		ld              b,(hl)
		inc     hl
		ld              a,d
		or              e
		jr              z,      __f0
		ld              a,b
		ex              de,hl
		ld              (hl),a          ; start
		inc     hl
		ld              b,0
		ld              (hl),b          ; addr
		inc     hl
		ld              (hl),b
		inc     hl
		ld              (hl),b          ; cbr
		inc     hl
		ld              (hl),b          ; chksum
		ex              de,hl
		jr              __f1
__f0:
#if __SEPARATE_INST_DATA__
		ret									  ; Return address is still on stack for ID space
#else
		jp              (hl)				  ; Or in HL if not.
#endif

;
CoBegin::         ; reset coroutine to on state
	ld    de,_CoData+CSState    ; start up at beginning
	add   hl,de
	ld      a, _CS_INIT | _CS_NORESET
	ld      (hl),a
	jp    funcblk_begin

CoReset::
	ld    de,_CoData+CSState        ; disabled, skips over
	add   hl,de
	ld      a,_CS_INIT | _CS_STOPPED | _CS_NORESET
	ld      (hl),a
	jp    funcblk_begin

CoPause::
	ld    a,(hl)
	or    _CS_STOPPED | _CS_NORESET
	ld    (hl),a
	ret
CoResume::
	ld    a,(hl)
	and   ~_CS_STOPPED | _CS_NORESET
	ld    (hl),a
	ret

isCoRunning::
	ld    a,(hl)
	and   _CS_STOPPED   ; task is paused test
	jr    z,.icr01
	xor   a
	ld    hl,0
	ret
.icr01:
	ld    hl,1
	or    l
	ret

isCoDone::
	ld    a,(hl)
	and   _CS_INIT | _CS_STOPPED        ; task exited bottom brace test
	cp      _CS_INIT | _CS_STOPPED
	jr    z,.icr01a
	xor   a
	ld    hl,0
	ret
.icr01a:
	ld    hl,1
	or    l
	ret
#endasm

/*** BeginHeader IntervalTick */
firsttime int IntervalTick(long tick);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
IntervalTick                  <COSTATE.LIB>

SYNTAX:
   int IntervalTick(long tick);

KEYWORDS:
   costatement

DESCRIPTION:
   Ticks time interval mechanism for the costatement "waitfor" construct.
   The initial call to this function starts the interval timing. This
   function is non-blocking and returns 0 (zero) until the specified ticks
   interval has ended.

   Similar to DelayTicks but provides a periodic delay based on the
   specified ticks interval. No timing creep is accumulated between
   usage instances. For example, and with one exception, IntervalTick(5L)
   returns 1 when TICK_TIMER next becomes one of 5, 10, 15, ...,
   4294967295 no matter what TICK_TIMER's value was at the time of the
   initial IntervalSec(5L) call.

   Exception:
      Note that a seconds interval which does not evenly divide 2^^32 and
      also crosses a SEC_TIMER roll-over event will end at an unusual
      SEC_TIMER value.

   1 tick = 1/1024 second.

PARAMETER1:
   The ticks interval to wait for.

RETURN VALUE:
   1 if the specified ticks interval has ended, else 0.
END DESCRIPTION *********************************************************/

extern shared unsigned long TICK_TIMER;

firsttime nodebug int IntervalTick(CoData *data, long tick)
{
	if (data->firsttimeflag)
	{
		if (tick == 0)
		{
			return 1;
		}
		data->content.ul = TICK_TIMER;
		data->content.ul += (unsigned long) tick - (data->content.ul % tick);
		data->firsttimeflag = 0;
	}
	else if ((long) (TICK_TIMER - data->content.ul) >= 0)
	{
		return 1;
	}
	return 0;
}

/*** BeginHeader IntervalMs */
firsttime int IntervalMs(long ms);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
IntervalMs                    <COSTATE.LIB>

SYNTAX:
   int IntervalMs(long ms);

KEYWORDS:
   costatement

DESCRIPTION:
   Milliseconds time interval mechanism for the costatement "waitfor"
   construct. The initial call to this function starts the interval
   timing. This function is non-blocking and returns 0 (zero) until the
   specified milliseconds interval has ended.

   Similar to DelayMs but provides a periodic delay based on the
   specified milliseconds interval. No timing creep is accumulated between
   usage instances. For example, and with one exception, IntervalMs(5L)
   returns 1 when MS_TIMER next becomes one of 5, 10, 15, ..., 4294967295
   no matter what MS_TIMER's value was at the time of the initial
   IntervalMs(5L) call.

   Exception:
      Note that a milliseconds interval which does not evenly divide 2^^32
      and also crosses a MS_TIMER roll-over event will end at an unusual
      MS_TIMER value.

PARAMETER1:
   The milliseconds interval to wait for.

RETURN VALUE:
   1 if the specified milliseconds interval has ended, else 0.
END DESCRIPTION *********************************************************/

extern shared unsigned long MS_TIMER;

firsttime nodebug int IntervalMs(CoData *data, long ms)
{
	if (data->firsttimeflag)
	{
		if (ms == 0)
		{
			return 1;
		}
		data->content.ul = MS_TIMER;
		data->content.ul += (unsigned long) ms - (data->content.ul % ms);
		data->firsttimeflag = 0;
	}
	else if ((long) (MS_TIMER - data->content.ul) >= 0)
	{
		return 1;
	}
	return 0;
}

/*** BeginHeader IntervalSec */
firsttime int IntervalSec(long sec);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
IntervalSec                   <COSTATE.LIB>

SYNTAX:
   int IntervalSec(long sec);

KEYWORDS:
   costatement

DESCRIPTION:
   Seconds time interval mechanism for the costatement "waitfor"
   construct. The initial call to this function starts the interval
   timing. This function is non-blocking and returns 0 (zero) until the
   specified seconds interval has ended.

   Similar to DelaySec but provides a periodic delay based on the
   specified seconds interval. No timing creep is accumulated between
   usage instances. For example, and with one exception, IntervalSec(5L)
   returns 1 when SEC_TIMER next becomes one of 5, 10, 15, ..., 4294967295
   no matter what SEC_TIMER's value was at the time of the initial
   IntervalSec(5L) call.

   Exception:
      Note that a seconds interval which does not evenly divide 2^^32 and
      also crosses a SEC_TIMER roll-over event will end at an unusual
      SEC_TIMER value.

PARAMETER1:
   The seconds interval to wait for.

RETURN VALUE:
   1 if the specified seconds interval has ended, else 0.
END DESCRIPTION *********************************************************/

extern shared unsigned long SEC_TIMER;

firsttime nodebug int IntervalSec(CoData *data, long sec)
{
	if (data->firsttimeflag)
	{
		if (sec == 0)
		{
			return 1;
		}
		data->content.ul = SEC_TIMER;
		data->content.ul += (unsigned long) sec - (data->content.ul % sec);
		data->firsttimeflag = 0;
	}
	else if ((long) (SEC_TIMER - data->content.ul) >= 0)
	{
		return 1;
	}
	return 0;
}

/*** BeginHeader DelayTicks */
firsttime int DelayTicks(long ticks);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
DelayTicks                    <COSTATE.LIB>

SYNTAX:
   int DelayTicks(long ticks);

KEYWORDS:
   costatement

DESCRIPTION:
   Ticks time delay mechanism for the costatement "waitfor" construct. The
   initial call to this function starts the delay timing. This function is
   non-blocking and returns 0 (zero) until the specified number of ticks
   have elapsed.

   Note that calling DelayTicks() with a varying number of ticks will
   change the delay accordingly.

   1 tick = 1/1024 second.

PARAMETER1:
   The number of ticks to wait.

RETURN VALUE:
   1 if the specified ticks delay has elapsed, else 0.
END DESCRIPTION *********************************************************/

shared extern unsigned long TICK_TIMER;

firsttime nodebug int DelayTicks(CoData *pfb, long ticks)
{
	if(pfb->firsttimeflag)
	{
		if (ticks == 0)
		{
			return 1;
		}
		pfb->content.ul = TICK_TIMER;
		pfb->firsttimeflag = 0;
	}
	else if (TICK_TIMER - pfb->content.ul >= (unsigned long) ticks)
	{
		return 1;
	}
	return 0;
}

/*** BeginHeader DelayMs */
firsttime int DelayMs(long delayms);
/*** Endheader DelayMs */

/* START FUNCTION DESCRIPTION ********************************************
DelayMs                       <COSTATE.LIB>

SYNTAX:
   int DelayMs(long delayms);

KEYWORDS:
   costatement

DESCRIPTION:
   Milliseconds time delay mechanism for the costatement "waitfor"
   construct. The initial call to this function starts the delay timing.
   This function is non-blocking and returns 0 (zero) until the specified
   number of milliseconds have elapsed.

   Note that calling DelayMs() with a varying number of milliseconds will
   change the delay accordingly.

PARAMETER1:
   The number of milliseconds to wait.

RETURN VALUE:
   1 if the specified millisecond delay has elapsed, else 0.
END DESCRIPTION *********************************************************/

extern shared unsigned long MS_TIMER;

firsttime nodebug int DelayMs(CoData * pfb, long delayms)
{
	if (pfb->firsttimeflag)
	{
		if (delayms == 0)
		{
			return 1;
		}
		pfb->content.ul = MS_TIMER;
		pfb->firsttimeflag = 0;
	}
	else if ((MS_TIMER - pfb->content.ul) >= (unsigned long) delayms)
	{
		return 1;
	}
	return 0;
}

/*** BeginHeader DelaySec */
firsttime int DelaySec(long delaysec);
/*** Endheader DelaySec */

/* START FUNCTION DESCRIPTION ********************************************
DelaySec                      <COSTATE.LIB>

SYNTAX:
   int DelaySec(long delaysec);

KEYWORDS:
   costatement

DESCRIPTION:
   Seconds time delay mechanism for the costatement "waitfor" construct.
   The initial call to this function starts the delay timing. This
   function is non-blocking and returns 0 (zero) until the specified
   number of seconds have elapsed.

   Note that calling DelaySec() with a varying number of seconds will
   change the delay accordingly.

PARAMETER1:
   The number of seconds to wait.

RETURN VALUE:
   1 if the specified seconds delay has elapsed, else 0.
END DESCRIPTION *********************************************************/

extern shared unsigned long SEC_TIMER;

firsttime nodebug int DelaySec(CoData *pfb, long delaysec)
{
	if (pfb->firsttimeflag)
	{
		if (delaysec == 0)
		{
			return 1;
		}
		pfb->content.ul = SEC_TIMER;
		pfb->firsttimeflag = 0;
	}
	else if ((SEC_TIMER - pfb->content.ul) >= (unsigned long) delaysec)
	{
		return 1;
	}
	return 0;
}

/*** Beginheader BigLoopTop */

 unsigned int BigLoopTop(void); // use for top of big loop, returns millliseconds
extern unsigned int BigLoopTime, BigLoopTimeMax;

/*** endheader */

/* START FUNCTION DESCRIPTION ********************************************
BigLoopTop                          <cofunc.lib>

SYNTAX: unsigned int BigLoopTop();

PARAMETER1: Integer for which the absolute value is to be returned.

KEYWORDS: loop

DESCRIPTION: 	calls loophead() and runwatch() at beginning of big loop.


RETURN VALUE: 	Time in milliseconds for this loop tranverse. Also maintains
global variables unsigned int BigLoopTime, BigLoopTimeMax
END DESCRIPTION **********************************************************/

unsigned int BigLoopTime, BigLoopTimeMax;

nodebug unsigned int BigLoopTop(){

	static unsigned long int starttimer;
	static int count;

   #GLOBAL_INIT{ starttimer=0L; BigLoopTimeMax=0;  count=0;}

   BigLoopTime=(unsigned int )(MS_TIMER-starttimer); // elapased time, wrap around works too
   starttimer=MS_TIMER;
   if (BigLoopTime>BigLoopTimeMax) {
     if(count) BigLoopTimeMax=BigLoopTime;  else count=1;
     }
   runwatch(); // for watch expressions
   loophead();
   return BigLoopTime;
 }

/*** BeginHeader */
#endif
/*** EndHeader */