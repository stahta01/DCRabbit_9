/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __CSUPPORT_LIB
#define __CSUPPORT_LIB
/*** EndHeader */


/*** BeginHeader lddr_func */
root void lddr_func();
/*** EndHeader */

#asm nodebug
lddr_func::
	push af

;block move
	bit 0x0, c;
	jr z, .x1;
	ldd
	jp nv, .end

.x1:
	bit 0x1, c
	jr z, .x2
	ldd
	ldd
	jp nv, .end

.x2:
	bit 0x2, c
	jr z, .x3;
	ldd
	ldd
	ldd
	ldd

.x3:
	ld a, c
	and 0xf8 ;check if upper bits of c are set
	or b	  ; or if any of b is set
	jr z, .end

.x3a:
	ldd
	ldd
	ldd
	ldd
	ldd
	ldd
	ldd
	ldd
	jp v, .x3a


.end:
	ex (sp), hl ; restore flags with V reset
	res 0x02, l
	ex (sp), hl
	pop af
	ret
#endasm

/*** BeginHeader ldir_func */
root void ldir_func();
/*** EndHeader */

#asm nodebug
ldir_func::
	push af

;block move
	bit 0x0, c;
	jr z, .x1;
	ldi
	jp nv, .end

.x1:
	bit 0x1, c
	jr z, .x2
	ldi
	ldi
	jp nv, .end

.x2:
	bit 0x2, c
	jr z, .x3;
	ldi
	ldi
	ldi
	ldi

.x3:
	ld a, c
	and 0xf8 ;check if upper bits of c are set
	or b	  ; or if any of b is set
	jr z, .end

.x3a:
	ldi
	ldi
	ldi
	ldi
	ldi
	ldi
	ldi
	ldi
	jp v, .x3a


.end:
	ex (sp), hl ; restore flags with V reset
	res 0x02, l
	ex (sp), hl
	pop af
	ret
#endasm

/*** beginHeader _fentry, _fexit */

root void _fentry();
root void _fexit();

/*** endHeader */

#asm
_fentry::
	push  hl    							; save return address
	push  af    							; save a
#if (DK_ENABLE_TRACING == 1)
	ld		a,(dkStatusFlags)
	bit	DKF_STAT_INWATCH,a
	jr		nz,.dk_fentry_do_c9

	ld		hl,(dkTraceCount)
	inc   hl
	ld		(dkTraceCount),hl
	ld		hl,dkTraceFlags
   bit	DKF_TRACE_ON,(hl)
   jr		z,.dk_fentry_0
   set	DKF_TRACE_FENTRY,(hl)
.dk_fentry_0:
#endif
	ld 	hl,dkStatusFlags       		; check if dk is currently stepping
	bit 	DKF_STAT_STEPMODE,(hl)
	jr 	z,._fent1

	ld		hl,dkStepFlags					; check if dk is stepping into functions
	bit	DKF_STEP_OVER,(hl)
	jr		z,._fent1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;   _fentry stepping over start  ;;;;;;;;;;;;;;;;;;;;;;;;;;

	ld		hl,(dkEntryCount)   			; get entry count
	inc   hl    							; increment counter
	ld		(dkEntryCount),hl
#if (DK_ENABLE_TRACING == 1)
	ld		hl,dkTraceFlags
   bit	DKF_TRACE_ON,(hl)
   jr		z,.dk_fentry_do_c9
   lcall	dkEnableRST28
   ld		a,_OP_JP
   ld		(dkRST28State),a
   jr    .dk_fentry_skip_c9
.dk_fentry_do_c9:
#endif
	lcall	dkDisableRST28
#if (DK_ENABLE_TRACING == 1)
.dk_fentry_skip_c9:
#endif

;;;;;;;;;;;;;;;;;;;;   _fentry stepping over end   ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

._fent1:
	pop   af    							; restore a
	pop   hl    							; restore return address
	ret


; _fEXIT : Signifies Function Exit
;
; INPUT  :
;          HL' = Address of Calling Label
; OUTPUT :
;          None

_fexit::
	exx         ; Address in Alternate Register
	push  hl    ; Protect Calling Address
	push  af    ; Protect A

#if (DK_ENABLE_TRACING == 1)
	ld		a,(dkStatusFlags)
	bit	DKF_STAT_INWATCH,a
	jr		nz,._fx2

	ld		hl,(dkTraceCount)
	dec   hl
	ld		(dkTraceCount),hl
	ld		hl,dkTraceFlags
   bit	DKF_TRACE_ON,(hl)
   jr		z,.dk_fexit_0
   set	DKF_TRACE_FEXIT,(hl)
   ld    hl,dkDebugTraceMsg
   lcall  dkSendTrace
	ld		hl,dkTraceFlags
   res	DKF_TRACE_RST,(hl)
   res	DKF_TRACE_FEXIT,(hl)

.dk_fexit_0:
#endif
	ld 	a,(dkStatusFlags)     		; check if dk is currently stepping
	bit 	DKF_STAT_STEPMODE,a
	jr 	z,._fx2

	ld		a,(dkStepFlags)				; check if dk is stepping into functions
	bit	DKF_STEP_OVER,a
	jr		z,._fx2

	ld 	hl,(dkEntryCount)  			; get entry count
	ld 	a,l      						; if count == 0, reenable rst28
	or 	h
	jr 	z,._fx1
	dec   hl   					 			; decrement counter
	ld 	(dkEntryCount),hl
	ld 	a,l      						; If count == 0, reenable rst28
	or 	h
	jr 	nz,._fx2
._fx1:
	lcall	dkEnableRST28
#if (DK_ENABLE_TRACING == 1)
	ld		a,(dkStatusFlags)
	bit	DKF_STAT_INWATCH,a
	jr		nz,._fx2

   ld		hl,dkTraceFlags
   bit   DKF_TRACE_ON,(hl)          ; Tracing may have been disabled during a
   jr		nz,._fx2                   ; time consuming function step over - this
   ld		hl,dkSendFlags             ; will call DBUpdateExePoint(). See
   set	DKF_SEND_STATUS,(hl)       ; TZWTraceBuf::Append(tcTraceMsg *traceMsg)
   set	DKF_SEND_TRACE,(hl)
#endif
._fx2:
	pop   af    							; restore a
	pop   hl   	 							; restore return address
	exx         							; restore primary registers
	ret
#endasm

/*** Beginheader h_s */
// h_s:  load shared integer
root void h_s();
/*** Endheader */
#asm nodebug
h_s::
	diasmseq(ddip) 			; disable interrupts
	ld 	a,(hl)
	inc   hl
	ld 	h,(hl)
	ld 	l,a
	riasmseq            		;restore interrupts
	ret
#endasm

/*** Beginheader q_ss */
// q_ss: store protected (& by implication also shared) integer
root void q_ss();
/*** Endheader */
#asm nodebug
; store hl at address pushed on stack, without damaging hl
q_ss::
	ex 	de,hl
	pop   hl            		;return address
	ex 	(sp),hl      		; put return back, get address to hl
	diasmseq(ddip)  			;disable interrupts
	ld  	(_prot16_save),de ; save backup copy
	ld  	(_ptr_prot16),hl  ; save pointer to data
	ld  	a,1
	ld  	(_flag_prot16),a  ; set flag
	ld 	(hl),e
	inc   hl
	ld 	(hl),d
	ld  	a,0
	ld  	(_flag_prot16),a  ; clear the flag
	ex 	de,hl
	riasmseq            		;restore interrupts
	ret
#endasm

/*** Beginheader q_s */
// q_s:  store shared integer
root void q_s();
/*** Endheader */
#asm nodebug
; store hl at address pushed on stack, without damaging hl
q_s::
	ex 	de,hl
	pop   hl            		; return address
	ex 	(sp),hl      		; put return back, get address to hl
	diasmseq(ddip)  			; disable interrupts
	ld 	(hl),e
	inc   hl
	ld 	(hl),d
	ex 	de,hl
	riasmseq            		; restore interrupts
	ret
; fetch hl <- (hl)
#endasm

/*** Beginheader llong_s */
root void llong_s();  //  load shared long
/*** Endheader */
#asm nodebug
; load 32 bit at hl to bc-de
; value may be embedded in code and the first byte following
; as indicated by hl may be the next instruction to execute so
; leave the last increment in place
llong_s::
	diasmseq(ddip)  			;disable interrupts
	ld 	e,(hl)
	inc   hl
	ld 	d,(hl)
	inc   hl
	ld 	c,(hl)
	inc   hl
	ld 	b,(hl)
	inc 	hl  					;for some embedded constants this points to next instruction
	riasmseq            		;restore interrupts
	ret
#endasm

/*** Beginheader st4_s, slong_s */
// load or store a long sized value, which includes float types
root void st4_s();
root void slong_s();
// make selected operators available for watch expressions
/*** Endheader */
#asm nodebug
; store 4 byte value following function call to address in hl
st4_s::
	ex 	(sp),hl
	call  llong_
	ex 	(sp),hl
; store 32 bit from bc-de to address in hl
slong_s::
	diasmseq(ddip)  			;disable interrupts
	ld 	(hl),e
	inc   hl
	ld 	(hl),d
	inc   hl
	ld 	(hl),c
	inc   hl
	ld 	(hl),b
	riasmseq            		;restore interrupts
	ret
#endasm

/*** Beginheader st4_ss, slong_ss */
// st4_ss, slong_ss: store protected (& by implication shared) long
root void st4_ss();
root void slong_ss();
// make selected operators available for watch expressions
/*** Endheader */
#asm nodebug
; store 4 byte value following function call to address in hl
st4_ss::
	ex 	(sp),hl
	call  llong_
	ex 	(sp),hl
; store 32 bit from bc-de to address in hl
slong_ss::
	diasmseq(ddip)  ;disable interrupts
	ld  	(_prot32_save),de
	ld  	(_prot32_save+2),bc ; save backup
	ld  	(_ptr_prot32),hl  ;  save pointer
	ld  	a,1
	ld  	(_flag_prot32),a  ; set flag
	ld 	(hl),e
	inc   hl
	ld 	(hl),d
	inc   hl
	ld 	(hl),c
	inc   hl
	ld 	(hl),b
	xor 	a
	ld  	(_flag_prot32),a  ; clear flag
	riasmseq            		;restore interrupts
	ret
#endasm

/*** Beginheader doldir_s */
root void doldir_s();
// load/store shared structures
/*** Endheader */

#asm nodebug
; do an ldir shared
doldir_s::
	diasmseq(ddip)  			;disable interrupts
	ldir
	riasmseq            		;restore interrupts
	ret
#endasm

/*** BeginHeader Bf_Bl, Bf_Bg */
root void Bf_Bl();
root void Bf_Bg();
/*** EndHeader */
#asm nodebug
; module float.180
; convert floating to long in bcde
;  extrn F_unpack,S_right,perr,L_neg
; converts floating to long, protects alternate regs
; returns a non zero if any bits lost in fix operation to right
Bf_Bl::
	call  F_unpack				;unpack to lde, sign in h, exp in a or c
; value is (2**(exp+1) * lde) where lde is between 1.00 and 1.99..
	inc   a						;get exponent 1 higher
	jp 	ovf, L.ovl			;too big, 7f->80
; if exp >= 31 overflow.  if exp < -1 result is zero.
; if exp == 23 no shift, else shift by exp-23 left or 23-exp right
	jp 	m, L.ufl				;underflow
	cp 	31						;within signed long shiftable range?
	jr 	c, LUL.common		;no overflow, go do common part of conversion

; long overflow, set error flag and LONG_MAX or LONG_MIN-1 result
L.ovl:
	ld		bc, 0x7FFF			;default to LONG_MAX result
UL.ovl_ret:
	ld 	a, h   				;copy sign into A
	and   80h
	jr		z, L.ovl_ret		;go return maximum value result
	inc	bc						;convert to LONG_MIN-1 or ULONG_MIN result
	jr		L.ovl_ret			;go return minimum value result

; long or unsigned long underflow, set zero result
L.ufl:
UL.ufl:
	ld 	bc, 0x0000
L.ovl_ret:
	ld 	d, c
	ld 	e, d
	ret

; unsigned long negative or overflow,
;  set error flag and ULONG_MAX or ULONG_MIN result
UL.ovl:
	ld		bc, 0xFFFF			;default to ULONG_MAX result
	jr		UL.ovl_ret

Bf_Bg::
	call  F_unpack				;unpack to lde, sign in h, exp in a or c
	bit	7, h					;test sign
	jr		nz, UL.ovl			;it's negative, go return ULONG_MIN result
; value is (2**(exp+1) * lde) where lde is between 1.00 and 1.99..
	inc   a						;get exponent 1 higher
	jp 	ovf, UL.ovl			;too big, 7f->80
; if exp >= 32 overflow.  if exp < -1 result is zero.
; if exp == 23 no shift, else shift by exp-23 left or 23-exp right
	jp 	m, UL.ufl			;underflow
	cp 	32						;within unsigned long shiftable range?
	jr 	nc, UL.ovl			;too big (overflow)
LUL.common:
	sub   23						;get shift
	jp 	m, Bf.Blsr			;go shift right
	jr 	z, Bf.Blns			;no shift
	ld 	b, a					;count
	xor   a						;sign extend
Bf.Bl1:							;shift left
	sla   e
	rl 	d
	rl 	l
	rla
	djnz  Bf.Bl1
	ld 	b, a					;sign extend
	ld 	c, l					;bcde has long
	xor   a						;flag, no bits lost
	jr 	Bf.Bl3				;continue
Bf.Blsr:							;shift right
	neg							;count
	ld 	c, a					; to c
	call  S_right				;shift lde, returns A non zero if any bits lost
Bf.Blns:
	ld 	b, 0					;sign extend
	ld 	c, l					;bc most
Bf.Bl3:
	bit   7, h					;test sign bit
	ret   z						;if positive
; negate long in BCDE, may fall thru from above
	jp 	L_neg					;and return, protects a

F_unpack::
;external entry to unpack a floating number, protects alternate registers
; places exponent in c (and a), sign in h unsigned 24 bit number in lde
; exponent is 1 count low, lde has value between 1.0 and 1.9999..
	ld 	l, c
	ld 	h, b
	ld 	a, h
	xor   40h					;adj exp range
	rl 	l
	rla
	ld 	c, a					;exponent in c sign in h
	scf
	rr 	l						;number in lde unsigned, normalized to l
	ret

S_right::						;ext entry, c is positive or zero, h undisturbed
.shrpc:
	xor   a  					; .keep memory if any bits lost to right
	ld 	b,a   				; .b is zero
	bit   4,c   				; .test for 16
	jr 	z,.shrpa1 			; .
	or 	d  					; .
	or 	e  					; .remember if any 1's in 16 bits lost
	ld 	e,l   				; .
	ld 	l,b   				; .zero, shifting right 16 positions
	ld 	d,b   				; .zero
	jr 	.shrpa5   			; .continue, 8 and 16 both not possible
.shrpa1:
	bit   3,c   				; test for 8
	jr 	z,.shrp5a 			;.
	or 	e  					; remember if any 1's in bits shifted off
	ld 	e,d   				; shift right 8 bits
	ld 	d,l   				; shift right 8 positions
	ld 	l,b   				; zero
.shrpa5:
	or 	a  					; .see if anything in a
	jr 	z,.shrp5a 			; .
	or 	80h   				; .set high bit to perserve nonzero state of A
.shrp5a:
	bit   2,c   				; .test for 4
	jr 	z,.shrpa6 			;.
; shift 4 right keeping track of any 1's shifted off in a
	srl   l  					; .
	rr 	d
	rr 	e
	rra
	srl   l
	rr 	d
	rr 	e
	rra
	srl   l
	rr 	d
	rr 	e
	rra
	srl   l
	rr 	d
	rr 	e
	rra      					; .
.shrpa6:
	bit   1,c   				; .test for 2
	jr 	z,.shrpa7 			;.
	srl   l  					; .
	rr 	d
	rr 	e
	rra
	srl   l
	rr 	d
	rr 	e
	rra      					;.
.shrpa7:
	bit   0,c   				; .test for 1 more shift
	jr 	z,.shrpa8 			;.
	srl   l  					; .
	rr 	d
	rr 	e
	rra      					; .
.shrpa8:
; now if A is non zero a 1 bit was lost at right at some point
	ret      					; . 298 (no less) clocks worst case shift right 23 positions
#endasm

/*** beginheader G_neg, L_neg */
root void G_neg();
root void L_neg();
/*** endheader */

#asm nodebug
; negate bcde, protect contents of a reg for Bf.Bl
G_neg::
L_neg::
	or 	a  					;clc
	ld 	hl,0
	sbc   hl,de 				;least
	ex 	de,hl
	ld 	hl,0
	sbc   hl,bc
	ld 	c,l
	ld 	b,h
	ret
#endasm


/*** Beginheader q_ */
// q_: store integer
root void q_();
/*** Endheader */
#asm nodebug
; store hl at address pushed on stack, without damaging hl
; to preserve result of an assignment
q_::
	pop 	iy
	ex    (sp),iy
	ld    (iy),hl
	ret
#endasm

/*** beginheader llong_, st4_, slong_ */
// llong_:       load long
// st4_, slong_: store long
root void llong_();
root void st4_();
root void slong_();
/*** endheader */

#asm nodebug
; load 32 bit at hl to bc-de
; value may be embedded in code and the first byte following
; as indicated by hl may be the next instruction to execute so
; leave the last increment in place
llong_::
	ld 	e,(hl)
	inc   hl
	ld 	d,(hl)
	inc   hl
	ld 	c,(hl)
	inc   hl
	ld 	b,(hl)
	inc 	hl  					;for some embedded constants this points to next instruction
	ret

; store 4 byte value following function call to address in hl
st4_::
	ex 	(sp),hl
	call  llong_
	ex 	(sp),hl

; store 32 bit from bc-de to address in hl
slong_::
	ld 	(hl),e
	inc   hl
	ld 	(hl),d
	inc   hl
	ld 	(hl),c
	inc   hl
	ld 	(hl),b
	ret
#endasm

/*** beginheader c_neg */
root void c_neg();
/*** endheader */
#asm nodebug
c_neg::
	ex 	de, hl'
	ex 	de, hl
	bool 	hl
	ld 	l,h
	sbc 	hl,de
	ex 	de,hl'
	ret
#endasm

/*** beginheader c_com */
root void c_com();
/*** endheader */
#asm nodebug
// c_neg needs to maintain value in register A for
// division to work properly
c_com::
	ex 	de,hl
	bool	hl
	rr 	hl
	scf
	sbc 	hl,de
	ret
#endasm

/*** BeginHeader */
#endif
/*** EndHeader */