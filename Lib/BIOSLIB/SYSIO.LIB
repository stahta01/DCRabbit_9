/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __SYSIO_LIB
#define __SYSIO_LIB
/*** EndHeader */

/*

Information for the following functions:

Integer, rather than char types are used because these are more efficient since chars are passed as
16 bit quantities in any case. Using integers avoids the need for sign extension.

To keep things uniform the same approach is used for each routine although all the parallel ports differ to some
extent. The user will have to keep track of what bit means what and what bits are ignored, etc.

The single bit stores on ports D and E are not supported directly, but may be used by the user in assembly language
or via these functions if he desires, with or without shadow register support.

These  routines must be in root.


*/

/*** Beginheader bitmasks */
root int bitmasks();
/*** Endheader */

#asm const
; table of bits
bitmasks:: db 1,2,4,8,16,32,64,0x80
#endasm

/*** Beginheader RdPortI */
root int RdPortI(int io_port); // returns contents of port, high byte zero
/*** Endheader */

/* START FUNCTION DESCRIPTION *******************************
RdPortI				<SYSIO.LIB>

SYNTAX:  int RdPortI(int io_port);

KEYWORDS:  parallel port

PARAMETER1:	address of internal I/O port.

DESCRIPTION:  Reads an internal I/O port specified by the
argument (use RdPortE for external port.)
All of the Rabbit internal registers have predefined macros
corresponding to the register's name. PADR is #defined to be
0x30, etc.

RETURN VALUE:  Returns an integer, the lower 8 bits of which
contain the the result of reading the port specified by the
first argument.
END DESCRIPTION ********************************************/

#asm
RdPortI::
ld hl,(sp+2) ; address
ioi ld l,(hl) ; get port
ld h,0
ret
#endasm


/*** Beginheader BitRdPortI */
root int BitRdPortI( int io_port, int bitcode) ;  // bit code 0-7
/*** Endheader */
/* START FUNCTION DESCRIPTION *********************************
BitRdPortI				<SYSIO.LIB>

SYNTAX:  	int BitRdPortI(int io_port, int bitnumber);

KEYWORDS:	parallel port

PARAMETER1:	address of internal I/O port.

PARAMETER2:	bit (0-7) to read value from.

DESCRIPTION:	Returns 1 or 0 matching the value of the bit read
from the specified internal I/O port.
All of the Rabbit internal registers have predefined macros
corresponding to the register's name. PADR is #defined to be
0x30, etc.

RETURN VALUE:  Returns an integer equal to 1 or 0.
END DESCRIPTION ************************************************/
#asm
BitRdPortI::
ld hl,(sp+4) ; get bitcode
ex de,hl
ld hl,bitmasks
add hl,de  ; pointer to bit mask
ld a,(hl)
ld hl,(sp+2) ; port address
ioi and a,(hl) ; get bit
bool hl
rr hl  ; zero hl
ld l,a
bool hl ; result 0 or 1
ret
#endasm

/*** Beginheader WrPortI */
// writes 8 bits to port and shadow
root void WrPortI( int io_port, char *PORTShadow, int value);
/*** Endheader */
/* START FUNCTION DESCRIPTION ******************************
WrPortI				<SYSIO.LIB>

SYNTAX:  void WrPortI(int io_port, char *PORTShadow, int data_value);

KEYWORDS:	parallel port

PARAMETER1:	address of internal I/O port.

PARAMETER2:	address of variable shadowing current value of port.

PARAMETER3:	value to write to port.

DESCRIPTION:	Writes an internal I/O port with 8 bits and
updates shadow for that port. The variable names must be of form
"Port" and "PORTShadow" for most efficient operation. A null
pointer may be substited (use "NULL") if shadow support is not
desired or needed.
All of the Rabbit internal registers have predefined macros
corresponding to the register's name. PADR is #defined to be
0x30, etc.

NOTE: This function is interruptable and shadow values should
not be assumed to be safe if modified in user defined interrupts

RETURN VALUE:  none

END DESCRIPTION ***********************************************/
nodebug
root void WrPortI( int io_port, char *PORTShadow, int value)

{
int reg_perm;

#if ((SHADOWS_MODE==UNPROT_MODE) || (_SYSTEM))

   #asm
	ld iy,(sp+@sp+PORTShadow) ; 4 - address of shadow
	ld hl,iy
	bool hl  ; see if shadow is a null pointer
	jr nz,.WrPortI_2
	; if null don't use shadow
	ld hl,(sp+@sp+value) ; 6 - value
	ld iy,(sp+@sp+io_port) ; 2 - port address
	ioi ld (iy),l ; write toport
	jp .f_ret

	.WrPortI_2:
	ld hl,(sp+@sp+value) ; 6 - value
	ipset	1		 ;stop normal ISR's to prevent race
	ld (iy),l   ; write to shadow
	ld hl,(sp+@sp+io_port) ; 2 - port address
	ex de,hl
	ld hl,iy
	ioi ldd   ; [io](de) <- (hl)  copy shadow to port
	ipres
   .f_ret:
   #endasm

#else

	_sys_WrPortI(io_port, PORTShadow, value, &reg_perm);
//   printf("WrPortI PORT: 0x%x   Permission: %d\n", io_port, reg_perm);

#endif
}


/*** Beginheader BitWrPortI */
root void BitWrPortI( int io_port, char *PORTShadow, int value, int bitcode);
/*** Endheader */

/* START FUNCTION DESCRIPTION ***********************************
BitWrPortI				<SYSIO.LIB>

SYNTAX: 	void BitWrPortI(int io_port, char *PORTShadow, int value, int bitcode);

KEYWORDS:	parallel port

PARAMETER1:	address of internal I/O port.

PARAMETER2:	address of variable shadowing current value of port.

PARAMETER3:	value to write to port.

PARAMETER4:	bit (0-7) to write value to.

DESCRIPTION:	Updates shadow register at bit with value (0 or 1) and
copies shadow to I/O port.  WARNING:  a shadow register is REQUIRED
for this function.
All of the Rabbit internal registers have predefined macros
corresponding to the register's name. PADR is #defined to be
0x30, etc.

RETURN VALUE:  None
END DESCRIPTION ************************************************/

nodebug
root void BitWrPortI( int io_port, char *PORTShadow, int value, int bitcode)

{
int reg_perm;

#if ((SHADOWS_MODE==UNPROT_MODE) || (_SYSTEM))

   #asm
   ld hl,(sp+@sp+io_port) ; address of reg
	ex de,hl
	ld hl,(sp+@sp+PORTShadow) ; address of shadow
	exx ; save them

	ld hl,(sp+@sp+value) ; value
	bool hl   ; hl is 1 for a set, else 0 for reset
	ex de,hl
	rl de
	rl de
	rl de  ; now 8 for reset
	ld hl,(sp+@sp+bitcode) ; bit code
	or hl,de ; now 0-15 first 8 for reset,s econd for set bit
	ld e,15  ; mask, d is zero
	and hl,de ; protect against crash
	ex de,hl
	ld bc,10
	mul ; result in bc is offset in .DoResets table
	ld hl,.DoResets
	add hl,bc
	ld iy,hl  ; jump to address
	exx      ;bring back i/o address and shadow address
	ipset	1	;disable normal interrupts to prevent race
	jp (iy)  ; done
	; jump table for doing bit sets and resets
	.DoResets:
	res 0,(hl)
	ioi ldd  ;(de)<-(hl)
	ipres
	jp .bw_ret
	res 1,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	res 2,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	res 3,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	res 4,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	res 5,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	res 6,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	res 7,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	.DoSets_:
	set 0,(hl)
	ioi ldd  ;(de)<-(hl)
	ipres
	jp .bw_ret
	set 1,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	set 2,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	set 3,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	set 4,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	set 5,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	set 6,(hl)
	ioi ldd
	ipres
	jp .bw_ret
	set 7,(hl)
	ioi ldd
	ipres
	.bw_ret:
	#endasm

#else

	_sys_BitWrPortI(io_port, PORTShadow, value, bitcode, &reg_perm);
//   printf("BitWrPortI PORT: 0x%x   Permission: %d\n", io_port, reg_perm);

#endif
}


// begin code for external I/O ports

/*** Beginheader RdPortE */
// bit code 0-7
root int RdPortE(unsigned int adr); // returns contents of port, high byte zero
/*** Endheader */

/* START FUNCTION DESCRIPTION ********************************************
RdPortE				<SYSIO.LIB>

SYNTAX:	int RdPortE(unsigned int io_port);

PARAMETER1:	address of external I/O port.

DESCRIPTION:	Reads an external I/O port specified by the argument
(use RdPortI for internal port.)

RETURN VALUE:  Returns an integer, the lower 8 bits of which contain the
the result of reading the port specified by the first argument.

END DESCRIPTION **********************************************************/
#asm
RdPortE::
ld hl,(sp+2) ; address
ioe ld l,(hl) ; get port
ld h,0
ret
#endasm

/*** Beginheader BitRdPortE */
// bit code 0-7
root int BitRdPortE(unsigned int io_port, int bitnumber);
/*** Endheader */
/* START FUNCTION DESCRIPTION ****************************************
BitRdPortE				<SYSIO.LIB>

SYNTAX:		int BitRdPortE(unsigned int io_port, int bitnumber);

PARAMETER1:	address of external I/O port.
PARAMETER2:	bit to read (0-7).

DESCRIPTION:  Returns 1 or 0 matching the value of the bit read from the
specified external I/O port.

RETURN VALUE:  Returns an integer equal to 1 or 0.
END DESCRIPTION **********************************************************/

#asm
BitRdPortE::
ld hl,(sp+4) ; get bitcode
ex de,hl
ld hl,bitmasks
add hl,de  ; pointer to bit mask
ld a,(hl)
ld hl,(sp+2) ; port address
ioe and a,(hl) ; get bit
bool hl
rr hl  ; zero hl
ld l,a
bool hl ; result 0 or 1
ret
#endasm

/*** Beginheader WrPortE */
// writes 8 bits to port and shadow
root void WrPortE( unsigned int io_port, char *PORTShadow, int value);
/*** Endheader */

/* START FUNCTION DESCRIPTION *****************************************
WrPortE				<SYSIO.LIB>

SYNTAX: 	void WrPortE(unsigned int io_port, char *PORTShadow,
                      int data_value);

PARAMETER1:	address of external I/O port.

PARAMETER2:	address of variable shadowing current value of port.

PARAMETER3:	value to write to port.

DESCRIPTION:  Writes an external I/O port with 8 bits and updates
shadow for that port. The variable names must be of form "Port" and
"PORTShadow" for most efficient operation. A null pointer may be
substited (use "NULL") if shadow support is not desired or needed.

RETURN VALUE:  none
END DESCRIPTION *******************************************************/
#asm
WrPortE::
ld iy,(sp+4) ; address of shadow
ld hl,iy
bool hl  ; see if shadow is a null pointer
jr nz,.WrPortE_2
; if null don't use shadow
ld hl,(sp+6) ; value
ld iy,(sp+2) ; port address
ioe ld (iy),l ; write toport
ret

.WrPortE_2:
ld hl,(sp+6) ;value
ipset	1		 ;stop normal ISR's to prevent race
ld (iy),l   ; write to shadow
ld hl,(sp+2) ; port address
ex de,hl
ld hl,iy
ioe ldd   ; [io](de) <- (hl)  copy shadow to port
ipres
ret
#endasm

/*** Beginheader BitWrPortE */
// bit code 0-7
root void BitWrPortE(unsigned int io_port, char *PORTShadow, int value, int bitcode);
/*** Endheader  */

/* START FUNCTION DESCRIPTION ********************************************
BitWrPortE				<SYSIO.LIB>

SYNTAX: void BitWrPortE(unsigned int io_port, char *PORTShadow, int value,
                        int bitcode);

PARAMETER1:	address of external I/O port.
PARAMETER2:	address of variable shadowing current value of port.
PARAMETER3:	value to write to port.
PARAMETER4:	bit (0-7) to write value to.

DESCRIPTION:  Updates shadow register at bit with value (0 or 1) and
copies shadow to I/O port.  WARNING:  a shadow register is REQUIRED
for this function.

RETURN VALUE:  None
END DESCRIPTION **********************************************************/

#asm
BitWrPortE::
ld hl,(sp+2) ; address of reg
ex de,hl
ld hl,(sp+4) ; address of shadow
exx ; save them
ld hl,(sp+6) 	; value
bool hl   		; hl is 1 for a set, else 0 for reset
ex de,hl
rl de
rl de
rl de  			; now 8 for reset
ld hl,(sp+8) 	; bit code
or hl,de 		; now 0-15 first 8 for reset,s econd for set bit
ld e,15  		; mask, d is zero
and hl,de 		; protect against crash
ex de,hl
ld bc,8
mul 				; result in bc is offset in DoResets table
ld hl,.DoResetsE
add hl,bc
ld iy,hl  		; jump to address
exx      		;bring back i/o address and shadow address
ipset 1			;disable normal interrupts to prevent race
jp (iy)  		; done
; jump table for doing bit sets and resets to external I/O register
.DoResetsE:
res 0,(hl)
ioe ldd  ; (de)<-(hl)
ipres
ret
res 1,(hl)
ioe ldd
ipres
ret
res 2,(hl)
ioe ldd
ipres
ret
res 3,(hl)
ioe ldd
ipres
ret
res 4,(hl)
ioe ldd
ipres
ret
res 5,(hl)
ioe ldd
ipres
ret
res 6,(hl)
ioe ldd
ipres
ret
res 7,(hl)
ioe ldd
ipres
ret
.DoSetsE_:
set 0,(hl)
ioe ldd  ; (de)<-(hl)
ipres
ret
set 1,(hl)
ioe ldd
ipres
ret
set 2,(hl)
ioe ldd
ipres
ret
set 3,(hl)
ioe ldd
ipres
ret
set 4,(hl)
ioe ldd
ipres
ret
set 5,(hl)
ioe ldd
ipres
ret
set 6,(hl)
ioe ldd
ipres
ret
set 7,(hl)
ioe ldd
ipres
ret
#endasm

/*** BeginHeader	LongToXaddr */
root void LongToXaddr();
/*** EndHeader ****************/
/***********************************************************
Function to convert a Long in BC:DE to an xmem addr in A:DE
where  A = XPC and  E000 <= DE <= EFFF
***********************************************************/
#asm
LongToXaddr::
	ld		a,d	; Get high nibble of 16 bit offset
	and   0xf0
	srl   a
	srl   a
	srl   a
	srl   a     ; shift it 4 bits right
	sla   c
	sla   c
	sla   c
	sla   c     ; shift highest bits of phys addr. left 4
	add   a,c
	ld    c,a
	sub   0x0e
	ld    c,a   ; C now has xpc
	ld    a,d
	and   0x0f
	or    0xe0  ; change high nibble or add. to Ex
	ld    d,a
	ld    a,c
	ret
#endasm



/*** BeginHeader RdExtPort */
root int RdExtPort(unsigned int port);
/*** EndHeader */


/* START FUNCTION DESCRIPTION ********************************************
RdExtPort		           <SYSIO.LIB>

SYNTAX:			int RdExtPort(unsigned int io_port);

DESCRIPTION:	Reads an external I/O port specified by the argument.

					This routine provides a minimum of 2 processor CLK cycles
					of address hold-time for address lines A0-A3 when accessing
					external I/O addresses 0x0000-0xFFFF.

PARAMETER:		Address of external I/O port.

RETURN VALUE:  Returns an integer, the lower 8 bits of which contain the
					the result of reading the port specified by the first
					argument.

END DESCRIPTION **********************************************************/

// The nodebug statement is required for the address hold-time to be valid.

#asm root nodebug
RdExtPort::
	jr	rd_start

align 16
rd_start:
   ; Calculate offset into I/O vector table
	ld  b,0						;xx00-01
   ld  a,l              	;xx02
	and a,0x0f           	;xx03-04
	ld  c,a              	;xx05
	ld  iy,.rdPort_table  	;xx06-09
	add iy,bc            	;xx0A-0B

	; Get offset into I/O vector table
	ld  a,(iy)           	;xx0C-0E
   ld  c,a              	;xx0F

	; Add offset to the base address of this routine
	ld  iy,RdExtPort     	;xx10-13
	add iy,bc              	;xx14-15
	push	ip					   ;xx16-17
	ipset 3                 ;xx18-19
	jp  (iy)               	;xx1A-1B

	;Used for addr aligmnent, do not remove!
	dw   0           	      ;xx1C-1D

   ; Start of Vectors for external I/O Reads
.ioe_0:
 	ioe ld l,(hl)        	;xx1E-1F
 	pop ip                  ;xx20-21
   ld  h,0						;0x22-23
   ret                  	;xx24

.ioe_7:
 	ioe ld l,(hl)        	;xx25-26
 	pop ip                  ;xx27-28
   ld  h,0						;0x29-2A
   ret                  	;xx2B

.ioe_E:
 	ioe ld l,(hl)       		;xx2C-2D
 	pop ip                  ;xx2E-2F
   ld  h,0						;0x30-31
   ret                  	;xx32

.ioe_5:
 	ioe ld l,(hl)        	;xx33-34
   pop ip                  ;xx35-36
   ld  h,0						;0x37-38
   ret                  	;xx39

.ioe_C:
 	ioe ld l,(hl)        	;xx3A-3B
   pop ip                  ;xx3C-3D
   ld  h,0						;0x3E-3F
   ret                  	;xx40

.ioe_3:
 	ioe ld l,(hl)        	;xx41-42
   pop ip                  ;xx43-44
   ld  h,0						;0x45-46
   ret                  	;xx47

.ioe_A:
 	ioe ld l,(hl)        	;xx48-49
 	pop ip                  ;xx4A-4B
   ld  h,0						;0x4C-4D
   ret                  	;xx4E

 .ioe_1:
 	ioe ld l,(hl)        	;xx4F-50
   pop ip                  ;xx51-52
   ld  h,0						;0x53-54
   ret                  	;xx55

.ioe_8:
 	ioe ld l,(hl)        	;xx56-57
   pop ip                  ;xx58-59
   ld  h,0						;0x5A-5B
   ret                  	;xx5C

.ioe_F:
 	ioe ld l,(hl)        	;xx5D-5E
 	pop ip                  ;xx5F-60
   ld  h,0						;0x61-62
   ret                  	;xx63

.ioe_6:
 	ioe ld l,(hl)        	;xx64-65
  	pop ip                  ;xx66-67
   ld  h,0						;0x68-69
   ret                  	;xx6A

.ioe_D:
 	ioe ld l,(hl)        	;xx6B-6C
 	pop ip                  ;xx6D-6E
   ld  h,0						;0x6F-70
   ret                  	;xx71

.ioe_4:
 	ioe ld l,(hl)        	;xx72-73
 	pop ip                  ;xx74-75
   ld  h,0						;0x76-77
   ret                  	;xx78

.ioe_B:
 	ioe ld l,(hl)        	;xx79-7A
   pop ip                  ;xx7B-7C
   ld  h,0						;0x7D-7E
   ret                  	;xx7F

.ioe_2:
 	ioe ld l,(hl)        	;xx80-81
   pop ip                  ;xx82-83
   ld  h,0						;0x84-85
   ret                  	;xx86

.ioe_9:
 	ioe ld l,(hl)        	;xx87-88
   pop ip                  ;xx89-8A
   ld  h,0						;0x8B-8C
   ret                  	;xx8D

_end_RdExtPort::

;  Calculation of offsets for external read I/O accesses
	rd_ioe_0_offset::  equ .ioe_0 - RdExtPort
	rd_ioe_1_offset::  equ .ioe_1 - RdExtPort
	rd_ioe_2_offset::  equ .ioe_2 - RdExtPort
	rd_ioe_3_offset::  equ .ioe_3 - RdExtPort
	rd_ioe_4_offset::  equ .ioe_4 - RdExtPort
	rd_ioe_5_offset::  equ .ioe_5 - RdExtPort
	rd_ioe_6_offset::  equ .ioe_6 - RdExtPort
	rd_ioe_7_offset::  equ .ioe_7 - RdExtPort
	rd_ioe_8_offset::  equ .ioe_8 - RdExtPort
	rd_ioe_9_offset::  equ .ioe_9 - RdExtPort
	rd_ioe_A_offset::  equ .ioe_A - RdExtPort
	rd_ioe_B_offset::  equ .ioe_B - RdExtPort
	rd_ioe_C_offset::  equ .ioe_C - RdExtPort
	rd_ioe_D_offset::  equ .ioe_D - RdExtPort
	rd_ioe_E_offset::  equ .ioe_E - RdExtPort
	rd_ioe_F_offset::  equ .ioe_F - RdExtPort

; Look-up table of offsets for external Read I/O accesses
#endasm

#asm  const
.rdPort_table::
	db		rd_ioe_0_offset, rd_ioe_1_offset, rd_ioe_2_offset, rd_ioe_3_offset
	db	   rd_ioe_4_offset, rd_ioe_5_offset, rd_ioe_6_offset, rd_ioe_7_offset
	db	   rd_ioe_8_offset, rd_ioe_9_offset, rd_ioe_A_offset, rd_ioe_B_offset
	db	   rd_ioe_C_offset, rd_ioe_D_offset, rd_ioe_E_offset, rd_ioe_F_offset
#endasm


/*** BeginHeader WrExtPort */
root int WrExtPort(unsigned int port, char data);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
WrExtPort		           <SYSIO.LIB>

SYNTAX:			WrExtPort(unsigned int port, char data);

DESCRIPTION:	Writes data to an external I/O port, and will provide
               2 processor CLK cycles of address hold-time for address
               lines A0-A3 when accessing external I/O addresses range
               0x0000-0xFFFF.

PARAMETER1:		Address of external I/O port.
PARAMETER2:    Data value.

RETURN VALUE:  Returns an integer, the lower 8 bits of which contain the
					the result of reading the port specified by the first
					argument.

END DESCRIPTION **********************************************************/

// The nodebug statement is required for the address hold-time to be valid.

#asm root nodebug
WrExtPort::
	jr	 wr_start

align 16
wr_start:
   ; Calculate offset into I/O vector table
	ld  b,0						;xx00-01
   ld  a,l              	;xx02
	and a,0x0f           	;xx03-04
	ld  c,a              	;xx05
	ld  iy,.wrPort_table  	;xx06-09
	add iy,bc            	;xx0A-0B

	; Get offset into I/O vector table
	ld  a,(iy)           	;xx0C-0E
   ld  c,a              	;xx0F

	; Add offset to the base address of this routine
	ld  iy,WrExtPort     	;xx10-13
	add iy,bc              	;xx14-15
	ld  hl,(sp+4)    			;xx16-17
	ld  a,l                 ;xx18
	ld  hl,(sp+2)    			;xx19-1A

	push	ip					   ;xx1B-1C
	ipset 3                 ;xx1D-1E
	jp  (iy)               	;xx1F-20

	;Used for addr aligmnent, do not remove!
	dw   0           	      ;xx21-24
	dw   0

  ; Start of Vectors for external I/O Reads
.ioe_7:
 	ioe ld (hl),a         	;xx25-26
 	pop ip                  ;xx27-28
 	ret                  	;xx29
   nop      					;xx2A
	nop							;xx2B

.ioe_E:
 	ioe ld (hl),a       		;xx2C-2D
 	pop ip                  ;xx2E-2F
 	ret							;xx30
   nop							;xx31
   nop							;xx32

.ioe_5:
 	ioe ld (hl),a        	;xx33-34
   pop ip                  ;xx35-36
  	ret							;xx37
   nop							;xx38
   nop							;xx39

.ioe_C:
 	ioe ld (hl),a        	;xx3A-3B
   pop ip                  ;xx3C-3D
  	ret							;xx3E
   nop							;xx3F
   nop							;xx40

.ioe_3:
 	ioe ld (hl),a        	;xx41-42
   pop ip                  ;xx43-44
 	ret							;xx45
   nop							;xx46
   nop							;xx47

.ioe_A:
 	ioe ld (hl),a        	;xx48-49
 	pop ip                  ;xx4A-4B
   ret							;xx4C
   nop							;xx4D
   nop							;xx4E

.ioe_1:
 	ioe ld (hl),a        	;xx4F-50
   pop ip                  ;xx51-52
  	ret							;xx53
   nop							;xx54
   nop							;xx55

.ioe_8:
 	ioe ld (hl),a        	;xx56-57
   pop ip                  ;xx58-59
   ret							;xx5A
   nop							;xx5B
   nop							;xx5C

.ioe_F:
 	ioe ld (hl),a        	;xx5D-5E
 	pop ip                  ;xx5F-60
	ret							;xx61
   nop							;xx62
   nop							;xx63

.ioe_6:
 	ioe ld (hl),a        	;xx64-65
  	pop ip                  ;xx66-67
	ret							;xx68
   nop							;xx69
   nop							;xx6A

.ioe_D:
 	ioe ld (hl),a        	;xx6B-6C
 	pop ip                  ;xx6D-6E
	ret							;xx6F
   nop							;xx70
   nop							;xx71

.ioe_4:
 	ioe ld (hl),a        	;xx72-73
 	pop ip                  ;xx74-75
	ret							;xx76
   nop							;xx77
   nop							;xx78

.ioe_B:
 	ioe ld (hl),a        	;xx79-7A
   pop ip                  ;xx7B-7C
	ret							;xx7D
   nop							;xx7E
   nop							;xx7F

.ioe_2:
 	ioe ld (hl),a        	;xx80-81
   pop ip                  ;xx82-83
 	ret							;xx84
   nop							;xx85
   nop							;xx86

.ioe_9:
 	ioe ld (hl),a        	;xx87-88
   pop ip                  ;xx89-8A
	ret							;xx8B
   nop							;xx8C
   nop							;xx8D

.ioe_0:
 	ioe ld (hl),a        	;xx8E-8F
 	pop ip                  ;xx90-91
 	ret							;xx92
   nop							;xx93
   nop							;xx94

_end_WrExtPort::

;  Calculation of offsets for external read I/O accesses
	wr_ioe_0_offset::  equ .ioe_0 - WrExtPort
	wr_ioe_1_offset::  equ .ioe_1 - WrExtPort
	wr_ioe_2_offset::  equ .ioe_2 - WrExtPort
	wr_ioe_3_offset::  equ .ioe_3 - WrExtPort
	wr_ioe_4_offset::  equ .ioe_4 - WrExtPort
	wr_ioe_5_offset::  equ .ioe_5 - WrExtPort
	wr_ioe_6_offset::  equ .ioe_6 - WrExtPort
	wr_ioe_7_offset::  equ .ioe_7 - WrExtPort
	wr_ioe_8_offset::  equ .ioe_8 - WrExtPort
	wr_ioe_9_offset::  equ .ioe_9 - WrExtPort
	wr_ioe_A_offset::  equ .ioe_A - WrExtPort
	wr_ioe_B_offset::  equ .ioe_B - WrExtPort
	wr_ioe_C_offset::  equ .ioe_C - WrExtPort
	wr_ioe_D_offset::  equ .ioe_D - WrExtPort
	wr_ioe_E_offset::  equ .ioe_E - WrExtPort
	wr_ioe_F_offset::  equ .ioe_F - WrExtPort

; Look-up table of offsets for external Read I/O accesses
#endasm


#asm const
.wrPort_table::
	db		wr_ioe_0_offset, wr_ioe_1_offset, wr_ioe_2_offset, wr_ioe_3_offset
	db	   wr_ioe_4_offset, wr_ioe_5_offset, wr_ioe_6_offset, wr_ioe_7_offset
	db	   wr_ioe_8_offset, wr_ioe_9_offset, wr_ioe_A_offset, wr_ioe_B_offset
	db	   wr_ioe_C_offset, wr_ioe_D_offset, wr_ioe_E_offset, wr_ioe_F_offset
#endasm


/*** BeginHeader */
#endif
/*** EndHeader */

