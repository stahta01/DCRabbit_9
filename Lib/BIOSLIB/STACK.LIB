/*** BeginHeader */
#ifndef __STACK_LIB
#define __STACK_LIB

#ifndef _stack_debug
#define _stack_debug nodebug
#endif

#define Get_Stack_Size _Get_Stack_Size

/*** EndHeader */


/*
 * The reserve_Store[] defines regions in memory to be used for data,
 * memory mapped I/O, etc.  In other words, the reserve_Store[] defines
 * what *NOT* to use for volatile xdata and stack space (both of which
 * are allocated via xalloc).
 *
 * The _init_xalloc() function, called by premain(), calculates the
 * xalloc_Store[] (i.e. the areas to use for xalloc) based on the values
 * in the reserve_Store[].
 *
 *
 * The default physical RAM memory map for an application running in
 * flash with separate I&D space disabled looks like this:
 *
 *	Address													Size of region (bytes)
 *
 *										----------------
 *	RAMEND (top of RAM)			|					|
 *										~					~
 *										possible				_RAM_SIZE_ / 2
 *										xalloc region		(only if 512K SRAM)
 *										~					~
 *										|					|
 *										----------------
 *	DATAEND (top of data)		|					|
 *										~					~
 *										flash transfer		FLASH_BUF_SIZE
 *										buffer
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_TCSYSBUF					|					|
 *										~					~
 *										target				TC_SYSBUF_BLOCK
 *										communication
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_ERRLOG						|					|
 *										~					~
 *										optional				ERRLOG_NBLOCKS*0x1000
 *										error logging
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_FS2RAM						|					|
 *										~					~
 *										optional				FS2_RAM_RESERVE*0x1000
 *										RAM file system
 *										reserve store
 *										~					~
 *	FS2_RAM_PHYS					|					|
 *										----------------
 *	_TOS_ROOTDATA					|					|
 *										~					~
 *										vectors, watch		DATASIZE
 *										code, root data
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_USERDATA					|					|
 *										~					~
 *										optional				_SOS_USERDATA
 *										user data
 *										reserve store
 *										~					~
 *	_BOS_USERDATA					|					|
 *										----------------
 *	_TOS_WATCH_MEM					|					|
 *										~					~
 *										possible				_SOS_WATCH_MEM
 *										watch data
 *										reserve store
 *										~					~
 *	_BOS_WATCH_MEM					|					|
 *										----------------
 *										|					|
 *										~					~	min(_TOS_USERDATA+1,
 *										xalloc region		    _BOS_USERDATA,
 *										~					~	    _BOS_WATCH_MEM)
 *	RAM_START*0x1000				|					|	- (RAM_START*0x1000)
 *										----------------
 *
 *
 * The default physical RAM memory map for an application running in
 * flash with separate I&D space enabled looks like this:
 *
 *	Address													Size of region (bytes)
 *
 *										----------------
 *	RAMEND (top of RAM)			|					|
 *										~					~
 *										possible				_RAM_SIZE_ / 2
 *										xalloc region		(only if 512K SRAM)
 *										~					~
 *										|					|
 *										----------------
 *	DATAEND (top of data)		|					|
 *										~					~
 *										flash transfer		FLASH_BUF_SIZE
 *										buffer
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_TCSYSBUF					|					|
 *										~					~
 *										target				TC_SYSBUF_BLOCK
 *										communication
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_ERRLOG						|					|
 *										~					~
 *										optional				ERRLOG_NBLOCKS*0x1000
 *										error logging
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_FS2RAM						|					|
 *										~					~
 *										optional				FS2_RAM_RESERVE*0x1000
 *										RAM file system
 *										reserve store
 *										~					~
 *	FS2_RAM_PHYS					|					|
 *										----------------
 *	_TOS_USERDATA					|					|
 *										~					~
 *										optional				_SOS_USERDATA
 *										user data
 *										reserve store
 *										~					~
 *	_BOS_USERDATA					|					|
 *										----------------
 *	_TOS_WATCH_MEM					|					|
 *										~					~
 *										possible				_SOS_WATCH_MEM
 *										watch data
 *										reserve store
 *										~					~
 *	_BOS_WATCH_MEM					|					|
 *										----------------
 *										|					|	min(_TOS_ERRLOG+1,
 *										~					~	    _TOS_FS2RAM+1,
 *										xalloc region		    FS2_RAM_PHYS,
 *										~					~	    _BOS_USERDATA,
 *										|					|	    _BOS_WATCH_MEM)
 *										----------------	- (_TOS_WATCHCODE+1)
 *	_TOS_WATCHCODE					|					|
 *										~					~
 *										watch code			WATCHCODESIZE
 *										~					~
 *										|					|
 *										----------------
 *	_TOS_ROOTDATA					|					|
 *										~					~
 *										root variables		DATASIZE
 *										(includes vector
 *										relays which
 *										execute in xmem)
 *										reserve store
 *										~					~
 *										|					|
 *										----------------
 *										|					|
 *										~					~
 *										xalloc region		_RK_DATAORG (ie:  size of
 *										~					~	the root constants area)
 *	RAM_START*0x1000				|					|
 *										----------------
 *
 *
 * To reserve another region of memory, add another element to the
 * reserve_Store array below.  The elements should be entered in
 * descending sorted order by address (i.e. the value of top) and must
 * not overlap.  Unsorted or overlapping entries will cause a run time
 * error in _init_xalloc().  Often, it is also necessary to update
 * the size of one memory org in RabbitBios.c to accommodate the new
 * reserve_Store[] entry.
 *
 * Avoid reserving regions within the first 32 KB or last 8 KB of the
 * /CS1 (or, if a RAM-only target board, the /CS0) RAM, as this memory
 * may be overwritten by either coldload.bin or pilot.bin while loading
 * an application to the target controller.
 *
 * As an example, for an application running in flash with separate I&D
 * space disabled and RAM_START = 0x80, if you wanted to memory map a
 * device to the physical address range of 0x90300-0x903ff you would
 * change the appropriate reserve_Store definition below to:
 *
 * const reserve_Region reserve_Store[] = {
 * #if FLASH_COMPILE
 *  #if __SEPARATE_INST_DATA__
 *  ...
 *  #else
 *  ...
 *    {(RAM_START*0x1000L)+0x103ffL, 0x100L},	// new entry in sorted spot
 *  ...
 *  #endif
 * #endif
 *
 * #if RAM_COMPILE
 * ...
 * #endif
 *
 * #if FAST_RAM_COMPILE
 * ...
 * #endif
 * };
 *
 * In the simple example above, no memory org size changes are required
 * in RabbitBios.c.  The _init_xalloc() function takes care of mapping
 * the xalloc_Store[] entries around the new reserve_Store[] entry.
 *
 *
 * Changes:
 *   2003/04/10  SJH  Added flags to xalloc region record to indicate whether the region
 *                    is in battery-backed RAM.  This is only set for the RCM3200 2nd RAM
 *                    at present.  xalloc() is now a wrapper for _xalloc(), which takes
 *                    additional parameters to specify the type and alignment of the
 *                    returned memory.  xavail() is also a wrapper for _xavail().
 *
 *                    NOTE: xavail, _xavail and xrelease have been moved to XMEM.LIB
 *                    since they are not used by the BIOS.
 *
 */


/*** BeginHeader xalloc */
long xalloc(long);

#if _USER
	#define _xalloc _sys_xalloc
#else
	#define _xalloc _rs_xalloc
#endif

// 'type' parameter for _xalloc():
#define XALLOC_ANY	0		// Return any type of RAM
#define XALLOC_BB		1		// Return only battery-backed (2nd RAM, RCM3200 only)
#define XALLOC_NOTBB	2		// Return only non-BB RAM.
#define XALLOC_MAYBBB 3		// Return non-BB RAM first, and only return BB RAM if no non-BB RAM remains.

// Note:  The following macros that begin with _BOS_ or _SOS_ or _TOS_
//        indicate "Bottom Of Store" or "Size Of Store" or "Top Of
//        Store" respectively.

// macro definitions that are independent of compile mode (when making any
//  change in this area, be sure to recheck all compile modes!)

// end of (lowest-mapped) RAM (top; may be different from DATAEND)
#define RAMEND ((RAM_START+_RAM_SIZE_)*0x1000L-1L)
// target communication buffers (top)
#define _TOS_TCSYSBUF (DATAEND-FLASH_BUF_SIZE)
// FS2 RAM file system (bottom)
#define FS2_RAM_PHYS (_TOS_FS2RAM-FS2_RAM_RESERVE*4096L+1L)
// user data (bottom)
#define _BOS_USERDATA (_TOS_USERDATA-_SOS_USERDATA+1L)
// user data (size rounded up to an even 4 KB block)
#define _SOS_USERDATABLOCK (0xFFFFF000&(_SOS_USERDATA+0xFFF))
// watch data (size and bottom)
#define _SOS_WATCH_MEM _DK_WATCH_MEM_
#define _BOS_WATCH_MEM (_TOS_WATCH_MEM-_SOS_WATCH_MEM+1L)
// watch code (top; used in separate I&D flash compile mode)
#define _TOS_WATCHCODE ((WATCHSEGVAL)*0x1000L+WATCHCODEORG+WATCHCODESIZE-1L)
// root data (size; used in flash compile modes, shared I&D RAM compile mode)
#define DATASIZE (_RK_STACKORG-_RK_DATAORG)

// macro definitions that are dependant on compile mode (when making any
//  change in these areas, be sure to recheck the specific compile mode!)

/*
** Note that these macro definitions are often dependent on the immediately
** preceding macro definition.  See comments at the top of each compile mode's
** section of macro defintions for more information and the reasoning behind the
** relative placement of each reserve store.
**
** Also note that enabling, disabling or changing the size of any reserve store
** affects the placement of most of the subsequent (lower physical address)
** reserve stores.  Minimizing or eliminating such changes goes a long way
** toward making file system using applications as robust as possible in terms
** of recovery from an ill-timed power cycle followed by update sequence.
*/


/*** EndHeader */




/* START FUNCTION DESCRIPTION ********************************************
xalloc                         <STACK.LIB>

SYNTAX: long xalloc(long sz);

DESCRIPTION: Allocates memory in extended memory.  If xalloc() fails,
a run-time error will occur.  This is a wrapper function for _xalloc(),
for backwards compatibility.  It is the same as
  _xalloc(&sz, 1, XALLOC_MAYBBB)
except that the actual allocated amount is not returned since the parameter
is not a pointer.  The returned address is always even (word) aligned.

PARAMETER1: sz: The number of bytes to allocate.  This is rounded up
to the next higher even number.

RETURN VALUE: The 20-bit physical address of the allocated data.

KEYWORDS: xalloc, premain
END DESCRIPTION **********************************************************/
_stack_debug
long xalloc(long sz)
{
	return _xalloc(&sz, 1, XALLOC_MAYBBB);
}




/*** BeginHeader _Init_Stacks, _Alloc_Stack, _Dealloc_Stack, _Get_Stack_Size */
void _Init_Stacks(void);
long _Alloc_Stack(unsigned);
int _Dealloc_Stack(long);
unsigned _Get_Stack_Size(long ptr);
extern unsigned long BaseOfStacks1, BaseOfStacks2;
extern unsigned long SizeOfStacks1, SizeOfStacks2;
#define STACKPOOLCOUNT 5

/*** EndHeader */

// If not using U/COS, then default to using only one 4K stack.
#ifndef MCOS
	#ifndef STACK_CNT_256
		#define STACK_CNT_256	0
	#endif
	#ifndef STACK_CNT_512
		#define STACK_CNT_512	0
	#endif
	#ifndef STACK_CNT_1K
		#define STACK_CNT_1K		0
	#endif
	#ifndef STACK_CNT_2K
		#define STACK_CNT_2K		0
	#endif
	#ifndef STACK_CNT_4K
		#define STACK_CNT_4K		1
	#endif
#endif

// If using uC/OS-II and default stack sizes need to be changed
// redefine stack counts as necessary.  Defining these
// at the top of your program will override these values.
#ifndef STACK_CNT_256
#define STACK_CNT_256	3	// number of 256 byte stacks
#endif
#ifndef STACK_CNT_512
#define STACK_CNT_512	3	// number of 512 byte stacks
#endif
#ifndef STACK_CNT_1K
#define STACK_CNT_1K		2	// number of 1K stacks
#endif
#ifndef STACK_CNT_2K
#define STACK_CNT_2K		2	// number of 2K stacks
#endif
#ifndef STACK_CNT_4K
#define STACK_CNT_4K		2	// number of 4K stacks
#endif

#define TOTAL_STACK_CNT STACK_CNT_256 + STACK_CNT_512 + STACK_CNT_1K + STACK_CNT_2K + STACK_CNT_4K

long freeStacks[TOTAL_STACK_CNT];
const unsigned stackSizes[STACKPOOLCOUNT] = {0x100, 0x200, 0x400, 0x800, 0x1000};
unsigned long BaseOfStacks1, BaseOfStacks2;
unsigned long SizeOfStacks1, SizeOfStacks2;

/* _START FUNCTION DESCRIPTION ********************************************
_Init_Stacks                         <STACK.LIB>

SYNTAX: void _Init_Stacks();

DESCRIPTION: Reserves memory for stacks space using xalloc.  Before using
this function you must call _init_xalloc().  Individual stacks are to be
allocated by calling _Alloc_Stack() after the call to _Init_Stacks.
If _Init_Stacks
fails, a run-time error will occur.

Memory for stacks is divided into 256, 512, 1024, 2048, and 4096 byte
units of allocation defined by the macros STACK_CNT_256, STACK_CNT_512,
STACK_CNT_1K, STACK_CNT_2K, and STACK_CNT_4K, respectively.  To customize
the total number of allocable stacks, modify these macros in STACK.LIB.

WARNING: This function is normally called from premain.
Do not call this function from main because it will clobber
data allocated by stack allocation in premain!

RETURN VALUE: None.

KEYWORDS: _init_xalloc, xalloc, _Alloc_Stack, premain
END DESCRIPTION **********************************************************/

_stack_debug
void _Init_Stacks(void)
{
	auto long allocatedForStacks;
	auto long spaceLeft;
	auto int i;
	auto unsigned locCounts[STACKPOOLCOUNT];
	auto unsigned int allocIndex;
	auto unsigned totalStackCounts;

	locCounts[0] = STACK_CNT_256;
	locCounts[1] = STACK_CNT_512;
	locCounts[2] = STACK_CNT_1K;
	locCounts[3] = STACK_CNT_2K;
	locCounts[4] = STACK_CNT_4K;
	totalStackCounts = TOTAL_STACK_CNT;
	SizeOfStacks1 = 0;
	SizeOfStacks2 = 0;
	allocIndex    = 0;

	for(i = 0; i< STACKPOOLCOUNT; i++) {
		SizeOfStacks1 += locCounts[i]*(unsigned long)stackSizes[i];
	}

	// Use allocatedForStacks as the total size of stack(s) to be allocated, to
	//  prevent _xalloc() from altering the value in SizeOfStacks1 and because
	//  we'll need the (possibly) updated value later.
	allocatedForStacks = SizeOfStacks1;
	// Allocate required stack size plus possible additional size due to the
	//  4 KByte (i.e 2^^12 byte) boundary alignment requirement for STACKSEG.
	BaseOfStacks1 = _xalloc(&allocatedForStacks, 12, XALLOC_MAYBBB);
	// Calculate the uppermost allocated 4 KByte boundary address, which is the
	//  starting point for later fitting of individual stack(s) into the total
	//  stack(s) allocation.
	spaceLeft = BaseOfStacks1 + allocatedForStacks & 0xFFF000L;

	while(totalStackCounts) {
		for(i = STACKPOOLCOUNT-1; i>=0; i--) {
			// ensure that stack can fit before the next 4k (0x1000) boundary
			while(locCounts[i] && (spaceLeft & 0xfffL) >= stackSizes[i]-1) {
				// if we are about to overrun our current allocation
				// allocate more space
				locCounts[i]--;
				totalStackCounts--;
				freeStacks[allocIndex] = ((long)i<<24)+spaceLeft;
				#if _USER
				if(0xfff == (freeStacks[allocIndex] & 0xfff)) {
					freeStacks[allocIndex] -= 0x10; // Mask off lower bits to ensure stack doesn't start in system limit
				}
				#endif
				allocIndex++;
				spaceLeft -= stackSizes[i];
			}
		}
		// if i< 0 then count not fit any more stacks in remaining space
		// move down to next 4k boundary
		if (i < 0 ) {
			spaceLeft -= 0x1000;
			spaceLeft |= 0xfff;
		}
	}
}


/* START FUNCTION DESCRIPTION ********************************************
Get_Stack_Size                         <STACK.LIB>

SYNTAX: unsigned Get_Stack_Size(long pointer);

DESCRIPTION: Get_Stack_Size returns the size of the stack identified by
the pointer parameter.  Get_Stack_Size assumes that pointer is a
a valid address inside a stack allocated by _Alloc_Stack.

If the value of pointer has overflowed or underflowed its stack, the
return value is be unpredictable.

PARAMETER1: pointer: a long of the form 0x00SSDYYY where SS denotes the
8 bit stack segment register value and DYYY denotes the 16-bit
logical address in the range 0xD000-0xDFFF.

RETURN VALUE: An unsigned integer containing the total stack size.  Returns
0 if the stack cannot be identified.

KEYWORDS: _Init_Stack, _Alloc_Stack
END DESCRIPTION **********************************************************/

_stack_debug
unsigned _Get_Stack_Size(long ptr) {
	auto int i;

	/* Get_Stack_Size algorithm assumes that the stack addresses
		in freeStacks are ordered consecutively. */
	// Convert address from ss:dyyy to 20 bit physical address.
	#asm
		ld hl, (sp+@sp+ptr)
		ex de, hl
		ld hl, (sp+@sp+ptr+2)
		xor a
		ld b, e
		ld e, d
		ld d, a
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, de
		ld d, l
		ld e, b
		ld l, h
		ld h, a  ;zero
		ld (sp+@sp+ptr+2), hl
		ex de, hl
		ld (sp+@sp+ptr), hl
	#endasm
	for(i = 1; i < TOTAL_STACK_CNT ; i++) {
		if(ptr > (freeStacks[i] & 0xfffffL) && ptr <= (freeStacks[i-1] & 0xfffffL)) {
#if (DK_ENABLE_STACK_TRACING == 1)
	#ifdef MCOS
			return stackSizes[(unsigned)(freeStacks[i-1]>>24) & 0x7f] - 3;
   #else
			return stackSizes[(unsigned)(freeStacks[i-1]>>24) & 0x7f];
   #endif
#else
			return stackSizes[(unsigned)(freeStacks[i-1]>>24) & 0x7f];
#endif
		}
	}
	if(ptr <= (freeStacks[i-1] & 0xfffffL)) {
		return stackSizes[(unsigned)(freeStacks[i-1]>>24) & 0x7f];
	}
	return 0;
}

/* START FUNCTION DESCRIPTION ********************************************
_Alloc_Stack                         <STACK.LIB>

SYNTAX:  long _Alloc_Stack(unsigned sz);

DESCRIPTION: _Alloc_Stack() allocates a stack for tasking/slicing use.
The stack is allocated from space setup by _Init_Stack().  The return
value is the stack segment register/logical address encoded in a long.

The stack returned will be greater than or equal to the parameter sz
and can be retrieved via Get_Stack_Size().  Upon failure,
_Alloc_Stack() returns 0.

PARAMETER1: sz: Requested size for the stack.

RETURN VALUE: A long (xmem pointer) of the form 00SSDYYY where SS
denotes the 8 bit stack segment register value and DYYY denotes the
16-bit logical address in the range 0xD000-0xDFFF.  If _Alloc_Stack fails,
the return value is 0;

KEYWORDS: _Init_Stack, Get_Stack_Size, premain
END DESCRIPTION **********************************************************/


#if (DK_ENABLE_STACK_TRACING == 1)
	#ifdef MCOS
   int root2xmem(unsigned long dest, void *src, unsigned len);
   #endif
#endif

_stack_debug
long _Alloc_Stack(unsigned int sz)
{
	static long retval;
	auto int i, i2;
	static char *fsPtr;
#if (DK_ENABLE_STACK_TRACING == 1)
	#ifdef MCOS
   auto int v;
   sz -= 3;
   #endif
#endif

	for(i = 0;i < STACKPOOLCOUNT;i++) {
		if(sz <= stackSizes[i]) {
			sz = i;
			break;
		}
	}

	if (i == STACKPOOLCOUNT) {
		return 0;
	}
	fsPtr = (char *) freeStacks;
	for(i = TOTAL_STACK_CNT-1; i >= 0;i--) {
		// test for allocation (high bit)
		i2 = i*sizeof(long)+sizeof(long)-1;
		if(!(fsPtr[i2] & 0x80)) {
			if(fsPtr[i2]>=sz) {
				fsPtr[i2] |= 0x80;
				break;
			}
		}
	}

	if (i < 0) {
		return 0;
	}
	retval = freeStacks[i] & 0xfffff; // get the physical address
#if (DK_ENABLE_STACK_TRACING == 1)
	#ifdef MCOS
	dkUCos = 1;
   retval -= 3;
   v = 0xdbbd;
   root2xmem(retval + 2, &v, 2);
   #endif
#endif

	// convert return value into form c:de
	// where c is STACKSEG and de is 0xDyyy logical address
   _gen_lin2seg(&retval, 0xd);
	return retval;
}

/* START FUNCTION DESCRIPTION ********************************************
_Dealloc_Stack                         <STACK.LIB>

SYNTAX:  int _Dealloc_Stack(long ptr);

DESCRIPTION: _Dealloc_Stack() deallocates a stack for tasking reuse.
The ptr value must be equal to the return value of a previous call
to _Alloc_Stack.  Otherwise, _Dealloc_Stack will fail.

If the stack address is valid the stack is marked as deallocated
and; multiple calls on the same valid address have no effect.
If the deallocation fails, _Dealloc_Stack returns 0; failure indicates
that the parameter ptr is an invalid stack address.


PARAMETER1: ptr: valid stack address returned from call to _Alloc_Stack

RETURN VALUE:	1: if ptr is valid stack address
				 	0: if ptr is an invalid stack address

KEYWORDS: _Init_Stack, Get_Stack_Size, premain, _Alloc_Stack
END DESCRIPTION **********************************************************/


_stack_debug
int _Dealloc_Stack(long ptr)
{
	auto int i, i2;
	static char *fsPtr;
#if (DK_ENABLE_STACK_TRACING == 1)
	#ifdef MCOS
   ptr += 3;
   #endif
#endif
	#asm
		ld hl, (sp+@sp+ptr)
		ex de, hl
		ld hl, (sp+@sp+ptr+2)
		xor a
		ld b, e
		ld e, d
		ld d, a
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, de
		ld d, l
		ld e, b
		ld l, h
		ld h, a  ;zero
		ld (sp+@sp+ptr+2), hl
		ex de, hl
		ld (sp+@sp+ptr), hl
	#endasm
	fsPtr = (char *) freeStacks;
	for(i = TOTAL_STACK_CNT-1; i >= 0; i--) {
		if((freeStacks[i]&0xfffff) == (ptr&0xfffff)) {
			i2 = i*sizeof(long)+sizeof(long)-1;
			fsPtr[i2] &= 0x7f;
			return TRUE;
		}
	}
	return FALSE;
}

/*** BeginHeader _ProgStkSwitch,	_BiosStkSwitch */
root void _ProgStkSwitch(long);
root void _BiosStkSwitch();
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_ProgStkSwitch                         <STACK.LIB>

SYNTAX: void _ProgStkSwitch(long newstack);

DESCRIPTION: Assembly function that switches between the BIOS stack and
the default program stack.  This function must be from the same function
(i.e., premain) as _BiosStkSwitch or else the result is unpredictable.
Also, the function that calls _ProgStkSwitch() should not have any auto
parameters since auto parameters in the calling function
will not be accessible after calling _ProgStkSwitch().

PARAMETER1: newstack: Physical address encoded as 0x00SSXXXX, where SS is the
new 8-bit stack segment register value and XXXX is the logical address
to the initial stack pointer value (i.e., top of the stack).

RETURN VALUE: None.

KEYWORDS: _Init_Stack, Alloc_Stack, premain
END _DESCRIPTION **********************************************************/
static int biossp, biossr;

#asm root
_ProgStkSwitch::
   xor a
   ld (dkInBiosStack),a
	pop iy 				; remove return address from bios stack & save
	pop hl 				; new sp value
	ld de, -4
	add hl, de
	#if _USER
		ioi	ld	a,(STACKSEG)
		ld		(biossr),a
	#endif
	pop bc 				; get the new STACKSEG value from c
	ld  a, c
	ld (biossp), sp 	; save the stack pointer
	ld sp,hl
	ioi ld (STACKSEG), a
	push iy 				; restore return address to program stack
	ret
#endasm


/* START _FUNCTION DESCRIPTION ********************************************
_BiosStkSwitch                         <STACK.LIB>

SYNTAX: void _BiosStkSwitch();

DESCRIPTION: Assembly function that switches back from the default program
stack to the BIOS stack.  This function must be from the same function
(i.e., premain) as _BiosStkSwitch or else the result is unpredictable.

RETURN VALUE: None.

KEYWORDS: _Init_Stack, Alloc_Stack, premain
END _DESCRIPTION **********************************************************/

#asm root
_BiosStkSwitch::
   ld a,1
   ld (dkInBiosStack),a
	pop hl
	#if _USER
		ld	a,(biossr)
		ioi	ld	(STACKSEG),a
	#endif
	ld sp, (biossp)   ; don't need to change since in data seg
	jp (hl)
#endasm

/*** BeginHeader */
#endif
/*** EndHeader */





