/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
// RabbitWeb Module version 1.05

/*** BeginHeader */
#ifndef __RWEB_SUPPORT_LIB
#define __RWEB_SUPPORT_LIB
/*** EndHeader */

/* START LIBRARY DESCRIPTION *********************************************
RWEB_SUPPORT.LIB

DESCRIPTION:
	Compiler generated data structures to support the http enhancements
   module.

END DESCRIPTION **********************************************************/

/*** BeginHeader */

#define __RWEB_SUPPORT_AVAILABLE

typedef (*_rweb_fcnptr) ();

enum SymbolType { T_CHAR = 1,   TINT = 2,   TUNSIGNED = 3,   TLONG = 4,   TULONG = 5,   TFLOAT = 7, TSTRING = 9};

struct _Web_Struct_Mem_List_Tag;

typedef union {
   int simple;  // Identifies simple type (int, char, long, etc) versus struct (simple>TSTRUCT)
   				 // If this value is >TSTRUCT then the ptr member should be used instead of simple
   struct _Web_Struct_Mem_List_Tag *ptr;  // pointer to a structure member definition array
} _Web_Var_Type;

typedef struct {	// Data structure to support 16 bit web selection values
	char* name;
   unsigned value;
} _Web_Select16;

typedef struct {	// Data structure to support 32 bit web selection values
   char* name;
   unsigned long value;
} _Web_Select32;

typedef union {  // Union to pointers of selection array (saves space)
	_Web_Select16 *ptr16;
   _Web_Select32 *ptr32;
} _Web_Select;

typedef struct {
	char* name;  // Name of the web variable (this name is only partial if the
   				 // web variable registered contains the selection operator)
   				 // The rest of the name is stored in the child information
                // (following the type pointer). For example,  if the web
                // variable webstr.y is registered then this name contains
                // "webstr." and the type field points at a list of *only one*
                // _Web_Struct_Mem_Info with the name "y". If "webstr" is
                // registered then the name is "webstr", and the type field
                // points to a list of all of webstr data members (recursively).
	void* valptr;  		// pointer to the actual 'C' variable
	_Web_Var_Type type;  // type of the web variable
	int* dims;  			// pointer to list of dimensions (upper bound).  dims is NULL if this webvar is not an array
	_rweb_fcnptr* guardptr; 	// array of guards
	_rweb_fcnptr* updateptr; 	// array of update functions
	char auth;  			// authentication bits
	unsigned groups; 		// group bits
	unsigned perm; 		// permission bits
	_Web_Select select; 	// Contains pointer to selection array if it exists
} _Web_Var_Info;

typedef struct {
   char *name;				// Name of data member
   int offset;          // Data members offset into the structure
   _Web_Var_Type type; 	// structure or array
   int* dims;           // Array of dimensions
} _Web_Struct_Mem_Info;

typedef struct _Web_Struct_Mem_List_Tag {
	int strsize; 					// size of the structure
	_Web_Struct_Mem_Info *ptr; // array of member information
} _Web_Struct_Mem_List;

extern _Web_Var_Info _web_var_info[];
extern char _web_update_entry_ary[];
extern unsigned _web_update_entry_ary_sz;

/*** EndHeader */

/*** BeginHeader */
#endif
/*** EndHeader */

