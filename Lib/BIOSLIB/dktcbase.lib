/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __DKTCBASE_LIB
#define __DKTCBASE_LIB
/*** EndHeader */

/*** BeginHeader dkInitDebugKernelComs, dkRegisterCallback, dkBuildResponse,
	  dkGetBuffer, dkReturnBuffer, dkSendPacket, dkCallbackHook, dkSendDone */
xmem void dkInitDebugKernelComs(void);
xmem void dkRegisterCallback(void);
root void dkBuildResponse(void);
xmem void dkGetBuffer(void);
root void dkReturnBuffer(void);
root void dkSendPacket(void);
extern long dkBufferPool;
extern int  dkRxQPtr;
extern unsigned int  dkCallbackHook;
extern char dkSendDone;
#define DK_MAX_TX_BUFFERS	5
#define DK_MAX_RX_BUFFERS	5


#define TC_DEBUG_RESET		0x0f
/*** EndHeader */

xmem void dkSetBuffers(void);
root void dkBIOSLevelCallback(int flags, char type, char subtype, int length, long buffer, long userdata);
long dkBufferPool;
int  dkRxQPtr;
unsigned int  dkCallbackHook;
char dkSendDone;

#asm xmem
dkInitDebugKernelComs::
	bool	hl
	ld		l,h
	ld		(dkCallbackHook),hl
	call	dkRegisterCallback

	ld		hl,TCState+[TCState]+RXBufferList; ix has pointer to buffer list
	ld		hl,(hl)
	ld		ix,hl
	ld		bc,sizeof(long)						; put sizeof buffer into bc
	ld		de,TC_TYPE_DEBUG						; debug offset into de
	mul												; offset is in bc
	add	ix,bc										; ix has addr of offset into buffer list
	ld		hl,ix										; move offset to hl
	ld		(dkRxQPtr),hl

	lcall	dkSetBuffers

	lret
#endasm

#asm xmem
dkRegisterCallback::
	; register the debug kernel callback
	ld		hl,TCState+[TCState]+CallbackList; hl has pointer to callback list
	ld		hl,(hl)									; deference to get base callback list addr
	ld		ix,hl										; move base addr to ix
	ld		bc,sizeof(int)							; put sizeof callback into bc
	ld		de,TC_TYPE_DEBUG						; debug offset into de
	mul												; offset is in hl
	add	ix,bc										; ix has addr of offset into callback list
	ld		hl,dkBIOSLevelCallback				; hl has address of callback
	ld		(ix),hl									; put callback address into list
	lret
#endasm

#asm xmem
dkSetBuffers::
; build rx buffer queue
	exx
	ld		b,DK_MAX_RX_BUFFERS			; get maximum number of receive buffers
__dk_sbrxloop:
	push	bc									; save djnz counter
	exx

	call	dkcGetSystemBuffer			; get sys buf into bc,de
	jr		nz,__dk_sbrxcont				; if no buf, continue

	ld		hl,(dkRxQPtr)
	call	dkReturnBuffer

__dk_sbrxcont:
	exx
	jr __decrementandjump
__jumptoloop:
	jp	__dk_sbrxloop
__decrementandjump:						; restore the b counter
	pop	bc
	djnz  __jumptoloop
	exx

; build rx buffer tx buffer queue
	bool	hl
	ld		l,h
	ld		(dkBufferPool),hl
	ld		(dkBufferPool+2),hl

	exx
	ld		b,DK_MAX_TX_BUFFERS			; get maximum number of transmit buffers
__dk_sbtxloop:
	push	bc									; save djnz counter
	exx

	call	dkcGetSystemBuffer			; get sys buf into bc,de

	jr		nz,__dk_sbtxcont				; if no buf, continue

	ld		hl,dkBufferPool
	call	dkReturnBuffer

__dk_sbtxcont:
	jr		__dk_sbtxcheckloop
__dk_sbtxdoloop:
	jp		__dk_sbtxloop
__dk_sbtxcheckloop:
	exx
	pop	bc									; restore the b counter
	djnz	__dk_sbtxdoloop
	exx

	lret
#endasm

#asm root
; expects -
; a : source xpc
; hl: pointer to root data buffer
; bc: length of data
; e : subtype of packet
dkBuildResponse::
	ex		af,af'
	ld		a,xpc
	push	af										; protect xpc
	ex		af,af'
	push	af										; a has xpc of source buffer

	exx											; save passed parameters
	lcall	dkGetBuffer							; get buffer for response
	jr		z,__dk_brbuf						; build response if buf available
	exx											; restore registers
	pop	af
	jr		__dk_brdone						; drop response - no buf available

__dk_brbuf:
	call 	dkcPhysicalToLogical				; get logical addr for buf
	ld		xpc,a									; move into window for buf
	ld		ix,hl									; xpc:ix points to the buffer

	ex		af,af'								; save dest xpc in af'
	pop	af
	ex		af,af'								; af = dest xpc, af' = src xpc

	push	bc										; save phys addr of buffer
	push	de										; save phys addr of buffer

	bool	hl										; clear hl
	ld		l,h
	ld		(ix+TC_HEADER_USERDATA),hl		; no user data
	ld		(ix+TC_HEADER_USERDATA+2),hl
	ld		(ix+TC_HEADER_FLAGS),hl			; no flags

	exx											; restore passed parameters
	ld		(ix+TC_HEADER_TYPE),TC_TYPE_DEBUG			; load type of packet
	ld		(ix+TC_HEADER_SUBTYPE),e		; load subtype of packet
	ld		(ix+TC_HEADER_LENGTH),c			; load length of packet
	ld		(ix+TC_HEADER_LENGTH+1),b		; load length of packet

	ld		de,TC_HEADER_RESERVE				; load header reserve length to de
	add	ix,de									; increment pointer past reserve

	ld		a,b  									; a had xpc, load b into a
   or		c										; or b with c
   jr		z,__dk_brsendpacket				; if zero, no copy nec
   ld		a,xpc                         ; restore a

__dk_brcopyloop:
	ex		af,af'								; af = source xpc, af' = dest xpc
	ld		xpc,a									; restore source xpc
	ld		e,(hl)								; get source bye
	ex		af,af'								; get saved dest xpc
	ld		xpc,a									; restore dest xpc
	ld		(ix),e								; save byte at dest
	inc	ix										; increment dest ptr
	inc	hl										; increment source ptr
	dec	bc										; decrement count
	ld		a,b
	or		c										; check if counter has gone to 0
	ld		a,xpc									; save dest xpc
	jr		nz,__dk_brcopyloop				; jump if not done copying

__dk_brsendpacket:
	pop	de										; restore physical address
	pop	bc										; restore physical address

	xor	a
   ld		(dkSendDone),a
	call	dkSendPacket						; send the packet
__dk_brdone:
	pop	af
	ld		xpc,a									; restore xpc

	ret
#endasm

#asm xmem
; Use the tc system buffers -
; Get a buffer into bc,de if one is available
; z is set on success, nz if no buffer was available
dkGetBuffer::
__dk_gbagain:
	ld		hl,dkBufferPool
	call	dkcGetBuffer
;	jr		nz,__dk_gbagain
	lret
#endasm

#asm root
; Returns a system buffer to the available pool
; Assumes:
;	 bc,de == the buffer to re-queue
;   hl == root pointer to queue
;	 CurQPtr == root pointer to queue

dkReturnBuffer::
	ld		a,xpc
	push	af
	push	hl
	call	dkcPhysicalToLogical
	ld		xpc,a
	ld		ix,hl
	ld		hl,TC_SYSBUF_SIZE-TC_HEADER_RESERVE		; store the length of the buffer
	ld		(ix+TC_HEADER_LENGTH),hl
	bool	hl
	ld		l,h
	ld		(ix+TC_HEADER_FLAGS),hl

	pop	hl
	call	dkcQueueBuffer
	pop 	af
	ld		xpc,a
	ret

dkSendPacket::
	call dkcSystemSendPacket
	ret
#endasm

unsigned int dkSUVal;

#asm root

dkBIOSLevelCallback::
	ld		hl,(sp+2)					; get the flags

   bit	0,l							; check for TC_RECEIVE set
	jr		nz,__dk_cbrx
	bit	1,l							; check for TC_TXDONE set
	jr		nz,__dk_cbtx
	; error - shouldn't ever get here!!
	jp		__dk_blcbdone

__dk_cbtx:
	; buffer has been transmitted - get the buffer address
	; off of the stack and return it
	ld		hl,(sp+10)						; get the high 16 bits of the buffer's address
	ex		de,hl								; de has high 16 bits
	ld		hl,(sp+12)						; get low 16 bits of buffer's address
	ld		b,h
	ld		c,l								; bc,de has the buffer's address

	ld		hl,dkBufferPool
	call	dkReturnBuffer

	ld		hl,(sp+6)						; get the subtype
	ld		a,TC_ACK
	cpl
	and	l									; subtype in a (ack masked out)
   cp		TC_DEBUG_RESET					; check for reset ack
   jr		nz,__dk_cbnotreset

#if _SYSTEM
	xor	a
   inc	a
   ld		(dkSendDone),a

	#if _RK_DEBUG_SYSTEM_
      ipset 3
      xor   a
      ioi   ld (STKCR),a         ; Remove stack limit checking
      jp    dkInit
	#endif
#endif

#if __RABBITSYS == 0
	#if RAM_COMPILE
   	ld		a,1
      ld		(dkcstartuserprog),a
		jp		InRAMNow
	#else
		jp		dkInit
	#endif
#endif
__dk_cbnotreset:
	jp		__dk_blcbdone

__dk_cbrx:
;      0              2           4          6            8            10           14
; int  dkCallback(int flags, char type, char subtype, int length, long buffer, long userdata);
	ld		hl,(sp+10)						; get high 16 bits of buffer's address
	ex		de,hl								; de has high 16 bits
	ld		hl,(sp+12)						; get low 16 bits of buffer's address
	ld		b,h
	ld		c,l								; bc,de has the system-buffer's address
	call	dkcPhysicalToLogical			; a:hl has logical address after return
	push	hl									; push buffer offset onto stack
   bool	hl
   ld		l,a
   push	hl									; push xpc value onto stack

   ld		hl,(sp+12)						; get length into hl
   push	hl									; push length onto stack

	ld		hl,(sp+12)						; get the subtype
	ld		a,TC_ACK
	cpl
	and	l									; subtype in a (ack masked out)
	bool	hl									; clear h
	ld		l,a								; subtype in l (ack masked out)
   push	hl									; push subtype onto stack

;      0               2            4           6        8
; void dkCallback(char subtype, int length, int xpc, int buffer);
;   call	dkCallback
#if _SYSTEM
   push	su
   push	su
   pop	hl
   ld		(dkSUVal),hl
#endif
	xor	a
   ld		hl,(dkCallbackHook)
   or		h
   or		l
   jr		z,__dk_blcbnocallback
   ld		ix,__dk_blcbreturn
   push	ix
#if _SYSTEM
   ; disable writes to system space
	ld		a, 1
   ioi	ld (WPCR), a
   setusr
#endif
   jp		(hl)

__dk_blcbnocallback:
	pop	hl									; get subtype into hl
	ld		a,TC_NAK
	or		l
	ld		e,a
	ld		bc,0
	call	dkBuildResponse
   add	sp,6
   jr		__dk_blcbdone


__dk_blcbreturn:
#if _SYSTEM
	ld		hl,(dkSUVal)
   push	hl
	inc	sp
   pop	su
   xor 	a
   ioi	ld (WPCR), a
#endif
	ld		hl,(sp+18)						; get the high 16 bits of the buffer's address
	ex		de,hl								; de has high 16 bits
	ld		hl,(sp+20)						; get low 16 bits of buffer's address
	ld		b,h
	ld		c,l
	ld		hl,(sp+18)						; get the high 16 bits of the buffer's address
	ex		de,hl								; de has high 16 bits
	ld		hl,(sp+20)						; get low 16 bits of buffer's address
	ld		b,h
	ld		c,l
   call	bioshitwd
	add	sp,8
  	ld		hl,(dkRxQPtr)
	call	dkReturnBuffer

__dk_blcbdone:
	bool	hl
	ld		l,h								; return (int)0
	ret

#endasm

/*** BeginHeader */
#endif
/*** EndHeader */

