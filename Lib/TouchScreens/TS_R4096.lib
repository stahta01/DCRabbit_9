/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
TS_R4096.LIB

DESCRIPTION: Touchscreen low-level driver.

END DESCRIPTION **********************************************************/

/*** BeginHeader */
#ifndef __TS_R4096_LIB
#define __TS_R4096_LIB
/*** EndHeader */

/*** BeginHeader  */
#define BTNRELEASE 0x80000000L
/*** EndHeader */


/*** BeginHeader TsCalib, _adcCalibTS*/
int TsCalib(int x1, int y1, int x2, int y2);

typedef struct
{
	int x_offset;
	int y_offset;
	float x_gainfactor;
	float y_gainfactor;
}tc_cal;

#define CALIB_TS    CALIB_MILLIAMP+sizeof(_adcCalibmAMP)
extern tc_cal _adcCalibTS;

#ifndef TSCAL_MINIMUM
#define TSCAL_MINIMUM 600
#endif
#ifndef TSCAL_MAXIMUM
#define TSCAL_MAXIMUM 3200
#endif
/*** EndHeader */

tc_cal _adcCalibTS;

/* START FUNCTION DESCRIPTION ********************************************
TsCalib                       <TS_R4096.LIB>

SYNTAX:			int TsCalib(int x1, int y1, int x2, int y2);

DESCRIPTION:	Calibrates the touchscreen as a linear function using
               the two sets of x,y coordinate's provided. Gainfactor
               and offset constants are calculated and placed into
               global table _adcCalibTS. This function is non-reentrant.

PARAMETER1:		X-coordinate of upper-left hand corner of touchscreen.
PARAMETER2:		Y-coordinate of upper-left hand corner of touchscreen.
PARAMETER1:		X-coordinate of lower-right hand corner of touchscreen.
PARAMETER2:		Y-coordinate of lower-right hand corner of touchscreen.

RETURN VALUE:	0, if sucessful.
					-1, if not able to make calibration constants.

SEE ALSO:		TsCalibEERd, TsCalibEEWr, TsXYvector, brdInit,

END DESCRIPTION **********************************************************/

nodebug
int TsCalib(int x1, int y1, int x2, int y2)
{
	if(x1 > TSCAL_MINIMUM ||  y1 > TSCAL_MINIMUM)
		return -1;
	if(x2 < TSCAL_MAXIMUM || y2 < TSCAL_MAXIMUM)
		return -1;
	_adcCalibTS.x_offset = x1;
	_adcCalibTS.y_offset = y1;

	_adcCalibTS.x_gainfactor = (float)LCD_XS/(float)(x2-x1);
	_adcCalibTS.y_gainfactor = (float)LCD_YS/(float)(y2-y1);

	return 0;
}


/*** BeginHeader TsCalibEERd */
int TsCalibEERd( void );
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
TsCalibEERd                   <TS_R4096.LIB>

SYNTAX:			int TsCalibEERd( void );

DESCRIPTION:	Reads the calibration constants, gainfactor and offset,
               from simulated eeprom in flash, located at the top 1K
               of the reserved UserBlock memory area. This function is
               non-reentrant.

               See the user manual for the size of the UserBlock area.

PARAMETER1:		None.

RETURN VALUE:	 0, If successful.
					-1, invalid address or range.

SEE ALSO:		TsCalib, TsCalibEEWr, TsXYvector, brdInit

END DESCRIPTION **********************************************************/

nodebug
int TsCalibEERd( void )
{
	auto int	status;

	// read calibration constants from flash
	status = readUserBlock(&_adcCalibTS, CALIB_TS, sizeof(_adcCalibTS));
	return(status);
}

/*** BeginHeader TsCalibEEWr */
int TsCalibEEWr( void );
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
TsCalibEEWr                   <TS_R4096.LIB>

SYNTAX:			TsCalibEEWr( void );

DESCRIPTION:	Writes the calibration constants, gainfactor and offset,
					to simulated eeprom in flash, located at the top 1K of
					the reserved UserBlock memory area. This function is non-
               reentrant.

               See the user manual for the size of the UserBlock area.

PARAMETER1:		None.

RETURN VALUE:	 0, successful write to simulated eeprom.
					-1, invalid address or range.

SEE ALSO:		TsCalib, TsCalibEERd, TsXYvector, brdInit

END DESCRIPTION **********************************************************/

nodebug
int TsCalibEEWr( void )
{
	auto int	status;

	// write calibration constants to flash
	status = writeUserBlock(CALIB_TS, &_adcCalibTS, sizeof(_adcCalibTS));
	return(status);
}


/*** Beginheader _adcTouchScreen */
useix int _adcTouchScreen( int cmd );
/*** endheader */

/* START _FUNCTION DESCRIPTION ********************************************
_adcTouchScreen		<TS_R4096.LIB>

SYNTAX:	      int _adcTouchScreen( int cmd );

DESCRIPTION:  	Low-level driver to read the x,y coordinate's of the
               touchscreen. This function is non-reentrant.

PARAMETER1:    The cmd byte to be send to the ADS7870 touchscreen ADC
               converter chip. Please refer to the Burr-Brown ADS7870
               data sheet for complete details.

RETURN VALUE:	Value = 0 - 4095

END DESCRIPTION **********************************************************/

nodebug
useix int _adcTouchScreen( int cmd )
{
#asm
	;---------------------------------------------------------------------
	;	Send CMD to the touchscreen ADC to get the x,y coordinate's.
	;---------------------------------------------------------------------
	ld    de, PDDR
	ld    a, (PDDRShadow)
	res   3,a
	ioi	ld (de),a				;Un-assert Chip Select on ADC
	set	3,a						;Assert Chip Select
	ioi	ld (de),a				;
	ld    (PDDRShadow),a			;Update shadow register

	push  ip							; save off IP state
	ipset	1							; set interrupt priority to level 1
	ld		b,8
	ld    l,(ix+cmd)
.cmdcontinue:
	ld    de, PEDR
	ld    a, (PEDRShadow)
	res	0,a						;set CLK bit low
	ioi	ld (de),a				;CLK SDI data bit into AD
	ld    (PEDRShadow),a

	ld		a,l
	and   a,0x80
	cp    a,0x80
	jr		nz,.cmdbitlow

.cmdbithigh:
	ld    a,(PEDRShadow)
	set   1,a
	ioi   ld (de),a
	ld    (PEDRShadow),a
	jr    .cmdCLK

.cmdbitlow:
	ld    a,(PEDRShadow)
	res   1,a
	ioi   ld (de),a
	ld    (PEDRShadow),a

.cmdCLK:
	ld    de, PEDR
	ld    a, (PEDRShadow)
	set	0,a						;set CLK bit High
	ioi	ld (de),a				;CLK SDI data bit into AD
	ld    (PEDRShadow),a
	sla   l
	djnz	.cmdcontinue
	pop	ip
	WAIT_50usX(1);


	;---------------------------------------------------------------------
	;	Get the x,y coordinate's from the touchscreen ADC.
	;---------------------------------------------------------------------
	ld		de,PEDR
	ld    a,(PEDRShadow)
	res	1,a
	ioi	ld (de),a
	ld		b,12
	ld		iy,0x0000
	push  ip							; save off IP state
	ipset	1							; set interrupt priority to level 1

.rd_touchscreen:
	ld    de, PEDR
	ld    a, (PEDRShadow)
	res	0,a						;set CLK bit low
	ioi	ld (de),a				;CLK SDI data bit into AD
	ld    (PEDRShadow),a
	ld    de, PBDR
	ioi   ld a,(de)
	and   a,0x20
	rra
	rra
	rra
	rra
	rra
	ld    d,0
	ld    e,a
	ld    hl,iy
	or		hl,de
	ex		de,hl
	rl		de
	ex		de,hl
	ld    iy,hl
	ld    de,PEDR
	ld    a,(PEDRShadow)
	set	0,a						;set CLK bit low
	ioi	ld (de),a				;CLK SDI data bit into AD
	ld    (PEDRShadow),a
	djnz	.rd_touchscreen

	;---------------------------------------------------------------------
	;	Un-assert chip select and preset the CLK line low, for the next
	;  conversion cycle.
	;---------------------------------------------------------------------
	ld    de, PDDR
	ld    a, (PDDRShadow)
	res   3,a
	ioi	ld (de),a				;Un-assert Chip Select on ADC
	ld    (PDDRShadow),a			;Update shadow register
	ld    de, PEDR
	ld    a, (PEDRShadow)
	res	0,a						;set CLK bit low
	ioi	ld (de),a				;CLK SDI data bit into AD
	ld    (PEDRShadow),a
	ld		hl,iy
	pop	ip
#endasm
}

/*** Beginheader TsXYvector */
void TsXYvector(int *xkey, int *ykey, int mode);
#define RAW_MODE 0
#define CAL_MODE 1
/*** endheader */

/* START FUNCTION DESCRIPTION ********************************************
TsXYvector			<TS_R4096.LIB>

SYNTAX:	      void TsXYvector(int *xkey, int *ykey, int mode);

DESCRIPTION:  	Reads the current x, y coordinate's of the touchscreen.
               This function is non-reentrant.

PARAMETER1:    Pointer to the X-coordinate value.
PARAMETER2:    Pointer to the Y-coordinate value.
PARAMETER3:    Mode of operation:
					0 (RAW_MODE) = Return touchscreen x, y coordinate's raw
					               data value.
					1 (CAL_MODE) = Return touchscreen x, y coordinate's as
					               normalized data values to match the LCD
					               display resolution.
RETURN VALUE:	None.

SEE ALSO:		TsActive, TsScanState, TsXYBuffer, brdInit

END DESCRIPTION **********************************************************/

nodebug
void TsXYvector(int *xkey, int *ykey, int mode)
{

	#GLOBAL_INIT {__brdInitFlag = FALSE;}

	if(!__brdInitFlag)
	{
		// The brdInit function hasn't been executed as of yet
		exception(-ERR_BADPARAMETER);
		exit(-ERR_BADPARAMETER);
	}

	*xkey = _adcTouchScreen(0xD0);
	*xkey = 0x0fff & *xkey;

	*ykey = _adcTouchScreen(0x90);
	*ykey = 0x0fff & *ykey;

	 if(mode == CAL_MODE)
	{
		*xkey -= _adcCalibTS.x_offset;
		*ykey -= _adcCalibTS.y_offset;

		*xkey =  (int) (*xkey*_adcCalibTS.x_gainfactor);
		*ykey =  (int) (*ykey*_adcCalibTS.y_gainfactor);
		if(*xkey < 0)
			*xkey = 0;
		if(*ykey < 0)
			*ykey = 0;

		if(*ykey > LCD_YS)
			*ykey = LCD_YS;

		if(*xkey > LCD_XS)
			*xkey = LCD_XS;
	}
}

/*** BeginHeader TsActive */
int TsActive( void );
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
TsActive				<TS_R4096.LIB>

SYNTAX: 			int TsActive( void );

DESCRIPTION:   This function returns the status of the touchscreen. This
					function is non-reentrant.

PARAMETER:		None.

RETURN VALUE:  0 = Touchscreen not being pressed.
               1 = Touchscreen being pressed.

SEE ALSO:		TsXYvector, TsScanState, TsXYBuffer, brdInit

END DESCRIPTION **********************************************************/

nodebug
int TsActive( void )
{
	#asm
		ld   de,PBDR
		ioi  ld a,(de)
		ld   l,0x10
		and  a,l
		ld   l,a
		ld   h,0x00
	#endasm
}


/*** BeginHeader TsScanState, btnpressed */
void TsScanState( void );

#ifndef	TS_ASSERT
#define  TS_ASSERT	50
#endif

#ifndef	TS_RELEASE
#define  TS_RELEASE	50
#endif

#ifndef	TS_RECHECK
#define  TS_RECHECK	2
#endif

#ifndef TS_PREVENTRACE
#define TS_PREVENTRACE   200
#endif

extern int btnpressed;
/*** EndHeader */

int btnpressed;

/* START FUNCTION DESCRIPTION ********************************************
TsScanState 		<TS_R4096.LIB>

SYNTAX: 			void TsScanState( void )

DESCRIPTION: 	This function processes the current state of the touch
               screen, the results then can be read with the TsXYBuffer
               function, which will return one of the following:
               1. Current x,y location of where the touchscreen is
                  being pressed.
               2. Value indicating that the touchscreen was released.
               3. Value of -1 to indicate no activity has occurred.

					This function is non-reentrant.

               Note: When this function is called the information
                     should processed before calling this function
                     again otherwise the snapshot of touchscreen
                     information will be lost.

PARAMETER:		None.

RETURN VALUE:  None.

SEE ALSO:		TsXYvector, TsActive, TsXYBuffer, brdInit

END DESCRIPTION **********************************************************/

nodebug
void TsScanState( void )
{
	static int StatusByte;
	static unsigned long debounce_period;
	static int ScanState;
	static int TS_StartLow;

	#GLOBAL_INIT{TS_StartLow = FALSE;}
	#GLOBAL_INIT{ScanState = 0;}
	#GLOBAL_INIT{__brdInitFlag = FALSE;}
	#GLOBAL_INIT{btnpressed  = 0;}

	if(!__brdInitFlag)
	{
		// The brdInit function hasn't been executed as of yet
		exception(-ERR_BADPARAMETER);
		exit(-ERR_BADPARAMETER);
	}

	// brdInit function will set the flag active to meet ADC power-on delay
	if(__InitTSpower)
	{
		while(!((long) (MS_TIMER-__anaPWRDelay) >= 0 ));
		_adcTouchScreen(0xD0);
		_adcTouchScreen(0x90);
		__InitTSpower = 0;
	}

	switch(ScanState)
	{
		case 0:
			if(!(StatusByte = TsActive()))
			{
				TS_StartLow  = TRUE;
			}
			if (TS_StartLow && StatusByte && !btnpressed)
			{
				ScanState = 1;
				debounce_period = MS_TIMER + TS_ASSERT;
			}
			else if(!StatusByte && btnpressed)
			{
				ScanState = 3;
			}
			break;

		case 1:
			if((long) (MS_TIMER-debounce_period) >= 0 )
			{
				ScanState = 2;
			}
			break;

		case 2:
			if(_TsChangeState(!BTNRELEASE))
			{
				ScanState = 0;
				if(btnpressed)
					TS_StartLow = FALSE;
			}
			break;

		case 3:
			_TsChangeState(BTNRELEASE);
			debounce_period = MS_TIMER + TS_RELEASE;
			ScanState = 4;
			TS_StartLow = TRUE;
			break;

		case 4:
			if((long) (MS_TIMER-debounce_period) >= 0 )
			{
				ScanState = 0;
			}
			break;

		default:
			ScanState = 0;
			TS_StartLow = FALSE;
			break;
	}
}

/*** BeginHeader _TsChangeState, btnSnapshot */
int _TsChangeState( long btnState );
extern int btnSnapshot;
/*** EndHeader */

int btnSnapshot;

/* START _FUNCTION DESCRIPTION ********************************************
_TsChangeState				<TS_R4096.LIB>

SYNTAX: 			int _TsChangeState(long btnState);

DESCRIPTION: 	Support function for the TsScanState function to read the
               touchscreen.

PARAMETER: 	   Value to indicate what state the TsScanState function
               is processing.

RETURN VALUE:  0 = State machine not finished.
               1 = State machine finished.

END DESCRIPTION **********************************************************/

nodebug
int _TsChangeState( long btnState ) {

	auto char valid, executionDone;
	static int xkey1, ykey1, xkey2, ykey2;
	static unsigned long debounce_period;
	static int ts_counter;
	static int state;

	#GLOBAL_INIT{btnSnapshot = 0;
	             state       = 0;
	             ts_counter  = 0;}

	executionDone = TRUE;
	BtnOneKeyBuf  = -1;
	if(btnState == BTNRELEASE)
	{
		BtnOneKeyBuf = BTNRELEASE;
		btnpressed = 0;
		btnSnapshot = 1;
		state = 0;
		executionDone = TRUE;
	}
	else
	{
		switch(state)
		{
			case 0:
				if(TsActive())
				{
					TsXYvector(&xkey1, &ykey1, CAL_MODE);
					debounce_period = MS_TIMER + TS_RECHECK;
					state = 1;
					executionDone = FALSE;
				}
				break;

			case 1:
				if((long) (MS_TIMER-debounce_period) >= 0 )
				{
					executionDone = FALSE;
					state = 2;
				}
				break;

			case 2:
				if(TsActive())
				{
			 		TsXYvector(&xkey2, &ykey2, CAL_MODE);
					if(xkey2 >= (xkey1 - 10) && xkey2 <= (xkey1 + 10) &&
			  		   ykey2 >= (ykey1 - 10) && ykey2 <= (ykey1 + 10))
				 	{
				 		ts_counter++;
						if(ts_counter > 10)
						{
							xkey1 = (xkey1+xkey2)/2;
							ykey1 = (ykey1+ykey2)/2;
							BtnOneKeyBuf = ((long)xkey1<<16) | ykey1;
							btnpressed = 1;
							btnSnapshot = 1;
							ts_counter = 0;
							state = 0;
							executionDone = TRUE;
						}
						else
						{
							debounce_period = MS_TIMER + TS_RECHECK;
							executionDone = FALSE;
						}
					}
					else
					{
						executionDone = TRUE;
						ts_counter = 0;
						state = 0;
					}
				}
				else
				{
					executionDone = TRUE;
					ts_counter = 0;
					state = 0;
				}
				break;

			default:
				executionDone = TRUE;
				ts_counter = 0;
				state = 0;
				break;
		}
	}
	return(executionDone);
}

/*** BeginHeader TsXYBuffer, BtnOneKeyBuf */
long TsXYBuffer( void );
extern long BtnOneKeyBuf;
/*** EndHeader */

long BtnOneKeyBuf;

/* START FUNCTION DESCRIPTION ********************************************
TsXYBuffer					<TS_R4096.LIB>

SYNTAX: 			long TsXYBuffer( void );

DESCRIPTION: 	This function returns either the x,y coordinate's or the
               touchscreen BTN_RELEASE status code which was processed
               by the TsScanState function. This function is non-
               reentrant.

PARAMETERS:    None.

RETURN VALUE:  - Current x,y location of where the touchscreen is
                 being pressed. The X-coordinate is returned in the
                 MSB, and Y-coordinate is returned in the LSB of the
                 long integer value.

               - BTNRELEASE (0x80000000L) indicating the touchscreen
                 was released.

               - Value of -1 to indicate no activity has occurred.

SEE ALSO:		TsXYvector, TsActive, TsScanState, brdInit

END DESCRIPTION **********************************************************/

nodebug
long TsXYBuffer( void )
{
	auto long tmp;

	#GLOBAL_INIT{BtnOneKeyBuf = -1;}

	tmp = BtnOneKeyBuf;
	BtnOneKeyBuf = -1;
	return tmp;
}

/*** BeginHeader */
#endif
/*** EndHeader */