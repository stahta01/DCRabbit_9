/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************

Set of library functions for use with  touchscreen controllers.


USER CONFIGURABLE MACROS:
-------------------------------------------------------------------------
BTN_USER_AMOUNT	100L	Maximum amount of user definable buttons
BTN_MSG_SIZE		100L	Maximum Message length allowable.
BTN_TEXT_SIZE		50L	Maximum Text length to associate with a button

FUNCTION LISTING:
-------------------------------------------------------------------------
btnInit				initialization routine, must be called once in app.
btnRecall			Recalls the data of a stored button
btnStore				Stores the data of a button
btnCreateText		Creates a button with text and stores it
btnCreateBitmap	Creates a button with a Bitmap and stores it
btnDisplayText		Displays a centered multiline text string.
btnClearRegion		Clears a region of the LCD
btnMsgBox			Displays a Message box.
btnDisplay			Displays a button
btnDisplayLevel	Displays a number of button associated with a Level
btnClear				Clears a button from the LCD
btnClearLevel		Clears a number of buttons associated with a Level.
btnAttributes		Sets the button attributes (RepeatEnable, buzzerEnable)

END LIBRARY DESCRIPTION **************************************************/

/*** BeginHeader */
	#ifndef	__GLTOUCHSCREEN_LIB
		#define	__GLTOUCHSCREEN_LIB
/*** EndHeader */

/*** BeginHeader 	BtnData */

#define	BTN_SUCCESS		1
#define	BTN_PENDING		0
#define	BTN_FAILURE		-1
#define	BTN_ENABLE		1
#define	BTN_DISABLE		0
#define	BTN_USER_AMOUNT	100L
#define	BTN_TEXTSIZE		50L
#define	BTN_MSG_SIZE		150L
#define	BTN_TOP			2				// Top Pixel border size
#define	BTN_RIGHT		4				// Right Pixel border size
#define	BTN_BOTTOM		4				// Bottom Pixel border size
#define	BTN_LEFT			2				// left pixel border size
#define	BTN_FLG_FRAME	BtnData.Flags & 1
#define	BTN_FLG_BEEP	BtnData.Flags & 2
#define	BTN_FLG_BMP		BtnData.Flags & 4
#define	BTN_SET_FRAME	BtnData.Flags =  BtnData.Flags | 1
#define	BTN_SET_BEEP	BtnData.Flags =  BtnData.Flags | 2
#define	BTN_SET_BMP		BtnData.Flags =  BtnData.Flags | 4
#define	BTN_RES_FRAME	BtnData.Flags =  BtnData.Flags & 0xFE
#define	BTN_RES_BEEP	BtnData.Flags =  BtnData.Flags & 0xFD
#define  BTN_RES_BMP		BtnData.Flags =  BtnData.Flags & 0xFB

#define	BTN_ALL_L		(char)0xFA
#define	BTN_FRAME_WIDTH	20
#define	BTN_FRAME_HEIGHT	15
typedef char kpStateType;
#define kpSaveState(x) x
#define kpRestoreState(x) x

typedef	struct
{
	int	BtnID;
	int	xStart;
	int	yStart;
	int	xSize;
	int	ySize;
	int	xActive;
	int   yActive;
	char	Flags;
	char	Level;
	byte	Enable;
	fontInfo *bFont;
	byte	Text[BTN_TEXTSIZE];
	unsigned long bmpPtr;
	int	bmpWidth;
	int	bmpHeight;
	int   InitRepeatDelay;
	int   RepeatDelay;
	char	Set;
	char	LastBtn;
}	_BtnData;

extern	_BtnData			BtnData;

/*** EndHeader */

_BtnData			BtnData;


/*** BeginHeader BtnFrameNw, BtnFrameNe, BtnFrameSw, BtnFrameSe */

extern unsigned long BtnFrameNw;
extern unsigned long BtnFrameNe;
extern unsigned long BtnFrameSw;
extern unsigned long BtnFrameSe;

/*** EndHeader */

/*
Automatic output from Font Converter
bitmap file is nwbutt.bmp.
Oval North West button corner

bfSize = 122
horizontal size is 20 pixels.
vertical size is 15 pixels.
*/
xdata BtnFrameNw {
'\x03','\xff','\xff',
'\x0f','\xff','\xff',
'\x1c','\x00','\x00',
'\x30','\x00','\x00',
'\x60','\x00','\x00',
'\x60','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00'
}; /* end of char *bitMap */

/*
Automatic output from Font Converter
bitmap file is nebutt.bmp.
Oval North East button corner
bfSize = 122
horizontal size is 20 pixels.
vertical size is 15 pixels.
*/
xdata BtnFrameNe {
'\xff','\xfc','\x00',
'\xff','\xff','\x00',
'\x00','\x07','\x80',
'\x00','\x03','\xc0',
'\x00','\x01','\xe0',
'\x00','\x01','\xe0',
'\x00','\x01','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0'
}; /* end of char *bitMap */

/*
Automatic output from Font Converter
bitmap file is swbutt.bmp.
Oval South West button corner

bfSize = 122
horizontal size is 20 pixels.
vertical size is 15 pixels.
*/
xdata BtnFrameSw {
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xc0','\x00','\x00',
'\xe0','\x00','\x00',
'\x70','\x00','\x00',
'\x7e','\x00','\x00',
'\x3f','\xff','\xf0',
'\x1f','\xff','\xf0',
'\x0f','\xff','\xf0',
'\x03','\xff','\xf0'
}; /* end of char *bitMap */

/*
Automatic output from Font Converter
bitmap file is sebutt.bmp.
Oval South East button corner

bfSize = 122
horizontal size is 20 pixels.
vertical size is 15 pixels.
*/
xdata BtnFrameSe {
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x00','\xf0',
'\x00','\x01','\xf0',
'\x00','\x01','\xe0',
'\x00','\x07','\xe0',
'\xff','\xff','\xc0',
'\xff','\xff','\x80',
'\xff','\xff','\x00',
'\xff','\xfc','\x00'
}; /* end of char *bitMap */

/*** BeginHeader btnInit */
unsigned long	btnInit (int MaxButtons);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnInit					<GLTOUCHSCREEN.LIB>

SYNTAX:			unsigned long	btnInit (int MaxButtons);

DESCRIPTION:	Initialization routine for the gltouchscreen.lib
					functions. This function will allocate xmem sram
					for storage of the btn parameters.

PARAMETER1:		The Number of buttons to initialize.

RETURN VALUE:	The unsigned long memory location of the BtnData Area.

SEE ALSO:		btnCreateText, btnCreateBitmap, btnRecall, btnStore
					btnDisplay, btnDisplayLevel, btnClear, btnClearLevel,
					btnAttributes, btnMsgBox, btnDisplayText, btnClearRegion.
END  DESCRIPTION *********************************************************/

nodebug
unsigned long btnInit(int MaxButtons)
{
	auto int	index;
	static unsigned long xmemPtr;
	xmemPtr	= xalloc(((long)MaxButtons * (long)sizeof(BtnData) ) );
	memset(&BtnData,0,sizeof(BtnData));
	BtnData.LastBtn = MaxButtons - 1;
	for (index = 0 ; index < MaxButtons ; index++)
	{
		btnStore(xmemPtr,index);
	}
	return xmemPtr;
}


/*** BeginHeader btnStore */
int btnStore (unsigned long xmemPtr , int BtnID);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnStore								<GLTOUCHSCREEN.LIB>

SYNTAX:			int btnStore (unsigned long xmemPtr , int BtnID);

DESCRIPTION:	Stores a btnData structure value in xmem.  This is normally
					  called by btnCreateText, or btnCreateBmp.

PARAMETER1:		Xmem pointer to array of button descriptors.
PARAMETER2:		Btn ID number to store the structure as.
RETURN VALUE:	1 when completed.

SEE ALSO:		btnRecall, btnInit, btnCreateText, btnCreateBitmap

END  DESCRIPTION *********************************************************/

nodebug
int btnStore(unsigned long xmemPtr, int BtnID)
{

	auto int result;
	result = root2xmem( 	xmemPtr + ( BtnID * sizeof( BtnData ) ),
								&BtnData,
								sizeof( BtnData ) );
	if (!result) return BTN_SUCCESS;
	else return BTN_FAILURE;
}

/*** BeginHeader btnRecall */
int	btnRecall (unsigned long xmemPtr, int BtnID);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnRecall					<GLTOUCHSCREEN.LIB>

SYNTAX:			int	btnRecall (unsigned long xmemPtr, int BtnID);

DESCRIPTION:	Retrieves a btnData structure value from xmem.  This is
					  normally called by the other functions as needed.

PARAMETER1:		Xmem pointer to array of button descriptors.
PARAMETER2:		Btn ID number to retrieve out of xmem.

RETURN VALUE:	1 when completed.

SEE ALSO:		btnStore, btnInit, btnDisplay, btnDisplayLevel, btnClear,
					btnClearLevel

END  DESCRIPTION *********************************************************/

nodebug
int btnRecall(unsigned long xmemPtr, int BtnID)
{
	auto int result;
	result = xmem2root( 	&BtnData,
								xmemPtr + ( BtnID * sizeof( BtnData ) ),
								sizeof( BtnData ) );

	if (!result) return BTN_SUCCESS;
	else	return BTN_FAILURE;
}

/*** BeginHeader btnCreateText */
int btnCreateText (unsigned long xmemPtr,int BtnID, int xStart,int yStart,
						 int xSize, int ySize,	char Attribs, char Level,
						 fontInfo *bFont, char *Text);

/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnCreateText				<GLTOUCHSCREEN.LIB>

SYNTAX:			int btnCreateText (unsigned long xmemPtr, int BtnID,
											 int xStart,	int yStart,int xSize,
											 int ySize,	char Attribs, char Level,
											 fontInfo *bFont, char *Text);

DESCRIPTION:	Creates a button with a Text Label.

PARAMETER1:		Xmem pointer to array of button descriptors.
PARAMETER2:		The Btn ID number of the button to create.
PARAMETER3:		Starting horizontal pixel coordinate.
PARAMETER4:		Starting vertical pixel coordinate.
PARAMETER5:		Horizontal size of the button.
PARAMETER6:		Vertical size of the button.
PARAMETER7:		Button Attributes:
						bit 0: --> 1 = oval shaped, 0 = square shaped.
						bit 1 to 7 (reserved).
PARAMETER8:		The Level to associate the button with.  (Buttons
					with the same level can be displayed together with
					the function btnDisplayLevel, or removed together
					with the function btnClearLevel.
PARAMETER9:		Font descriptor.
PARAMETER10:	Text to display centered in the button.

RETURN VALUE:	1 when completed.

NOTE:				The text displayed can be multiline by inserting
					a '\n' within the text. for example.

					"Hello\nFrom\nZworld\nEngineering"
					will produce
					 ---------------
					 |	   Hello		|
					 |	   from	  	|
					 |	  Zworld  	|
					 | Engineering |
					 ---------------

SEE ALSO:		btnCreateBitmap, btnInit, btnDisplay, btnDisplayLevel,
					btnClear, btnClearLevel

END  DESCRIPTION *********************************************************/

nodebug
int btnCreateText(unsigned long xmemPtr, int BtnID, int xStart,int yStart,
					   int xSize, int ySize,	char Attribs, char Level,
						fontInfo *bFont, char *Text)

{
	BtnData.BtnID 			= BtnID;
	BtnData.xStart			= xStart;
	BtnData.yStart			= yStart;
	BtnData.xSize			= xSize;
	BtnData.ySize			= ySize;
	BtnData.xActive		= xSize - BTN_RIGHT;
	BtnData.yActive		= ySize - BTN_BOTTOM;
	if (Attribs & 1)		BTN_SET_FRAME;
	else						BTN_RES_FRAME;
	if (Attribs & 2)		BTN_SET_BEEP;
	else						BTN_RES_BEEP;
	BTN_RES_BMP;
	BtnData.Enable			= 0;
	BtnData.Level			= Level;
	BtnData.bFont			= bFont;
	BtnData.InitRepeatDelay = 500;
	BtnData.RepeatDelay 		= 100;
	if (strlen(Text) >BTN_TEXTSIZE)
	{
		strncpy(BtnData.Text,Text,BTN_TEXTSIZE -1);
		BtnData.Text[BTN_TEXTSIZE-1] = '\0';
	}
	else
	{
		sprintf(BtnData.Text,"%s",Text);
	}
	BtnData.Set				= 1;
	btnStore(xmemPtr, BtnID);
	return BTN_SUCCESS;
}

/*** BeginHeader btnCreateBitmap */
int btnCreateBitmap (unsigned long xmemPtr,int BtnID, int xStart,
							int yStart,char Attribs,char Level, unsigned long bmp,
							int bmpWidth, int bmpHeight);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnCreateBitmap			<GLTOUCHSCREEN.LIB>

SYNTAX:			int btnCreateBitmap (unsigned long xmemPtr,int BtnID,
												int xStart,int yStart,char Attribs,
												char Level, unsigned long bmp,
												int bmpWidth, int bmpHeight);

DESCRIPTION:	Creates a button with a Bitmap.

PARAMETER1:		Xmem pointer to array of button descriptors.
PARAMETER2:		The Btn ID number of the button to create.
PARAMETER3:		Starting horizontal pixel coordinate.
PARAMETER4:		Starting vertical pixel coordinate.
PARAMETER5:		Button Attributes,
						bit 0: --> 1 = oval shaped, 0 = square shaped.
						bit 1: --> 1 = Beep on Press, 0 disable Beep.
						bit 2 to 7 (reserved).
PARAMETER6:		Level to associate the button with.
PARAMETER7:		Unsigned long pointer of the Bitmap to use.
PARAMETER8:		Horizontal size of the Bitmap.
PARAMETER9:		Vertical size of the Bitmap.

RETURN VALUE:	1 when completed.

NOTE:				The Button will be the bmp size + 16 pixels centered.
					 8 each side, and 8 each top, and bottom.

SEE ALSO:		btnCreateText, btnDisplay, btnClear, btnDisplayLevel,
					btnClearLevel, btnInit

END  DESCRIPTION *********************************************************/

nodebug
int btnCreateBitmap(unsigned long xmemPtr,int BtnID, int xStart,
						  int yStart,char Attribs,char Level, unsigned long bmp,
						  int bmpWidth, int bmpHeight)
{
	BtnData.BtnID 			= BtnID;
	BtnData.xStart			= xStart;
	BtnData.yStart			= yStart;
	BtnData.xSize			= bmpWidth  + 16;
	BtnData.ySize			= bmpHeight + 16;
	BtnData.xActive		= BtnData.xSize - BTN_RIGHT;
	BtnData.yActive		= BtnData.ySize - BTN_BOTTOM;
	if (Attribs & 1)		BTN_SET_FRAME;
	else						BTN_RES_FRAME;
	if (Attribs & 2)		BTN_SET_BEEP;
	else						BTN_RES_BEEP;
	BTN_SET_BMP;
	BtnData.Enable			= 0;
	BtnData.Level			= Level;
	BtnData.bFont			= NULL;
	sprintf(BtnData.Text,"");
	BtnData.bmpPtr			= bmp;
	BtnData.bmpHeight		= bmpHeight;
	BtnData.bmpWidth		= bmpWidth;
	BtnData.InitRepeatDelay = 500;
	BtnData.RepeatDelay 		= 100;
	btnStore(xmemPtr, BtnID);
	BtnData.Set				= 1;
	btnStore(xmemPtr, BtnID);
	return BTN_SUCCESS;
}

/*** BeginHeader btnClearRegion */
int   btnClearRegion(int xStart, int yStart, int xSize, int ySize);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnClearRegion				<GLTOUCHSCREEN.LIB>

SYNTAX:			int   btnClearRegion(int xStart, int yStart, int xSize,
											   int ySize);

DESCRIPTION:	Blank a region of the LCD.  If you use this to remove a
					button from the LCD, the button will still be enabled.
					Use btnClear, or btnClearLevel to remove buttons from
					the LCD.

PARAMETER1:		Starting Horizontal Pixel position.
PARAMETER2:		Starting Vertical Pixel positiion.
PARAMETER3:		Width of the Region pixels.
PARAMETER4:		Height of Region in pixels.


RETURN VALUE:	1 when completed.

SEE ALSO:		btnClear, btnClearLevel

END  DESCRIPTION *********************************************************/

nodebug
int btnClearRegion(int xStart, int yStart, int xSize, int ySize)
{
	static int brush;
	brush = glGetBrushType();
	glSetBrushType(PIXWHITE);
	glBlock(xStart,yStart,xSize,ySize);
	glSetBrushType(brush);
	return 1;
}

/*** BeginHeader btnDisplayText */
int  btnDisplayText(	int xStart, int yStart, int xSize,
							int ySize, fontInfo *pInfo, char *Text);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnDisplayText				<GLTOUCHSCREEN.LIB>

SYNTAX:			int  btnDisplayText(	int xStart, int yStart,
												int xSize, int ySize,
												fontInfo *pInfo, char *Text);

DESCRIPTION:	Displays a Text on the LCD. The Text will be
					automatically centered both horizontally and
					vertically. '\n' within the text will give you the
					capability of multiline text.
					for example;
					"Hello\nFrom\nZworld\nEngineering"
					will produce

				  	   Hello
				  	   from
				     Zworld
				   Engineering


PARAMETER1:		Starting Horizontal Pixel position.
PARAMETER2:		Starting Vertical Pixel positiion.
PARAMETER3:		Width of Display area pixels.
PARAMETER4:		Height of Display area in pixels.
PARAMETER5:		Font descriptor.
PARAMETER6:		Text to be displayed.

RETURN VALUE:	1 when completed.

SEE ALSO:		btnMsgBox, btnDisplay

END  DESCRIPTION *********************************************************/

nodebug
int btnDisplayText(int xStart, int yStart, int xSize,
						 int ySize,fontInfo *pInfo, char *Text)
{
	static int curX,curY,dispY;
	static int newX,newY,brush;
	static int maxX,maxY;
	static char newT[BTN_MSG_SIZE];
	static int index, state, lenY;
	#GLOBAL_INIT {state = 0;}
	if (strlen(Text) == 0) return 1;
	switch (state)
	{
		case 0:
			curX = curY = 0;
			maxX = (xSize - 2) / pInfo ->pixWidth;
			maxY = (ySize - 2) / pInfo ->pixHeight;
			index = 0;
			dispY = 0;
			newX = -1 ;
			newY = 0;
			lenY = 0;
			sprintf(newT,"");
			state = 1;
			break;
		case 1:
			if ( (Text[index] == '\n') || (((index) - newX) == maxX) )
			{
				lenY++;
				newX = index+1;
			}
			index++;
			if (index == strlen(Text) )
			{
				if ( newX != index || lenY == 0 )lenY++;
				state++;
			}
			break;
		case 2:
			index = 0;
			newX = 0;
			if (maxY >= lenY)
			{
				curY = (yStart  + ( ySize / 2)) -
					 	 (((lenY) * (pInfo -> pixHeight)) /2);

				dispY = 0;

			}
			else
			{
				curY = (yStart  + ( ySize / 2)) -
			          (((maxY) * (pInfo -> pixHeight)) /2);

			   dispY = lenY - maxY;

			}
			state++;
			break;
		case 3:
			if ( (Text[index] == '\n') ||  (index == strlen(Text))  || ((index - newX) == maxX) )
			{

				curX = (xStart  + ( xSize / 2)) -
						 (( (index - newX) * pInfo ->pixWidth)/2);
				memcpy(newT,Text + newX,index - newX);
				if ( Text[index] == '\n' )
				{
					newT[index - newX] = '\0';
					index++;
				}
				else
				{
					newT[index - newX] = '\0';
				}
				if ( newY >= dispY )
				{
					glPrintf(curX,curY + ( (newY-dispY) * pInfo -> pixHeight ),pInfo,newT);
				}
				newY++;
				newX = index;
				index++;

			}
			else
			{
				if (index < strlen(Text))
				{
					index++;

				}
				else
				{
					state = 4;
				}
			}
			break;
		case 4:
			state = 0;

			return BTN_SUCCESS;
			break;
	}
	return BTN_PENDING;
}
/*** BeginHeader btnMsgBox */
int	btnMsgBox(int xStart, int yStart, int xSize,	int ySize,
					 fontInfo *pInfo, char *Text, int Frame, int Invert );
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnMsgBox				<GLTOUCHSCREEN.LIB>

SYNTAX:			int	btnMsgBox(int xStart, int yStart, int xSize,
											int ySize, fontInfo *pInfo,
											char *Text, int Frame, int Invert);

DESCRIPTION:	Displays a Message (Text box) on the LCD. It can be
					square or oval framed, and Inverted.  The Text will
					be automatically centered both horizontally and
					vertically. '\n' within the text will give you the
					capability of multiline text.
					for example;
					"Hello\nFrom\nZworld\nEngineering"
   					will produce

					---------------
				  |	 Hello		|
				  |	  from	  	|
				  |	 Zworld  	|
				  |  Engineering  |
					---------------
PARAMETER1:		Starting Horizontal Pixel position.
PARAMETER2:		Starting Vertical Pixel positiion.
PARAMETER3:		Width of Box pixels.
PARAMETER4:		Height of box in pixels.
PARAMETER5:		Font descriptor.
PARAMETER6:		Text to be displayed.
PARAMETER7:		Frame type (1 = Oval, 0 = squared).
PARAMETER8:		Invert selection (0 = normal display, 1 = inverted display.

RETURN VALUE:	1 when completed.

SEE ALSO:		btnDisplayText

END  DESCRIPTION *********************************************************/

nodebug
int btnMsgBox(int xStart, int yStart, int xSize,	int ySize,
	           fontInfo *pInfo, char *Text, int Frame, int Invert)
{
	static int brush;
	glBuffLock();
	brush = glGetBrushType();
	btnClearRegion(xStart,yStart,xSize,ySize);
	glBlock(xStart,yStart,xSize,BTN_TOP);
	glBlock(xStart+ xSize- BTN_RIGHT,yStart,BTN_RIGHT,ySize );
	glBlock(xStart,yStart+ySize - BTN_BOTTOM,xSize,BTN_BOTTOM);
	glBlock(xStart,yStart,BTN_LEFT,ySize);

	if (Frame)
	{
		glXPutBitmap(	xStart,yStart,BTN_FRAME_WIDTH,
							BTN_FRAME_HEIGHT,BtnFrameNw);
		glXPutBitmap(	xStart + xSize - BTN_FRAME_WIDTH,yStart,
							BTN_FRAME_WIDTH,BTN_FRAME_HEIGHT,BtnFrameNe);
		glXPutBitmap(	xStart ,yStart + ySize - BTN_FRAME_HEIGHT,
							BTN_FRAME_WIDTH,BTN_FRAME_HEIGHT,BtnFrameSw);
		glXPutBitmap(	xStart + xSize - BTN_FRAME_WIDTH ,
							yStart + ySize - BTN_FRAME_HEIGHT,BTN_FRAME_WIDTH,
							BTN_FRAME_HEIGHT,BtnFrameSe);
	}
	while (!btnDisplayText(xStart,yStart,xSize,ySize,pInfo,Text));
	if (Invert)
	{
		glSetBrushType(PIXXOR);
		glBlock(xStart,yStart,xSize,ySize);
		glSetBrushType(brush);
	}

	glBuffUnlock();
	return BTN_SUCCESS;
}

/*** BeginHeader btnDisplay */
int	btnDisplay(unsigned long xmemPtr, int BtnID);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnDisplay					<GLTOUCHSCREEN.LIB>

SYNTAX:			int	btnDisplay(unsigned long xmemPtr, int BtnID);

DESCRIPTION:	Displays  a  predefined button on the LCD.  The
					Attributes, and Text/Bmp displayed and location of
					the button is predefined by either btnCreateText,
					or btnCreateBmp.  Once displayed, the touchscreen
					will monitor it for presses.  Call btnClear to
					remove.

PARAMETER1:		Xmem pointer to array of button descriptors.
PARAMETER2:		Btn ID number to display.
RETURN VALUE:	1 when completed.

SEE ALSO:		btnDisplayLevel, btnClearLevel, btnClear,

END  DESCRIPTION *********************************************************/

nodebug
int btnDisplay(unsigned long xmemPtr, int BtnID)
{
	auto int maxTwidth;
	auto int bmpWidth,bmpHeight;
	btnRecall(xmemPtr, BtnID);
	if (BtnData.Set)
	{
		glBuffLock();
		btnMsgBox(	BtnData.xStart,
						BtnData.yStart,
						BtnData.xSize,
						BtnData.ySize,
					 	BtnData.bFont,
					 	BtnData.Text,
					 	BTN_FLG_FRAME,
					 	0);

		if (BTN_FLG_BMP)
		{

			bmpWidth  = BtnData.bmpWidth;
			bmpHeight = BtnData.bmpHeight;

			glXPutBitmap(( BtnData.xStart+((BtnData.xSize) /2))-(bmpWidth/2),
							 ( BtnData.yStart+((BtnData.ySize) /2))-(bmpHeight/2),
								bmpWidth,bmpHeight,
								BtnData.bmpPtr);
		}
		glBuffUnlock();
		BtnData.Enable  = 1;
		btnStore(xmemPtr,BtnID);
		return BTN_SUCCESS;
	}
	else	return BTN_FAILURE;
}

/*** BeginHeader  btnDisplayLevel */
int btnDisplayLevel (unsigned long xmemPtr, char Level);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnDisplayLevel			<GLTOUCHSCREEN.LIB>

SYNTAX:			int btnDisplayLevel (unsigned long xmemPtr, char Level);

DESCRIPTION:	Displays  predefined buttons on the LCD according
					to the Level it is associated with.  The Level
					is predefined by either btnCreateText, or
					btnCreateBmp.  This function allows you to group
					buttons together and display them with all with
					a single function call.

PARAMETER1:		Xmem pointer to array of button descriptors.
PARAMETER2:		button Level to display.

RETURN VALUE:	1 when completed.

SEE ALSO:		btnClearLevel, btnDisplay, btnClear

END  DESCRIPTION *********************************************************/

nodebug
int btnDisplayLevel(unsigned long xmemPtr, char Level)
{
	static byte state;
	static int  index;
	static int  indexEnd;
	#GLOBAL_INIT { state = 0; }
	switch (state)
	{
		case 0:
			btnRecall(xmemPtr,0);
			index = 0;
			indexEnd = BtnData.LastBtn;
			state++;
			glBuffLock();
			break;
		case 1:
			btnRecall(xmemPtr,index);
			{
				if (BtnData.Level == Level) btnDisplay(xmemPtr, index);
			}
			if ( index < indexEnd  ) index++;
			else state++;
			break;

		case 2:
			glBuffUnlock();
			state = 0;
			index = 0;
			return BTN_SUCCESS;
			break;
	}
	return BTN_PENDING;
}
/*** BeginHeader btnClear */
int btnClear (unsigned long xmemPtr, int BtnID);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnClear						<GLTOUCHSCREEN.LIB>

SYNTAX:			int btnClear (unsigned long xmemPtr, int BtnID);

DESCRIPTION:	Removes  a  displayed button on the LCD.

PARAMETER1:		Xmem pointer to array of button descriptors.
PARAMETER2:		the Btn ID number to Remove.

RETURN VALUE:	1 when completed.

SEE ALSO:		btnDisplayLevel, btnDisplay, btnClearLevel

END  DESCRIPTION *********************************************************/

nodebug
int btnClear(unsigned long xmemPtr, int BtnID)
{
	auto int brush;
	btnRecall(xmemPtr, BtnID);
	if (BtnData.Set)
	{
		if (BtnData.Enable)
		{
			btnClearRegion(BtnData.xStart,
								BtnData.yStart,
								BtnData.xSize,
								BtnData.ySize);
			BtnData.Enable = 0;
			btnStore(xmemPtr,BtnID);
			return BTN_SUCCESS;
		}
		else
		{
			return BTN_FAILURE;
		}

	}
	else
	{
		return BTN_FAILURE;
	}
}

/*** BeginHeader  btnClearLevel */
int btnClearLevel (unsigned long xmemPtr, char Level);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
btnClearLevel				<GLTOUCHSCREEN.LIB>

SYNTAX:			int btnClearLevel (unsigned long xmemPtr, char Level);

DESCRIPTION:	Removes a group of displayed buttons based on their level.
					If the macro BTN_ALL_L is put in the second parameter, all
					buttons will be removed.  This function is non-blocking, but
					must be called multiple times, until BTN_SUCCESS is
					returned.

PARAMETER1:		Xmem pointer to array of button descriptors.
PARAMETER2:		Level number to remove, or BTN_ALL_L to remove them all.

RETURN VALUE:	BTN_SUCCESS when completed,
					BTN_PENDING otherwise.

SEE ALSO:		btnDisplayLevel, btnDisplay, btnClear,

END DESCRIPTION **********************************************************/

nodebug
int btnClearLevel(unsigned long xmemPtr, char Level)
{
	static byte state;
	static int  index;
	static int  indexEnd;
	#GLOBAL_INIT { state = 0;}

	switch (state)
	{
		case 0:
				index = 0;
				btnRecall(xmemPtr,index);
				indexEnd = BtnData.LastBtn;
				state++;
				glBuffLock();
				break;
		case 1:
			btnRecall(xmemPtr,index);
			if ( (BtnData.Level == Level) || (Level == BTN_ALL_L) )
			{
				if (BtnData.Enable)
				{
					btnClear(xmemPtr, index);
				}
			}
			if (index < indexEnd) index++;
			else state++;
			break;

		case 2:
			glBuffUnlock();
			state = 0;
			index = 0;
			return BTN_SUCCESS;
			break;
	}
	return BTN_PENDING;
}


/*** BeginHeader btnAttributes */
int btnAttributes(unsigned long xmemPtr, int btn, int RepeatCntrl,
						int InitRepeatDelay, int RepeatDelay, int BuzzerCntrl);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
btnAttributes				<GLTOUCHSCREEN.LIB>

SYNTAX:			int btnAttributes(unsigned long xmemPtr, int btn,
											int RepeatCntrl,int InitRepeatDelay,
											int RepeatDelay, int BuzzerCntrl);

DESCRIPTION:   Sets the button Attributes for action taken when pressed.

PARAMETER1:		Xmem pointer to array of button descriptors.
PARAMETER2:		Button ID number.
PARAMETER3:		Set Repeat Enable/Disable (0 = Repeat off, 1 = Repeat On)
PARAMETER4:		Set the Initial Delay for the Repeat when repeat is enabled
PARAMETER5:		Sets the RepeatDelay between repeats
PARAMETER6:		Enables/Disables the buzzer on activate.

RETURN VALUE:	1 when completed.

END DESCRIPTION **********************************************************/

nodebug
int btnAttributes(unsigned long xmemPtr, int btn, int RepeatCntrl,
						int InitRepeatDelay,int RepeatDelay, int BuzzerCntrl)
{
	btnRecall(xmemPtr,btn);
	if(BuzzerCntrl)
		BtnData.Flags = BtnData.Flags | 0x02;
	else
		BtnData.Flags = BtnData.Flags & ~0x02;

	if(RepeatCntrl)
		BtnData.Flags = BtnData.Flags | 0x10;
	else
		BtnData.Flags = BtnData.Flags & ~0x10;
	BtnData.InitRepeatDelay = InitRepeatDelay;
	BtnData.RepeatDelay = RepeatDelay;
	btnStore(xmemPtr, btn);
}

/*** BeginHeader btnSearchXY */
int btnSearchXY(unsigned long xmemPtr, int x, int y );
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
btnSearchXY				<TS_R4096.LIB>

SYNTAX:			int btnSearchXY(unsigned long xmemPtr, int x, int y );

DESCRIPTION:	This function searches the list of buttons in use for a
					button that matches the x,y coordinate's from the touch
					screen. This function is non-reentrant.

PARAMETER1:		Xmem pointer to array of button descriptors.
PARAMETER2:		X-coordinate of location on touchscreen.
PARAMETER3:		Y-coordinate of location on touchscreen.

RETURN VALUE:  The command code of the button corresponding to a button
					thats being pressed. If no such button is found, returns
					a negative number.

SEE ALSO:		btnVerifyXY, btnGet, glTouchScreen.lib

END DESCRIPTION **********************************************************/

nodebug
int btnSearchXY(unsigned long xmemPtr, int x, int y )
{
		auto int btnID;

	btnID = 0;
	btnRecall (xmemPtr, btnID);
	while(btnID <= BtnData.LastBtn)
	{
		if(BtnData.Enable)
		{
			if(x >= (BtnData.xStart) &&
		   	y >= (BtnData.yStart) &&
				x <= (BtnData.xStart+BtnData.xActive) &&
				y <= (BtnData.yStart+BtnData.yActive))
			{
				return(BtnData.BtnID);
			}
		}
		btnID++;
		btnRecall (xmemPtr, btnID);
	}
	return -1;
}


/*** BeginHeader btnVerifyXY, BtnXoffset, BtnYoffset */
int btnVerifyXY(unsigned long xmemPtr,
                int btn, int x, int y);
extern int BtnXoffset;
extern int BtnYoffset;
/*** EndHeader */

int BtnXoffset;
int BtnYoffset;

/* START FUNCTION DESCRIPTION ********************************************
btnVerifyXY				<TS_R4096.LIB>

SYNTAX:			int btnVerifyXY(unsigned long xmemPtr,
                               int btn, int x, int y);

DESCRIPTION:	This function searches the list of buttons in use for a
					button that matches the x,y coordinate's from the touch
					screen. This function is non-reentrant.

PARAMETER1:		Xmem pointer to array of button descriptors.
PARAMETER2:	 	Command code of button to be verified.
PARAMETER3:		X-coordinate of location on touchscreen.
PARAMETER4:		Y-coordinate of location on touchscreen.

RETURN VALUE:  The command code of the button corresponding to a button
					thats being verified. If not the correct button, returns
					a negative number.

SEE ALSO:		btnSearchXY, btnGet, glTouchScreen.lib

END DESCRIPTION **********************************************************/

nodebug
int btnVerifyXY(unsigned long xmemPtr, int btn, int x, int y)
{
	btnRecall(xmemPtr, btn);
	if(x > BtnData.xStart+BtnXoffset   &&
	  	y > BtnData.yStart+BtnYoffset   &&
		x < (BtnData.xStart+BtnData.xActive-BtnXoffset) &&
		y < (BtnData.yStart+BtnData.yActive-BtnYoffset))
	{
		return(BtnData.BtnID);
	}
	return -1;
}


/*** BeginHeader btnGet */
int btnGet( unsigned long xmemPtr );
#ifndef BTN_PRESSPERIOD
#define BTN_PRESSPERIOD    0
#endif

#ifndef BTN_RELEASEPERIOD
#define BTN_RELEASEPERIOD  2
#endif

#ifndef BTN_REPEATPERIOD
#define BTN_REPEATPERIOD   1
#endif
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
btnGet					<TS_R4096.LIB>

SYNTAX:			int btnGet(unsigned long xmemPtr);

DESCRIPTION:	This function checks the touchscreen x,y coordinate's
					against a given set of buttons being displayed looking
					for a match. If a match is found, then the cmd for the
					button will be returned, otherwise it returns a negative
					value. This function is non-reentrant.

PARAMETER:		Xmem pointer to array of button descriptors.

RETURN VALUE:	The command code of the button corresponding to a button
					thats being pressed. If no such button is found, returns
					a negative number.

SEE ALSO:		btnSearchXY, btnVerifyXY, glTouchScreen.lib

END DESCRIPTION **********************************************************/

nodebug
int btnGet(unsigned long xmemPtr)
{
	auto long btnXY;
	auto int btn;
	auto int x, y;
	auto int btnCurButton;
	auto int btnRealtime;
	auto brushtype;
	static unsigned long debounce_period;
	static unsigned long release_period;
	static unsigned long repeatDelay;
	static unsigned long buzzer_period;
	static int btnSelected;
	static int btnReleased;
	static int btnActive;
	static int btnVerifyState;
	static int btnDefaultState;

	#GLOBAL_INIT{btnVerifyState  = 0;}
	#GLOBAL_INIT{btnDefaultState = 0;}
	#GLOBAL_INIT{btnActive       = 0;}
	#GLOBAL_INIT{btnSnapshot     = 0;}
	#GLOBAL_INIT{btnReleased     = TRUE;}

	btn = -1;
	brushtype = glGetBrushType();
	TsScanState();
	if(!btnReleased)
		btnRecall(xmemPtr, btnSelected);
	if(btnSnapshot && btnReleased && !btnActive)
	{
		btnSnapshot = 0;
		btnXY = TsXYBuffer();
		x = (int) ((btnXY >> 16) & 0x00000FFF);
		y = (int) (btnXY & 0x00000FFF);
		btnCurButton = btnSearchXY(xmemPtr, x, y);

		TsXYvector(&x, &y, CAL_MODE);
		btnRealtime  = btnVerifyXY(xmemPtr, btnCurButton, x, y);
		if((btnCurButton == btnRealtime) && (btnCurButton != -1))
		{
			if((BtnData.Flags & 0x02) && BTN_PRESSPERIOD)
			{
				buzzer_period = MS_TIMER + BTN_PRESSPERIOD-1;
				buzzer(1);
				while(!((long) (MS_TIMER-buzzer_period) >= 0 ));
				buzzer(0);
			}
			glSetBrushType(PIXXOR);
			glBlock(BtnData.xStart, BtnData.yStart, BtnData.xSize, BtnData.ySize);
			btnActive = 1;
			btnReleased = FALSE;
			btnVerifyState = btnDefaultState = 0;
			repeatDelay = MS_TIMER + BtnData.InitRepeatDelay;
		}
		btnSelected = btnCurButton;
		BtnXoffset = BtnYoffset = 0;
	}
	else if(btnSnapshot && !btnReleased)
	{
		btnSnapshot = 0;
		btnXY = TsXYBuffer();
		if(btnActive && (btnXY & BTNRELEASE))
		{
			btnReleased = TRUE;
			if((BtnData.Flags & 0x02) &&  BTN_RELEASEPERIOD)
			{
				buzzer_period = MS_TIMER+ BTN_RELEASEPERIOD-1;
				buzzer(1);
				while(!((long) (MS_TIMER-buzzer_period) >= 0 ));
				buzzer(0);
			}
			glSetBrushType(PIXXOR);
			glBlock(BtnData.xStart, BtnData.yStart, BtnData.xSize, BtnData.ySize);
			btn = btnSelected;
			btnActive = 0;
		}
		else if((btnXY & BTNRELEASE))
		{
			btnReleased = TRUE;
			btnActive = 0;
		}
	}
	else if(TsActive() && !btnReleased)
	{
		TsXYvector(&x, &y, CAL_MODE);
		btnCurButton = btnVerifyXY(xmemPtr, btnSelected, x, y);
		switch(btnVerifyState)
		{
			case 0:
				release_period = MS_TIMER + TS_RELEASE + TS_PREVENTRACE;
				btnVerifyState = 1;
				break;

			case 1:
				if(!((long) (MS_TIMER-release_period) >= 0 ))
					break;
				if(TsActive())
					btnVerifyState = 2;
				else
					btnVerifyState = 0;
				break;

			case 2:
				btnVerifyState = 0;
				if((btnSelected != btnCurButton) && btnActive && TsActive())
				{
					BtnXoffset = 5;
					BtnYoffset = 4;
					btnActive = 0;
					glSetBrushType(PIXXOR);
					glBlock(BtnData.xStart, BtnData.yStart, BtnData.xSize, BtnData.ySize);
				}
				else if((btnSelected == btnCurButton) && !btnActive)
				{
					BtnXoffset = 0;
					BtnYoffset = 0;
					btnActive = 1;
					glSetBrushType(PIXXOR);
					glBlock(BtnData.xStart, BtnData.yStart, BtnData.xSize, BtnData.ySize);
				}
				break;
		}
		if(btnActive)
		{
			if((BtnData.Flags & 0x10))
			{
				if(((long) (MS_TIMER-repeatDelay) >= 0 ))
				{
					btn = btnSelected;
					if((BtnData.Flags & 0x02) && BTN_REPEATPERIOD )
					{
						buzzer_period = MS_TIMER + BTN_REPEATPERIOD-1;
						buzzer(1);
						while(!((long) (MS_TIMER-buzzer_period) >= 0 ));
						buzzer(0);
					}
					repeatDelay = MS_TIMER + BtnData.RepeatDelay;
				}
			}
		}
	}
	else if(!TsActive() && !btnReleased)
	{
		switch(btnDefaultState)
		{
			case 0:
				debounce_period = MS_TIMER + TS_RELEASE + TS_PREVENTRACE;
				btnDefaultState = 1;
				break;

			case 1:
				if(!((long) (MS_TIMER-debounce_period) >= 0 ))
					break;
				if(!TsActive())
					btnDefaultState = 2;
				else
					btnDefaultState = 0;
				break;

			case 2:
				btnSnapshot = btnActive = btnDefaultState = 0;
				btnReleased = TRUE;
				glSetBrushType(PIXBLACK);
				btnDisplay(xmemPtr, btnSelected);
				break;
		}
	}
	glSetBrushType(brushtype);
	return btn;
}
/*** BeginHeader */
#endif
/*** EndHeader */

