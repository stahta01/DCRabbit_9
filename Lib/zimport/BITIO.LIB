/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader  ********************************************/
#ifndef __BITIO_LIB
#define __BITIO_LIB
/*** EndHeader ***********************************************/

/* START _LIBRARY DESCRIPTION *********************************************
BITIO.LIB

DESCRIPTION:
	Single bit file I/O.

	The single-bit I/O routines utilize a mask and a rack for output,
	defined in the BIT_FILE struct. When a bit is to be written, it is
	added to the rack at the position defined by the mask. The mask is
	then adjusted to represent a new position. Once the rack	is full, it
	is written as a single character to the file, then the rack is cleared
	and the mask reset. Input is done similarly. In order for the routines
	to work, a single-character I/O routine is needed (for example, getc
	and putc for input and output, respectively). This file implements
	_bitio_getc and _bitio_putc for filesystem (FS2) files and _ximgetc
	for xmem (#ximport/#zimport) files (which are considered read-only).

	This library also uses buffered input for files. This involves the
	use of an xmem buffer into which characters are read from the file,
	and retrieved when needed by a call to xmem2root. This reduces the
	impact of the library on root memory. See the input routines and the
	BITIO_BUFFER_INPUT macro in this file for more information.

	This file also defines the compressed file structure ZFILE, which
	defines the state for compression algorithms.

	This library is thread-safe.

	Note: This file is currently only used internally by the #zimport
	support libraries. If it is ever released, the API for this library
	consists of the following functions:
		OpenInputBitFile			- Open a file for single-bit input
		OpenOutputBitFile			- Open a file for single-bit output
		OutputBit					- Output a single bit to a file
		OutputBits					- Output a number of bits to a file
		InputBit						- Input a single bit from a file
		InputBits					- Input a number of bits from a file
	See the function descriptions for each of these for more information.

SUPPORT LIB'S:
END DESCRIPTION **********************************************************/

/*** BeginHeader */

// Uncomment the following macro to enable debugging
// A function fatal_error(char *) which handles an error
// string must be defined for debugging purposes if this
// macro is defined.
// #define __BITIO_DEBUG

// If the filesystem library is included, then enable FS2 support
#ifdef __FS2_LIB
#define __USE_FS2__
#endif

// Macros and data structures for single bit IO routines
#ifndef EOF
#define EOF             -1			// End of file marker
#endif

#define BITIO_BUFFER_INPUT			// Comment out this macro to use
											// unbuffered input

#ifdef  BITIO_BUFFER_INPUT
#define BITIO_XIMBUFSIZE  32				// Size of the input buffer
#endif

#ifndef UBYTE
#define UBYTE   unsigned char		// Define an unsigned byte
#endif

#ifndef FILE
#ifdef __USE_FS2__			// We are using File System support
#define FILE   File			// File descriptor type
#else
#define FILE 	int
#endif
#endif

typedef int (*PFI)();				// Pointer to a function type

// Binary file structure for filesystem. files This structure defines the
// required state for single-bit I/O files.
typedef struct bit_file
{
    UBYTE   mask;			// Mask for current output bit
    int     rack;			// Store bits until we fill a byte
    long    fileloc;		// Location of file (for ximport)
    long    rems;
#ifdef  BITIO_BUFFER_INPUT
	 // Make frems an int to speed up _ximgetc - make sure this is
	 // big enough to hold BITIO_XIMBUFSIZE
    long    frems;		// Buffered import support variables
    int     brems;
    UBYTE  *locptr;
    UBYTE   buffer[BITIO_XIMBUFSIZE];
#endif
} BIT_FILE;

// Include lzss.lib, which defines the ZFILE structure.
#use "lzss.lib"

/*** EndHeader */


/*** BeginHeader _bitio_putc */
#ifdef __USE_FS2__
int _bitio_putc( int ch, ZFILE *fp );       // must return TRUE or FALSE indicating success/failure
#endif
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_bitio_putc                       <BITIO.LIB>

SYNTAX: int _bitio_putc(int ch, ZFILE *fp);

PARAMETER1: Character to output.

PARAMETER2: File descriptor to a binary input file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Insert a single character into a bit file. Input parameters
are a character of type int, and an output file of type ZFILE. The
character ch is written to the current location of the stream pointer
in the ZFILE structure. Returns true on success.

RETURN VALUE:	true - success
					false - failure
END DESCRIPTION **********************************************************/
#ifdef __USE_FS2__
nodebug
int _bitio_putc( int ch, ZFILE *fp ) {
    return(fwrite( &fp->fl, &ch, 1 ));
}
#endif

/*** BeginHeader _inbitGetc */
int _inbitGetc ( ZFILE *ifp );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_inbitGetc                  <BITIO.LIB>

SYNTAX: int _inbitGetc(ZFILE *ifp);

PARAMETER1: File descriptor to an input bit file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Retrieve a single character from a bit file, checks for
difference between #ximport and filesystem files. The character returned
is from the current location of the stream pointer in the ZFILE struct.
This function calls the appropriate function for ximport (zimport) or
filesystem files, depending on their type.

RETURN VALUE:	The next charater in the file.
END DESCRIPTION **********************************************************/

nodebug
int _inbitGetc ( ZFILE *ifp )
{
    auto    int ch;
#ifdef __USE_FS2__
    if ( ifp->xmBool ) {
#endif
        // If no filesystem, then ifp is an ximport file
        ch = _ximgetc( &ifp->bf );

#ifdef __USE_FS2__
    } else {
        ch = _bitio_getc( ifp );
    }
#endif
    return(ch);
}

/*** BeginHeader _bitio_getc */
#ifdef __USE_FS2__
int _bitio_getc(ZFILE *ifp);
#endif
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_bitio_getc                       <BITIO.LIB>

SYNTAX: int _bitio_getc(ZFILE *ifp);

PARAMETER1: File descriptor to an input bit file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Retrieve a single character from a filesystem bit file. The
input parameter is a pointer to a ZFILE, and the character returned
is from the next location in that file, determined by the location of the
stream pointer. The stream pointer of ifp is advanced before returning.
This function is used only for filesystem files, and is conditionally
included only if FS2.LIB is #use'd.

RETURN VALUE:	The next charater in the file.
END DESCRIPTION **********************************************************/
#ifdef __USE_FS2__
nodebug
int _bitio_getc(ZFILE *ifp)
{
auto    unsigned    int         ch;
auto                int         lenx;
auto                int         szin;
auto                BIT_FILE   *fp;

    ch = 0;
    fp = &ifp->bf;
#ifdef  BITIO_BUFFER_INPUT
    if ( fp->brems )
    {
        ch = *fp->locptr++;
        fp->brems--;
    }
    else if ( fp->frems )
    {
        szin = (int)((fp->frems >= BITIO_XIMBUFSIZE) ? BITIO_XIMBUFSIZE : fp->frems);
        lenx = fread( &ifp->fl, fp->buffer, szin );
#ifdef __BITIO_DEBUG
        if ( lenx != szin ) {
            fatal_error("*** Invalid _bitio_getc Read ***");
        }
#endif
        ch = fp->buffer[0];
        fp->frems -= szin;
        fp->brems = szin-1;
        fp->locptr = &fp->buffer[1];
    }
    else
        ch = EOF;
#else
    lenx = fread(&ifp->fl, &ch, 1);
    if ( !lenx )
        ch = EOF;
#endif
    return(ch);
}
#endif

/*** Beginheader init_bitfile_struct */
void init_bitfile_struct ( ZFILE *xx );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
init_bitfile_struct        <BITIO.LIB>

SYNTAX: void init_bitfile_struct(ZFILE *xx);

PARAMETER1: File descriptor to a bit file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Initialize the bitfile structure for a particular file. This
function initializes a ZFILE struct, and sets the default bit mask
and current position.

RETURN VALUE:	None.
END DESCRIPTION **********************************************************/

nodebug
void init_bitfile_struct ( ZFILE *xx )
{
    memset( xx, 0, sizeof(ZFILE) );  // zap the structure
  	 xx->bf.mask = 0x80;                    // set the mask
    xx->CurrPos = 1;                    // and the current position
}

/*** Beginheader OpenOutputBitFile */
#ifdef __USE_FS2__
int OpenOutputBitFile( ZFILE *bfp, int fn );
#endif
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
OpenOutputBitFile          <BITIO.LIB>

SYNTAX: int OpenOutputBitFile(ZFILE *bfp, int fn);

PARAMETER1: File descriptor to a bit file.

PARAMETER2: File "name" parameter for filesystem file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Open a filesystem bitfile for output. The first parameter is
a pointer to a bitfile descriptor. The second parameter is the file
"name" of a filesystem (FS2) file. This function initializes the
ZFILE struct and creates a new FS2 file for output.

RETURN VALUE:	true - success
					false - failure
END DESCRIPTION **********************************************************/

#ifdef __USE_FS2__
nodebug
int OpenOutputBitFile( ZFILE *bfp, int fn )
{
auto    int       stt;

    init_bitfile_struct( bfp );
    stt = fcreate(&bfp->fl, fn );

#ifdef __BITIO_DEBUG
    if ( stt ) {
        fatal_error("Error opening output compressed file");
    }
#endif

    bfp->oneCharIO = &_bitio_putc;
    return( TRUE );
}
#endif

/*** Beginheader OpenOutputBitStream */
int OpenOutputBitStream( ZFILE *bfp, PFI func );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
OpenOutputBitStream        <BITIO.LIB>

SYNTAX: int OpenOutputBitStream(ZFILE *bfp, PFI func);

PARAMETER1: File descriptor to a bit file.

PARAMETER2: Pointer to a function (must return int).

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Setup a ZFILE for an output stream defined by func.
A bit stream allows for user-defined I/O to be used with the bitio
library. The first parameter is a bitfile descriptor to which the
output is written. The second parameter is a pointer to an output
function defined by the user. This function must have an integer
return type, and is assumed to perform single-character output to the
file. The function may perform formatting, encryption, or any other
functionality needed when the character is written.

RETURN VALUE:	true - success
					false - failure
END DESCRIPTION **********************************************************/
nodebug
int OpenOutputBitStream( ZFILE *bfp, PFI func )
{
    init_bitfile_struct( bfp );
    bfp->oneCharIO = func;
    return( TRUE );
}

/*** BeginHeader OpenInputBitFile */
int OpenInputBitFile( ZFILE *ifp, long fn );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
OpenInputBitFile          <BITIO.LIB>

SYNTAX: int OpenInputBitFile(ZFILE *ifp, long fn);

PARAMETER1: File descriptor to a bit file.

PARAMETER2: File "name" parameter for filesystem file, or location of
an ximport file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Open a bitfile for input. This file may be formatted for
the filesystem, or an ximport file. The file is assumed to be an FS
file if the second parameter is <= 255, implying a file descriptor.
If it is > 255, it is assumed to be the location of a #ximport or
#zimport. This function sets up the ZFILE struct, and sets up the
file fn for single-bit input.

RETURN VALUE:	true - success
					false - failure
END DESCRIPTION **********************************************************/
nodebug
int OpenInputBitFile( ZFILE *ifp, long fn )
{
auto    BIT_FILE *bit_file;
auto    int       stt;

#ifdef  BITIO_BUFFER_INPUT
auto    int     lenx;
auto    int     szin;
#endif

/*
 *  NOTE: ximport type of files have a LARGE file number; i.e.
 *          the absolute 20 bit address. If the file number is
 *          less than 255, then it must be an FS2 type of file number
 */
    init_bitfile_struct( ifp );  // this sets xmbool to false

#ifdef __USE_FS2__
    if ( fn <= 255 )
    {                                   // this is an FS2 type of file
        bit_file = &ifp->bf;

#ifdef  BITIO_BUFFER_INPUT
        ifp->fsz = _bitfile_size(fn);
#endif
        stt = fopen_rd(&ifp->fl, (int)fn);

#ifdef __BITIO_DEBUG
        if ( stt ) {
            fatal_error("Error opening input compressed file");
			}
#endif

#ifdef  BITIO_BUFFER_INPUT
        bit_file->frems = ifp->fsz;
        szin = (int)((bit_file->frems >= BITIO_XIMBUFSIZE) ? BITIO_XIMBUFSIZE : bit_file->frems);
        lenx = fread( &ifp->fl, bit_file->buffer, szin );

#ifdef __BITIO_DEBUG
        if ( lenx != szin ) {
            fatal_error("*** Invalid Open Read ***");
        }
#endif

        bit_file->frems -= szin;
        bit_file->brems = szin;
        bit_file->locptr = bit_file->buffer;
	     ifp->oneCharIO = &_bitio_getc;
#endif
    }
    else                                // it is an ximported file
#endif // End #ifdef __USE_FS2__
    {
        ifp->xmBool = TRUE;             // it is ximported
        openXimFile ( ifp, fn );        // do the correct open stuff
		  ifp->oneCharIO = _ximgetc;
    }

	 // ifp->oneCharIO = &_inbitGetc; // Generic getc function (uses flag in ZFILE to determine xmem/FS2)

    return( TRUE );
}

/*** BeginHeader openXimFile */
int openXimFile ( ZFILE *ifp, long floc );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
openXimFile                <BITIO.LIB>

SYNTAX: int openXimFile ( ZFILE *ifp, long floc )

PARAMETER1: File descriptor to a bit file.

PARAMETER2: Location of a #ximport file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Open a bitfile for input from an #ximport location.
Masks out the #zimport flag bit for determining file length. If
the compression flag bit is set, this function also extracts the
compression type identifier byte, and sets the Compressed
field of the ZFILE (ZFILE) structure.

RETURN VALUE:	true - success
					false - failure
END DESCRIPTION **********************************************************/

nodebug
int openXimFile ( ZFILE *ifp, long floc ) {

    if(xmem2root(&ifp->fsz, floc, 4) == 0) {
        // See if the file is compressed
		  ifp->Compressed = ((ifp->fsz & (~ZIMPORT_MASK)) != 0);

		  // Set the initial file location to the address right after
		  // the 32-bit length value
        ifp->bf.fileloc = floc+4;

   	  // Mask out the #zimport compression bit
		  ifp->bf.rems = ifp->fsz = (ifp->fsz & ZIMPORT_MASK);

        if ( ifp->fsz )
        {
#ifdef  BITIO_BUFFER_INPUT
            ximrebuf ( &ifp->bf );
#endif
				return(TRUE);
        }
    }
    return(FALSE);
}

/*** Beginheader ximrebuf */
int ximrebuf ( BIT_FILE *fp );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
ximrebuf                   <BITIO.LIB>

SYNTAX: int ximrebuf ( BIT_FILE *fp );

PARAMETER1: #ximported file descriptor.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Buffered input for a #ximport file. This function gets a
number of bytes from the ximported (zimported) file and puts them in
the file buffer. The number of bytes remaining and the internal file
position pointers are updated.

RETURN VALUE:	Number of retrieved bytes
END DESCRIPTION **********************************************************/
nodebug
int ximrebuf ( BIT_FILE *fp )
{
auto    int szin;

	 if(fp->rems >= BITIO_XIMBUFSIZE) {
	 	szin = BITIO_XIMBUFSIZE;
	 } else {
	 	szin = (int)fp->rems;
	 }
    fp->frems = szin;

    if ( szin )
    {
        xmem2root( fp->buffer, fp->fileloc, szin );
        fp->fileloc += szin;
        fp->rems -= szin;
        fp->locptr = fp->buffer;
    }
    return(szin);
}

/*** BeginHeader _ximgetc */
int _ximgetc( ZFILE *fp );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_ximgetc                    <BITIO.LIB>

SYNTAX: _ximgetc(ZFILE *fp);

PARAMETER1: ZFILE File descriptor

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Get a single character from a #ximport bit file. This
function utilizes the buffered input (if enabled) to extract a single
character from an ximported (zimported) file. The file read position
is also updated. The return value is the extracted character.

RETURN VALUE:	The next charater in the file.
END DESCRIPTION **********************************************************/

nodebug
int _ximgetc( ZFILE *fp )
{
auto    int ch;
auto    int szin;
auto    BIT_FILE *bit_file;

 ch = 0;
 bit_file = &fp->bf;

#ifdef  BITIO_BUFFER_INPUT
    if(!bit_file->frems) {
	    if(!ximrebuf(bit_file)) {
	        return EOF;
	    }
    }

    ch = *bit_file->locptr++;
  	 bit_file->frems--;
#else
    if ( bit_file->rems )
    {
        xmem2root(&ch, bit_file->fileloc++, 1);
        bit_file->rems--;
    }
    else
        ch = EOF;
#endif

    return(ch);
}

/*** BeginHeader CloseOutputBitFile */
void CloseOutputBitFile( ZFILE *ifp );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
CloseOutputBitFile         <BITIO.LIB>

SYNTAX: void CloseOutputBitFile(ZFILE *ifp);

PARAMETER1: File descriptor to a bit file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Close an output bitfile, first flushing the bit buffers to
the file. With single-bit I/O, an internal buffer is filled a bit at a
time. Using single-character I/O, this single byte buffer is flushed to
the target file whenever the byte fills up. If there are an odd number
of bits at the end of output, the buffer will not be flushed, leaving
unwritten data. This function MUST be called after writing to an output
bitfile to ensure that the buffer is flushed.

RETURN VALUE:	None.
END DESCRIPTION **********************************************************/
nodebug
void CloseOutputBitFile( ZFILE *ifp )
{
    if ( ifp->bf.mask != 0x80 )
        if ( !( (*ifp->oneCharIO)( ifp->bf.rack, ifp ))) {
#ifdef __BITIO_DEBUG
            fatal_error( "Fatal error in CloseBitFile!\n" );
#endif
				return;
    }
    if ( ifp->fl )               // file or stream?
        fclose( &ifp->fl );       // file, close it
}

/*** Beginheader CloseInputBitFile */
void CloseInputBitFile( ZFILE *ifp );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
CloseInputBitFile          <BITIO.LIB>

SYNTAX: void CloseInputBitFile(ZFILE *ifp);

PARAMETER1: File descriptor to a bit file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Close an input bitfile. This function is only needed by
FS2 bitfiles, but should be called for all input bitfiles once reading
is finished.

RETURN VALUE:	None.
END DESCRIPTION **********************************************************/

nodebug
void CloseInputBitFile( ZFILE *ifp )
{
#ifdef __USE_FS2__
    if ( !ifp->xmBool )
        if ( ifp->fl )               // file or stream?
            fclose( &ifp->fl );
#endif
}

/*** Beginheader OutputBit */
void OutputBit( ZFILE *ofp, int bit );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
OutputBit                  <BITIO.LIB>

SYNTAX: void OutputBit(ZFILE *ofp, int bit);

PARAMETER1: File descriptor to a bit file.

PARAMETER2: The bit to be added to the file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Output a single bit to a bitfile. The first parameter is
a bitfile descriptor, and the second is an integer which is either zero
or non-zero. If zero, a 0 bit is written to the file. If non-zero, a
1 bit is written to the file.

RETURN VALUE:	None.
END DESCRIPTION **********************************************************/
nodebug
void OutputBit( ZFILE *ofp, int bit )
{
auto    BIT_FILE    *bit_file;

    bit_file = &ofp->bf;

    if ( bit )
        bit_file->rack |= bit_file->mask;
    bit_file->mask >>= 1;
    if ( bit_file->mask == 0 )
    {
        if ( !(*ofp->oneCharIO)( bit_file->rack, ofp )  ) {
#ifdef __BITIO_DEBUG
            fatal_error( "Fatal error in OutputBit!\n" );
#endif
				return;
        }

        bit_file->rack = 0;
        bit_file->mask = 0x80;
    }
}

/*** Beginheader OutputBits */
void OutputBits( ZFILE *ofp, unsigned long code, int count );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
OutputBits                 <BITIO.LIB>

SYNTAX: void OutputBits(ZFILE *ofp, unsigned long code, int count);

PARAMETER1: File descriptor to a bit file.

PARAMETER2: The bits to be added to the file.

PARAMETER2: The number of bits to be added to the file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Output a number of bits to a bitfile. The first parameter is
a bitfile descriptor. The second parameter is an unsigned long value which
contains the bits to be written. The third parameter is the number of bits
to be written, and has a maximum value of sizeof(unsigned long)*8 (number
of bits in an unsigned long). The input bit field is ordered such that the
most significant bit (the bit at position (1 << (count-1)) in the field)
is the first output. The bits are output in order, the least significant
bit last. The I/O function used to output the entire rack is the oneCharIO
function pointer associated with the output file.

RETURN VALUE:	None.
END DESCRIPTION **********************************************************/
nodebug
void OutputBits( ZFILE *ofp, unsigned long code, int count )
{
auto    unsigned long mask;
auto    BIT_FILE    *bit_file;

    bit_file = &ofp->bf;
    mask = 1L << ( count - 1 );
    while ( mask != 0)
    {
        if ( mask & code )
            bit_file->rack |= bit_file->mask;
        bit_file->mask >>= 1;
        if ( bit_file->mask == 0 )
        {
            if ( !(*ofp->oneCharIO)( bit_file->rack, ofp ) ) {
#ifdef __BITIO_DEBUG
                fatal_error( "Fatal error in OutputBit!\n" );
#endif
						return;
            }

            bit_file->rack = 0;
            bit_file->mask = 0x80;
        }
        mask >>= 1;
    }
}

/*** Beginheader InputBit */
int InputBit( ZFILE *ifp );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
InputBit                   <BITIO.LIB>

SYNTAX: int InputBit(ZFILE *ifp);

PARAMETER1: File descriptor to a bit file.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Input a single bit from a bitfile, using the current location.
The current state of the file's bit mask is used to extract a single bit
from the file. The mask is then updated. If the rack is used up (mask
is 0), then a new character is read into the rack from the file using
the associated oneCharIO function. The return value is either 1 or 0
depending on the value of the bit.

RETURN VALUE:	An integer containing the value of the bit.
END DESCRIPTION **********************************************************/
nodebug
int InputBit( ZFILE *ifp )
{
auto    int value;
auto    BIT_FILE    *bit_file;

    bit_file = &ifp->bf;
    if ( bit_file->mask == 0x80 )
    {
        bit_file->rack = (*ifp->oneCharIO)( ifp );
#ifdef __BITIO_DEBUG
        if ( bit_file->rack == EOF ) {
            fatal_error( "Fatal error in InputBit!\n" );
				return 0;
        }
#endif
    }
    value = bit_file->rack & bit_file->mask;

    // Shift mask and compare
    bit_file->mask >>= 1;
    if ( bit_file->mask == 0 )
        bit_file->mask = 0x80;

    return( value ? 1 : 0 );
}

/*** Beginheader InputBits */
unsigned int InputBits( ZFILE *ifp, int bit_count );
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
InputBits                  <BITIO.LIB>

SYNTAX: unsigned int InputBits(ZFILE *ifp, int bit_count);

PARAMETER1: File descriptor to a bit file.

PARAMETER2: Number of bits to retrieve.

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Input a number of bits from a bitfile from the current
location. The second parameter bit_count is the number of bits
to be extracted from the bitfile ifp. Using the bit mask and
rack associated with the file, the bits are extracted into an
unsigned long, ordered so the first bit read is the most significant
bit of the long. Once the rack has been completely read then a new
byte is read into the rack using the file's oneCharIO function, and
the mask is reset. The return value is the unsigned long containing
the extracted bits.

NOTE: This version of InputBits is optimized. Currently, bit_count
can be a maximum of 16 (sizeof(unsigned int)*8 bits/byte). The
"mask" local variable and function signature may be changed to
unsigned longs to allow up to 32 bit to be read at time. Currently,
this function is only used by the LZ compression algorithm, which
reads a maximum of 12 bits at a time (for a 12-bit index bit count).

RETURN VALUE:	An unsigned long containing the extracted bits.
END DESCRIPTION **********************************************************/

nodebug
unsigned int InputBits( ZFILE *ifp, int bit_count )
{
   auto unsigned int mask; // This can be changed to unsigned long to get up to 32 bits
   auto unsigned int tmp_rack, tmp_mask;
   auto unsigned int return_value;
   auto BIT_FILE     *bit_file;

	// Extract bit file, initialize masks
   bit_file = &ifp->bf;
   return_value = 0;

   // Use these in place of pointer dereference
   // in main loop
	tmp_rack = bit_file->rack;
	tmp_mask = bit_file->mask;

    mask = 1 << ( bit_count - 1 );
    return_value = 0;
    while ( mask != 0)
    {
        if ( tmp_mask == 0x80 )
        {
            tmp_rack = (*ifp->oneCharIO)( ifp );

#ifdef __BITIO_DEBUG
            if ( tmp_rack == EOF ) {
                fatal_error( "Fatal error in InputBits!\n" );
					return 0;
            }
#endif
        }
        if ( tmp_rack & tmp_mask )
                return_value |= mask;
        mask >>= 1;
        tmp_mask >>= 1;
        if ( tmp_mask == 0 )
            tmp_mask = 0x80;
    }

    // Restore file mask and rack
    bit_file->rack = tmp_rack;
	 bit_file->mask = tmp_mask;
    return( return_value );
}

/*** BeginHeader _bitfile_size */
#ifdef __USE_FS2__
long _bitfile_size( long fn );
#endif
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_bitfile_size                  <BITIO.LIB>

SYNTAX: long _bitfile_size(long fn);

PARAMETER1: File "name".

KEYWORDS: bitio, compression, zimport

DESCRIPTION: Calculate the size of a bit file. (Only for FS2 files)
This function is used when the filesystem support is enabled (see
definition of __USE_FS2__ macro at the beginning of the library).
This function is not needed for #ximport (or #zimport) files since
those already have an associated length. The function uses the file
system functions fseek and ftell to calculate the file size. The
return value is a long containing the length of the file.

RETURN VALUE:	The size of the file.
END DESCRIPTION **********************************************************/

#ifdef __USE_FS2__
nodebug
long _bitfile_size( long fn )
{
auto    long eof_ftell;
auto    FILE file;
auto    int  stt;

    stt = fopen_rd( &file, (int)fn );
    if ( stt == 0 )
    {
        fseek( &file, 0L, SEEK_END );
        eof_ftell = ftell( &file );
        fclose( & file );
    }
    else
        eof_ftell = 0;

    return( eof_ftell );
}
#endif

/*** BeginHeader  ********************************************/
#endif
/*** EndHeader ***********************************************/