/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
RN_CFG_BL25.LIB

DESCRIPTION:
	This library contains user configurable definitions for RabbitNet
   Devices and BL2500 series controllers.

SUPPORT LIBS:
	This configuration library may be used as a basis for other controllers
   using RabbitNet Devices.  Libraries should be #used in the following
   order:

		#use "bl25xx.lib"     		1. Controller library
		#use "rn_cfg_bl25.lib"     2. Configuration library
		#use "rnet.lib"            3. RabbitNet library
		#use "rnet_dio.lib"        4. RabbitNet device libraries
		#use "rnet_ain.lib"

REVISION HISTORY:
	10/14/03 pel	Added macro RN_SPI_BAUD.
	05/06/03	pel	Initial creation.

END DESCRIPTION **********************************************************/

/*** Beginheader */
#ifndef __RN_CFG_BL25_LIB
#define __RN_CFG_BL25_LIB
/*** Endheader */

/********************************************************************
 ********************************************************************
 Do not make any changes to the following section. Scroll down to
 the Configuration Section to match your settings
********************************************************************
********************************************************************/

/*** Beginheader */
#define REC_OP 			0x40		//starts a receive operation
#define TRANS_OP 			0x80		//starts a transmit operation
#define REC_TRANS_OP 	0xC0		//starts a transmit and receive operation
#define USE_ALT			0x10		//use alternate port for input, serial ports A or B only
#define DISABLE_REC		0x20		//disable receiver input
#define INTERNAL_CLOCK 	0x0C		//use internal clock, usually master side
#define EXTERNAL_CLOCK 	0x08		//use external clock, usually slave side

/*** Endheader */

/********************************************************************
 ********************************************************************
	Configuration Section
	Make changes to the following to match your settings.
********************************************************************
********************************************************************/

/*** Beginheader  */
/// Status byte abort mask
/// Setting the following bits will only abort transmitting data
///	after the status byte is returned.  This does not affect
///   the status byte and still can be interpreted.
// set any bit combination to abort:
// bit 7 device busy (hard-coded into driver)
// bit 4 communication error
// bit 1 command rejected
// bit 0	watchdog timeout
///
#ifndef RNSTATUSABORT
#define RNSTATUSABORT 0x80     //hard-coded driver default to abort if device busy
#endif

#ifndef RN_MAX_DEV
#define RN_MAX_DEV 10	//max number of devices, not to exceed 72
#endif

#ifndef RN_MAX_DATA
#define RN_MAX_DATA 16	//max number of data bytes in any transaction, not to exceed 255
#endif

#ifndef RN_MAX_PORT
#define RN_MAX_PORT 2	//max number of serial ports, not to exceed 4
#define RN_PORTS 0x03	//bit mask for all ports
#endif

#ifndef RN_SPI_BAUD
#define RN_SPI_BAUD 115200L //SPI baudrate (115200L gives 1 megabit data tranfer)
#endif

/*** EndHeader */

/*** Beginheader rn_sp_info */
void rn_sp_info();

typedef struct
{
	char controltx;
	char controlrx;
	char controlreg;
	char statusreg;
	char datareg;
	long clockrate;
} _RNPORTINFO;

extern _RNPORTINFO rnportinfo[RN_MAX_PORT];

/*** EndHeader */

_RNPORTINFO rnportinfo[RN_MAX_PORT];

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_info						<RN_CFG_BL25.LIB>

SYNTAX:		void rn_sp_info();

DESCRIPTION:	Provides rn_init() with necessary serial port control
					information for BL2500 series controllers.

RETURN VALUE:	None

END DESCRIPTION **********************************************************/
nodebug
void rn_sp_info()
{
	rnportinfo[0].controltx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[0].controlrx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[0].controlreg = SBCR;
	rnportinfo[0].statusreg = SBSR;
	rnportinfo[0].datareg = SBDR;		//SBAR;
	rnportinfo[0].clockrate = RN_SPI_BAUD;

	rnportinfo[1].controltx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[1].controlrx = REC_TRANS_OP|INTERNAL_CLOCK;
	rnportinfo[1].controlreg = SBCR;
	rnportinfo[1].statusreg = SBSR;
	rnportinfo[1].datareg = SBDR;		//SBAR;
	rnportinfo[1].clockrate = RN_SPI_BAUD;
}

/*** Beginheader _rn_sp_fastenable */
root void _rn_sp_fastenable(unsigned int portvalue);
/*** Endheader  */

/* _START FUNCTION DESCRIPTION ********************************************
_rn_sp_fastenable				<RN_CFG_BL25.LIB>

SYNTAX: 			root void _rn_sp_fastenable(unsigned int portvalue);

PARAMETER1:    Value to send send to the I/O port pin.


RETURN VALUE:  None
END DESCRIPTION **********************************************************/
#asm root nodebug
_rn_sp_fastenable::
	ld 	hl,(sp+2) ; address of reg
   ld		a,l
   cp		0
   jr		z,.enablelow
.enablehigh:
	ld		de,PADR
	ld 	hl,PADRShadow
 	ipset	1
	set 	5,(hl)
   ioi 	ldd
	ipres
	ret

.enablelow:
	ld		de,PADR
	ld 	hl,PADRShadow
 	ipset	1
	res	5,(hl)
	ioi 	ldd
	ipres
   ret
#endasm

/*** Beginheader _rn_sp_fastdisable */
root void _rn_sp_fastdisable(unsigned int portvalue);
/*** Endheader  */

/* _START FUNCTION DESCRIPTION ********************************************
_rn_sp_fastdisable				<RN_CFG_BL25.LIB>

SYNTAX: 			root void _rn_sp_fastdisable(unsigned int portvalue);

PARAMETER1:    Value to send send to the I/O port pin.


RETURN VALUE:  None
END DESCRIPTION **********************************************************/
#asm root nodebug
_rn_sp_fastdisable::
	ld 	hl,(sp+2) ; address of reg
   ld		a,l
   cp		0
   jr		nz,.enablelow
.enablehigh:
	ld		de,PADR
	ld 	hl,PADRShadow
	ipset	1
	set 	5,(hl)
   ioi 	ldd
	ipres
	ret

.enablelow:
	ld		de,PADR
	ld 	hl,PADRShadow
 	ipset	1
	res 	5,(hl)
	ioi 	ldd
	ipres
   ret
#endasm




/*** Beginheader rn_sp_enable, rn_sp_disable */

#define rn_sp_enable(portnum)		BitWrPortI(PADR, &PADRShadow, portnum, 5);
#define rn_sp_disable(portnum)	BitWrPortI(PADR, &PADRShadow, !portnum, 5);

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_enable						<RN_CFG_BL25.LIB>

SYNTAX:		void rn_sp_enable(int portnum);

DESCRIPTION:	Macro that enables or asserts BL2500 series controller
					RabbitNet port	chip select prior to	data transfer.

PARAMETER1:		portnum = 0

RETURN VALUE:	None

END DESCRIPTION **********************************************************/
/* START FUNCTION DESCRIPTION ********************************************
rn_sp_disable						<RN_CFG_BL25.LIB>

SYNTAX:		void rn_sp_disable(int portnum);

DESCRIPTION:	Macro that disables or deasserts BL2500 series controller
					RabbitNet port	chip select invalidating data transfer.

PARAMETER1:		portnum = 0

RETURN VALUE:	None

END DESCRIPTION **********************************************************/


/*** Beginheader rn_sp_init */
void rn_sp_init(int port, long clkrate);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_init						<RN_CFG_BL25.LIB>

SYNTAX:		void rn_sp_init(int portnum, long clkrate);

DESCRIPTION:	Configures and initializes an BL2500 series controller
					RabbitNet port	as a clocked serial port.
					This call is used rn_init().

PARAMETER1:		portnum = 0
PARAMETER2:		baudrate, user defines macro RN_SPI_BAUD. If not defined,
					will default to 115200L which gives 1 megabit data transfer.

RETURN VALUE:	None

SEE ALSO:		rn_sp_close

END DESCRIPTION **********************************************************/
nodebug
root void rn_sp_init(int port, long clkrate)
{
	auto int tdivisor;

	tdivisor = (int)((freq_divider * 19200.0/(float)clkrate + 0.5) - 1L);
	BitWrPortI(PCFR, &PCFRShadow, 1, 4);
	WrPortI(TAT5R, &TAT5RShadow, tdivisor);
	WrPortI(SBCR, &SBCRShadow, INTERNAL_CLOCK);
	WrPortI(SBER, &SBERShadow, 0x00);
}

/*** Beginheader rn_sp_close */
void rn_sp_close(int port);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_sp_close						<RN_CFG_BL25.LIB>

SYNTAX:		void rn_sp_close(int port);

DESCRIPTION:	Deactivates BL2500 series controller RabbitNet port as
					a clocked serial port.
					This call is used rn_init().

PARAMETER1:		portnum = 0

RETURN VALUE:	None

SEE ALSO:		rn_sp_init

END DESCRIPTION **********************************************************/
nodebug
void rn_sp_close(int port)
{
	BitWrPortI(PCFR, &PCFRShadow, 0, 4);
	BitWrPortI(PCDR, &PCDRShadow, 1, 4);
}

/*** BeginHeader */
#endif
/*** EndHeader */