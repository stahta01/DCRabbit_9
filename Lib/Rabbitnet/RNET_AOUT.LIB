/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** Beginheader */
#ifndef __RNET_AOUT_LIB
#define __RNET_AOUT_LIB
/*** Endheader */

/* START LIBRARY DESCRIPTION *********************************************
RNET_AIN.LIB

DESCRIPTION:	Support for RabbitNet RN1300 DAC board.


SUPPORT LIBS:

REVISION HISTORY:
	01/20/04	pel	Added support device	timing.
	06/20/03	Ek		Initial creation.

END DESCRIPTION **********************************************************/

/*** Beginheader rn_AoutData, DacCal */
// macro that user can identify with in applications
#ifndef RN1300
#define RN1300 RN1300A
#endif

// this macro overrides default microcode timing
#ifndef _RN1300TIME
#define _RN1300TIME {tCS=2; tCD=29; tDD=17; tDS=20; tMC=6;}
#endif


///// Command Set
/// regnum is octal
/// datalen is byte count
/////
/// write registers
#define AOUTW10	{regnum=0010; datalen=1;}	//AOUT00 set DAC board mode of operation

#define AOUTW20	{regnum=0020; datalen=2;}	//AOUT00 raw data value
#define AOUTW21	{regnum=0021; datalen=2;}	//AOUT01 raw data value
#define AOUTW22	{regnum=0022; datalen=2;}	//AOUT02 raw data value
#define AOUTW23	{regnum=0023; datalen=2;}	//AOUT03 raw data value
#define AOUTW24	{regnum=0024; datalen=2;}	//AOUT04 raw data value
#define AOUTW25	{regnum=0025; datalen=2;}	//AOUT05 raw data value
#define AOUTW26	{regnum=0026; datalen=2;}	//AOUT06 raw data value
#define AOUTW27	{regnum=0027; datalen=2;}	//AOUT07 raw data value

#define AOUTW30	{regnum=0030; datalen=8; key0=0x56; key1=0xAE;}	//AOUT00 gain, offset
#define AOUTW31	{regnum=0031; datalen=8; key0=0x56; key1=0xAE;}	//AOUT01 gain, offset
#define AOUTW32	{regnum=0032; datalen=8; key0=0x56; key1=0xAE;}	//AOUT02 gain, offset
#define AOUTW33	{regnum=0033; datalen=8; key0=0x56; key1=0xAE;}	//AOUT03 gain, offset
#define AOUTW34	{regnum=0034; datalen=8; key0=0x56; key1=0xAE;}	//AOUT04 gain, offset
#define AOUTW35	{regnum=0035; datalen=8; key0=0x56; key1=0xAE;}	//AOUT05 gain, offset
#define AOUTW36	{regnum=0036; datalen=8; key0=0x56; key1=0xAE;}	//AOUT06 gain, offset
#define AOUTW37	{regnum=0037; datalen=8; key0=0x56; key1=0xAE;}	//AOUT07 gain, offset

#define AOUTW40	{regnum=0040; datalen=1}	//Write directly to the DAC device
#define AOUTW41	{regnum=0041; datalen=0;}	//Strobe the DAC to update all channels


/////
/// read registers
#define AOUTR30	{regnum=0130; datalen=6;}	//AOUT00 gain, offset
#define AOUTR31	{regnum=0131; datalen=6;}	//AOUT01 gain, offset
#define AOUTR32	{regnum=0132; datalen=6;}	//AOUT02 gain, offset
#define AOUTR33	{regnum=0133; datalen=6;}	//AOUT03 gain, offset
#define AOUTR34	{regnum=0134; datalen=6;}	//AOUT04 gain, offset
#define AOUTR35	{regnum=0135; datalen=6;}	//AOUT05 gain, offset
#define AOUTR36	{regnum=0136; datalen=6;}	//AOUT06 gain, offset
#define AOUTR37	{regnum=0137; datalen=6;}	//AOUT07 gain, offset

#define RNMINDACCOUNT	0
#define RNMAXDACCOUNT	4095


typedef struct
{
	char key0;
   char key1;
   float gain;
   int offset;
} rn_wrCalData;

typedef struct
{
   float gain;
   int offset;
} rn_rdCalData;


typedef struct
{
 	rn_rdCalData cal[8];
} DacCal;

/*** EndHeader */


/*** BeginHeader rn_anaOutConfig */
int rn_anaOutConfig(int handle, char config, int opmode, int reserved);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_anaOutConfig		<RNET_AOUT.LIB>

SYNTAX:			int rn_anaOutConfig(int handle, char config,
                                   int opmode, int reserved);

DESCRIPTION:	Configures the DAC board for a desired voltage range of
					operation. Once the DAC board has been configured, use
					rn_anaOut(), rn_anaOutVolts, and rn_anaOutStrobe functions
					for controlling the DAC outputs.This function is non-
					reentrant.

PARAMETER1:		Address index to device information. Use rn_device() or
					rn_find to establish handle.

PARAMETER2:		Configuration code 0x00 - 0x07, sets the voltage range
					of the DAC board:

					==========================================================
					Config code 	Ch0&1 		Ch2-7
					----------------------------------------------------------
 	 				  0				2.5V	 		10V
	   			  1		   	  5V	 		10V
	  				  2		 		 10V	 		10V	Default
	   			  3		   	  5V	 		20V
	   			  4		 		 10V	 		20V
	   			  5		 		 20V	 		20V
					==========================================================
					Note: The DAC board is set for 0-20 volts after reset.

PARAMETER3:		Mode of operation:
            	0 = Asynchronous....outputs will be updated at the time
            		                 rawdata is written.
					1 = Synchronous.....outputs will be updated when
					                    rn_anaOutStrobe is executed.

					Note: The DAC board is in Asynchronous mode of operation
							after reset.

PARAMETER4:		Reseverd


RETURN VALUE:	-1, device information indicates no connection,
					Status byte from previous command.

SEE ALSO:		rn_anaOut, rn_anaOutVolts, rn_anaOutStrobe

END DESCRIPTION **********************************************************/

nodebug
int rn_anaOutConfig(int handle, char config, int opmode, int reserved)
{
	auto int msgcode, regnum, datalen;
	auto char tmpdata[4];
	auto rn_devstruct *devaddr;
   auto int i;
   auto char rnData;

   if(opmode)
   	config = config | 0x08;

 	AOUTW10;
   rnData = config;
   msgcode = rn_write(handle, regnum, (char*)&rnData, datalen);

   for(i=0; i <20; i++);

	// Wait for for slave to become ready
  	C0R00;
  	do {
 		msgcode = rn_write(handle, regnum, tmpdata, datalen);
      if (msgcode&(RNCMDREJ|RNWDTO))	//cmd reject or wdtimeout
        	break;
   }while ((msgcode&RNDEVSTATE)== RNBUSY);
	return (msgcode);
}





/*** BeginHeader rn_anaOutStrobe */
	int rn_anaOutStrobe(int handle, int reserved);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_anaOutStrobe		<RNET_AOUT.LIB>

SYNTAX:			int rn_anaOutStrobe(int handle, int reserved);

DESCRIPTION:	Strobes the DAC board which will update all DAC outputs
					with the rawdata values previously written (or default
					value of zero).

					Note: This function is only valid if the DAC board is put
					      in Synchronous Mode of operation  with using the
					      rn_anaOutConfig function.


PARAMETER1:		Address index to device information. Use rn_device() or
					rn_find to establish handle.
PARAMETER2:		Reseverd


RETURN VALUE:	-1, device information indicates no connection,
					Status byte from previous command.

SEE ALSO:		rn_anaOutConfig, rn_anaOut, rn_anaOutVolts

END DESCRIPTION **********************************************************/

nodebug
int rn_anaOutStrobe(int handle, int reserved)
{
	auto int msgcode, regnum, datalen, tmpdata;

   AOUTW41;	//read conversion register
   do
   {
 		msgcode = rn_write(handle, regnum, (char*)&tmpdata, datalen);
      if (msgcode&(RNCMDREJ|RNWDTO))	//cmd reject or wdtimeout
        	break;
	}	while ((msgcode&RNDEVSTATE)==RNBUSY);
   return (msgcode);
}


/*** BeginHeader rn_anaOut */
int rn_anaOut(int handle, int channel, int rawdata,
              int reserved);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_anaOut					<RNET_AOUT.LIB>

SYNTAX:			int rn_anaOut(int handle, int channel, int rawdata,
                             int reserved);

DESCRIPTION:	Sets an analog output channel to a voltage that corresponds
               to the rawdata value. This function is non-reentrant.

               If the DAC board is set for asynchronous mode of operation
               (default mode) the output channel will be updated at the
               time the rawdata is being written.

               If the DAC board was set for synchronous mode of operation
               all DAC outputs will be updated with the rawdata values
               previously written (or default value of zero), after
               executing the rn_anaOutStrobe function.

					The voltage range of the DAC outputs will be 0-20v
					(default), or one of the other voltage range options
					previously set with the rn_anaInConfig function. Here’s
					a list of the voltage range configurations:

 					==========================================================
					Config code 	Ch0&1 		Ch2-7
					----------------------------------------------------------
 	 				  0				2.5V	 		10V
	   			  1		   	  5V	 		10V
	  				  2		 		 10V	 		10V	Default
	   			  3		   	  5V	 		20V
	   			  4		 		 10V	 		20V
	   			  5		 		 20V	 		20V
					==========================================================

PARAMETER1:		Address index to device information. Use rn_device() or
					rn_find to establish handle.
PARAMETER2:		Channel number 0 to 7 for AOUT00-AOUT07.
PARAMETER3:	 	Rawdata value (2 bytes).
PARAMETER4:		Reseverd


RETURN VALUE:	-1, device information indicates no connection,
               Status byte from previous command.

SEE ALSO:		rn_anaOutConfig, rn_anaOutVolts, rn_anaOutStrobe

END DESCRIPTION **********************************************************/

nodebug
int rn_anaOut(int handle, int channel, int rawdata, int reserved)
{
	auto int msgcode, regnum, datalen, rnData;

   rnData = rawdata;
  	if(rawdata > RNMAXDACCOUNT || rawdata < RNMINDACCOUNT)
	{
		rawdata = (rawdata > RNMAXDACCOUNT) ? RNMAXDACCOUNT : 0;
	}
   AOUTW20;	// Send rawdata to given DAC channel
  	regnum+=channel;
   do
   {
 		msgcode = rn_write(handle, regnum, (char*)&rnData, datalen);
      if (msgcode&(RNCMDREJ|RNWDTO))	//cmd reject or wdtimeout
        	break;
	}	while ((msgcode&RNDEVSTATE)==RNBUSY);
   return (msgcode);
}




/*** BeginHeader rn_anaOutVolts */
int rn_anaOutVolts(int handle,  int channel,  float voltage,
                   DacCal *table, int reserved);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_anaOutVolts					<RNET_AOUT.LIB>

SYNTAX:			int rn_anaOutVolts(int handle, int channel, float voltage,
                   					 DacCal *table, int reserved);

DESCRIPTION:	Sets the analog output channel to a voltage with using
					previously set calibration constants to obtain the desired
					voltage. This function is non-reentrant.

					If the DAC board is set for asynchronous mode of operation
					(default mode) the output channel will be updated at the
					time the rawdata is being written.

					If the DAC board was set to synchronous mode of operation
					all DAC outputs will be updated with the rawdata values
					previously written (or default value of zero), after
					executing the rn_anaOutStrobe function.

					The voltage range of the DAC outputs will be 0-10v
					(default), or one of the other voltage range options
					previously set with the rn_anaInConfig function. Here’s
					a list of the voltage range configurations:

 					==========================================================
					Config code 	Ch0&1 		Ch2-7
					----------------------------------------------------------
 	 				  0				2.5V	 		10V
	   			  1		   	  5V	 		10V
	  				  2		 		 10V	 		10V 	Default
	   			  3		   	  5V	 		20V
	   			  4		 		 10V	 		20V
	   			  5		 		 20V	 		20V
					==========================================================

PARAMETER1:		Address index to device information. Use rn_device() or
               rn_find to establish handle.
PARAMETER2:		Channel number 0 to 7 for AOUT00-AOUT07.
PARAMETER3:		The voltage desired on the specified output channel.
PARAMETER4:	 	Calibration constants table structure pointer.

					Note: Must run the rn_anaOutRdCalib function prior to
               executing this function so the calibration table will
               contain valid data. Here's an example:

               for(channel=0; channel < 8; channel++)
      			{
      				rn_anaOutRdCalib(device0, channel, &DacCalTable1, 0);
      			}

PARAMETER5:		Reseverd

RETURN VALUE:	-1, device information indicates no connection,
					Status byte from previous command.

SEE ALSO:		rn_anaOutConfig, rn_anaOut, rn_anaOutStrobe

END DESCRIPTION **********************************************************/

nodebug
int rn_anaOutVolts(int handle,  int channel,  float voltage,
                   DacCal *table, int reserved)
{
	auto int msgcode, regnum, datalen, rawdata;

   rawdata = (int)(table->cal[channel].offset - (voltage/table->cal[channel].gain));
	if(rawdata > RNMAXDACCOUNT || rawdata < RNMINDACCOUNT)
	{
		rawdata = (rawdata > RNMAXDACCOUNT) ? RNMAXDACCOUNT : 0;
	}

   AOUTW20;	//read conversion register
  	regnum+=channel;
   do
   {
 		msgcode = rn_write(handle, regnum, (char*)&rawdata, datalen);
      if (msgcode&(RNCMDREJ|RNWDTO))	//cmd reject or wdtimeout
        	break;
	}	while ((msgcode&RNDEVSTATE)==RNBUSY);
   return (msgcode);
}



/*** BeginHeader rn_anaOutCalib */
int rn_anaOutCalib(int channel,
                   int value1,  float volts1,
                   int value2, float volts2,
                   DacCal *table, int reserved);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_anaOutCalib					<RNET_AOUT.LIB>

SYNTAX:        int rn_anaOutCalib(int channel,
                                  int value1,  float volts1,
                                  int value2, float volts2,
                                  DacCal *table, int reserved);

DESCRIPTION:	Calibrates the response of an analog output channel
               as a linear function using the two conversion points
 					provided. Values are calculated and the results are to
               be sent to the analog output device using the function
 					anaOutWrCalib.

					Each channel will have the following information:
					- linear constant or gain.
					- voltage offset.

					Note: Analog output devices are factory calibrated. This
							function	should be used where circuitry requires
							recalibration or calibration constants were corrupted
							in the device.


PARAMETER1:		Channel number 0 to 7 for AOUT00-AOUT07.
PARAMETER2:		The first raw analog output value (0 - 4095).
PARAMETER3:		The voltage corresponding to the first input value
PARAMETER4:	 	The second raw analog output value (0 - 4095).
PARAMETER5:		The voltage corresponding to the second input value
PARAMETER6:	 	Calibration constants table structure pointer.
PARAMETER7:		Reseverd

RETURN VALUE:	0,  if sucessful.
					-1, if not able to make calibration constants.

SEE ALSO:		rn_anaOutWrCalib, rn_anaOutRdCalib


END DESCRIPTION **********************************************************/

nodebug
int rn_anaOutCalib(int channel,
                   int value1,  float volts1,
                   int value2,  float volts2,
                   DacCal *table, int reserved)
{
	auto int offset;
	auto float gain;

	if( (volts1 == volts2) || (value1 == value2) ) return -1;
   	if( (volts1 == volts2) || (value1 == value2) ) return -1;

	offset = (int) ((volts2*value1 - volts1*value2)/(volts2-volts1));
	if (offset == value1)
		gain = volts2/(offset-value2);
	else
		gain = volts1/(offset-value1);

	table->cal[channel].offset = offset;
   table->cal[channel].gain = gain;
	return 0;
}



/*** BeginHeader rn_anaOutWrCalib */
int rn_anaOutWrCalib(int handle, int channel, DacCal *table, int reserved);

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_anaOutWrCalib					<RNET_AOUT.LIB>

SYNTAX:			int rn_anaOutWrCalib(int handle, int channel,
					                     DacCal *table, int reserved);


DESCRIPTION:	Writes the calibration constants, gain and offset,
					previously calculated by rn_anaInCalib(), into the
					analog device.

					Note: Analog input devices are factory calibrated. This
							function	should be used where circuitry requires
							recalibration or calibration constants were corrupted
							in the device.


PARAMETER1:		Address index to device information. Use rn_device()
					or rn_find to establish handle.
PARAMETER2:		Channel number 0 to 7 for AOUT00-AOUT07.
PARAMETER3:	 	Calibration constants table structure pointer.
PARAMETER4:		Reseverd

RETURN VALUE:	-1, device information indicates no connection,
					Status byte from previous command.

SEE ALSO:		rn_anaOutRdCalib, rn_anaOutCalib


END DESCRIPTION **********************************************************/

nodebug
int rn_anaOutWrCalib(int handle, int channel, DacCal *table, int reserved)
{

	auto int msgcode, regnum, datalen;
	auto char tmpdata[8], key0, key1;
	auto rn_devstruct *devaddr;
   rn_wrCalData WrCal;

  	AOUTW30;	//write gain and offset register
   regnum+=channel;
   WrCal.key0 = key0;
   WrCal.key1 = key1;
   memcpy((char*)&WrCal.gain, (char*)&table->cal[channel], 6);
   do {
 		msgcode = rn_write(handle, regnum, (char*)&WrCal, datalen);
      if (msgcode&(RNCMDREJ|RNWDTO))	//cmd reject or wdtimeout
        	break;
  	}	while ((msgcode&RNDEVSTATE)==RNBUSY);
   rn_msDelay(12);
	return (msgcode);
}



/*** BeginHeader rn_anaOutRdCalib */
int rn_anaOutRdCalib(int handle, int channel, DacCal *table, int reserved);

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_anaOutRdCalib					<RNET_AOUT.LIB>

SYNTAX:			int rn_anaOutRdCalib(int handle, int channel,
					                     DacCal *table, int reserved);


DESCRIPTION:	Reads the device calibration constants, gain and offset,
					into a instance of a calibration descriptor table
					rn_dacCalTable.

PARAMETER1:		Address index to device information. Use rn_device()
					or rn_find to establish handle.
PARAMETER2:		Channel number 0 to 7 for AOUT00-AOUT07.
PARAMETER3:	 	Calibration constants table structure pointer.
PARAMETER4:		Reseverd

RETURN VALUE:	-1, device information indicates no connection,
					Status byte from previous command.

SEE ALSO:		rn_anaOutWrCalib, rn_anaOutCalib


END DESCRIPTION **********************************************************/

nodebug
int rn_anaOutRdCalib(int handle, int channel, DacCal *table, int reserved)
{
	auto int msgcode, regoffset, regnum, datalen;
	auto char tmpdata[RN_MAX_DATA];
	auto rn_devstruct *devaddr;

   AOUTR30;
   regnum+=channel;
   do {
     	msgcode = rn_read(handle, regnum, (char*)&table->cal[channel], datalen);
      if (msgcode&(RNCMDREJ|RNWDTO))	//cmd reject or wdtimeout
        	break;
   }	while ((msgcode&RNDEVSTATE)==RNBUSY);
	return (msgcode);
}




/*** BeginHeader _rn_wrDACdevice */
int _rn_wrDACdevice(int handle, char dac_reg, char dac_data, int reserved);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION *************************************************
_rn_wrDACdevice					<RNET_AIN.LIB>

SYNTAX:        int _rn_wrDACdevice(int handle, char dac_reg, char dac_data,
                                   int reserved)
DESCRIPTION:   Internal.
               Writes command byte and data directly to the DAC device.

PARAMETER1:		Address index to device information. Use rn_device()
					or rn_find to establish handle.
PARAMETER2:    DAC register to be written.
PARAMETER3:		Data to be written to specified register.
PARAMETER4:		Reserved.  Set as 0.

RETURN VALUE:	-1, device information indicates no connection,
					Status byte from previous command

END DESCRIPTION ***************************************************************/

nodebug
int _rn_wrDACdevice(int handle, char dac_reg, char dac_data, int reserved)
{
	auto int msgcode, regnum, datalen;
	auto char tmpdata[4];

   tmpdata[0] = dac_reg;
   tmpdata[1] = dac_data;
  	AOUTW41;
   msgcode = rn_write(handle, regnum, tmpdata, datalen);
	return (msgcode);
}

/*** BeginHeader */
#endif
/*** EndHeader */









