/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
RNET_DRIVER.LIB

DESCRIPTION:	Support drivers for RabbitNet SPI interface.

SUPPORT LIBS:

REVISION HISTORY:
	02/12/04 ek		Preserved register ix in the _mosi_driver function for
   					nested code applications.     
	10/10/03 pel	Increased receive status byte to 2 bytes for a no connect
   					status abort which returns -1.  _mosi_driver() affected.
   07/25/03 ek		Remove the _reverse_bits routine, and put it inline for
                  improve performance.
	05/06/03	pel	Initial creation.

END DESCRIPTION **********************************************************/

/*** Beginheader */
#ifndef __RNET_DRIVER_LIB
#define __RNET_DRIVER_LIB

/*** Endheader */


/*** BeginHeader _mosi_driver */
root void _mosi_driver(int count, void *transmit_str, void *receive_str, void *delay, void *control);
/*** EndHeader */

#ifndef BIT_REVERSE_TABLE
const char RevBitTable[] = {
0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0,
0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8, 0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8,
0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC,
0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2, 0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2,
0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6,
0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE, 0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9,
0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5, 0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3,
0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB, 0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
};
#endif


#asm root nodebug
;;;control data and register address start must be in iy
;;;entry data byte must be in a
;;;return value in byte a
;;;if R2000 CPU is detected, a sequential control write then
;;; read will go into effect, otherwise a simultaneous write/read
_txrxbyte::
	exx
   ld		c,a					; copy the byte value
	xor	a						; clear flags
	ld		b,a					; bc = offset into BitRev table
	ld		hl,RevBitTable 		; get address of table
	add	hl,bc				  	; calculate address of bit reversed byte
	ld		a,(hl)				; get new byte

	ld		h,0
	ld		l,(iy+4)				;get data reg
	ioi	ld (hl),a			;load data byte into data reg

	ld		l,(iy+2)				;get control reg
	ld		a,(iy+0)				;control tx value
#if (CPU_ID_MASK(_CPU_ID_) < R3000)
	ld		c,(iy+1)				;control rx value
#endif
	ipset	3						;disable interrupts so the next two uninterrupted
	ioi	ld (hl),a			;load control tx into control reg
#if (CPU_ID_MASK(_CPU_ID_) < R3000)
	ioi	ld (hl),c			;load control rx into control reg
#endif
	ipres							; enable other interrupts
	ld		l,(iy+3)				;get status reg
.txshiftdone:
	ioi	ld	a,(hl)			;wait for empty shift reg
	bit	2,a
	jp		nz,.txshiftdone
.rxdatafull:					;check if receive buffer is full
	ioi	ld	a,(hl)
	bit	7,a					;wait buffer full
	jr		z,.rxdatafull
	ld 	l,(iy+4)				;get data reg
	ioi	ld a,(hl)			;get receive byte from data reg

   ld		c,a					; copy the byte value
	xor	a						; clear flags
	ld		b,a					; bc = offset into BitRev table
	ld		hl,RevBitTable 		; get address of table
	add	hl,bc				  	; calculate address of bit reversed byte
	ld		a,(hl)				; get new byte

 	exx
	ret
#endasm


/* START _FUNCTION DESCRIPTION ********************************************
_mosi_driver					<RNET_DRIVER.LIB>

SYNTAX:	void _mosi_driver(int count, void *transmit_str,
								void *receive_str, void *delay, void *control)

DESCRIPTION:	Internal.
					Transmits data out byte by byte to devices till end of data.
					Bytes	are received from devices with each byte sent out.
					Each byte requires a variable delay and port control data.

	reg c calculation notes:
	iterations = (delay*614400*freq_divider)/clockconstant
 	clockconstant = 7
 	max iterations = 255
 	therefore:
	@22MHz => 10 us = 32 itns  80 us = 255 itns
 	@29MHz => 10 us = 42 itns, 61 us = 255 itns
	@44MHz => 10 us = 62 itns, 40 us = 255 itns

PARAMETER1:		data length
PARAMETER2:		address of the mosi string
PARAMETER3:		address of the miso string
PARAMETER4:		address of the delay string
PARAMETER5:		address of the control string

RETURN VALUE:	None

END DESCRIPTION **********************************************************/

nodebug
root void _mosi_driver(int count, void *transmit_str, void *receive_str, void *delay, void *control)
{
#asm
	push	ix
   push	iy
	ld		hl,(sp+@sp+count+4)			;number of bytes to transmit
	ld		b,l

	ld		hl,(sp+@sp+delay+4)			;byte delay string
	ld		ix,hl

	ld		hl,(sp+@sp+control+4)		;start of byte send/receive control value string
	ld		iy,hl

	ld		hl,(sp+@sp+receive_str+4)	;start of receive string
	ex		de,hl
	ld		hl,(sp+@sp+transmit_str+4)	;start of transmit string
.test1:
	ld		c,(ix)					;9, delay from cs to cmd
.delay1:								;
	dec	c							;2, delay iterations
	jr		nz,.delay1				;5, clockconstant = 7

	ld		a,(hl)					;5, transmit first byte
	call	_txrxbyte				;12
	ld		(de),a					;7, store receive value
   and	RNSTATUSABORT 			;4, hard-code busy check into status abort
   jp		nz,.statusabort		;7,if any flags are set jump out

	inc	de							; advance to upper byte address
	ld		a,00h                ; clear upper byte
   ld		(de),a
   dec	b
   jp		z,.end
.sendallbytes:
	inc	de							;2,point to next dest address
	inc 	hl							;2,point to next source address
	inc	ix							;2,next delay
	ld		c,(ix)					;9, delay from cs to cmd
.bdelay:								;
	dec	c							;2, delay iterations
	jr		nz,.bdelay				;5, clockconstant = 7

	ld		a,(hl)					;5, transmit bytes
	call	_txrxbyte				;12
	ld		(de),a					;7,store receive value, start clock

	djnz	.sendallbytes			;5

	ld		c,(ix)					;9, delay
.csdelay:							;
	dec	c							;2,
	jr		nz,.csdelay				;5, clockconstant = 7
   jp		.end
.statusabort:
	ld		a,(de)
   inc	de                   ; advance to upper byte address
   cp		0ffh						; check for a no connect status
   jp		z,.signextend
	xor	a                    ; otherwise clear upper byte
   ld		(de),a
   jp		.end
.signextend:
   ld		(de),a					; signed extend return status
.end:
   pop	iy
   pop	ix
#endasm
}


/*** BeginHeader */
#endif
/*** EndHeader */