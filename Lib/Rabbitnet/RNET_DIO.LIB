/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** Beginheader */
#ifndef __RNET_DIO_LIB
#define __RNET_DIO_LIB
/*** Endheader */

/* START LIBRARY DESCRIPTION *********************************************
RNET_DIO.LIB

DESCRIPTION:	Support for RabbitNet RN1100 Digital I/O boards.

SUPPORT LIBS:

REVISION HISTORY:
	02/10/04	ek		Changed the rn_digOutConfig function to properly
   					initialize the flash keys.
	01/20/04	pel	Added support device	timing.
   10/10/03	pel	Put rn_iobitmask into its own beginheader.
	05/06/03	pel	Initial creation.

END DESCRIPTION **********************************************************/

/*** Beginheader */
// macro that user can identify with in applications
#ifndef RN1100
#define RN1100 RN1100A
#endif

// this macro overrides default microcode timing
#ifndef _RN1100TIME
#define _RN1100TIME {tCS=2; tCD=26; tDD=12; tDS=15; tMC=15;}
#endif


///// Command Set
/// regnum is octal
/// datalen is byte count
/////
#define DIOR10	{regnum=0110; datalen=1;}	//OUT0-7 shadow
#define DIOR11	{regnum=0111; datalen=1;}	//OUT8-15 shadow
#define DIOR12	{regnum=0112; datalen=1;}	//IN0-7 unglitched data
#define DIOR13	{regnum=0113; datalen=1;}	//IN8-15 unglitched data
#define DIOR14	{regnum=0114; datalen=1;}	//IN15-23 unglitched data
#define DIOR16	{regnum=0116; datalen=2;}	//Out Banks 0 & 1 safe state
#define DIOR17	{regnum=0117; datalen=3;}	//IN00-IN23 unglitch data

#define DIOR30	{regnum=0130; datalen=2;}	//AIN0 raw, msbyte first
#define DIOR31	{regnum=0131; datalen=2;}	//AIN1 raw, msbyte first
#define DIOR32	{regnum=0132; datalen=2;}	//AIN2 raw, msbyte first
#define DIOR33	{regnum=0133; datalen=2;}	//AIN3 raw, msbyte first

#define DIOR40	{regnum=0140; datalen=8;}	//AIN00 raw lsbf data and constants
#define DIOR41	{regnum=0141; datalen=8;}	//AIN01 raw lsbf data and constants
#define DIOR42	{regnum=0142; datalen=8;}	//AIN02 raw lsbf data and constants
#define DIOR43	{regnum=0143; datalen=8;}	//AIN03 raw lsbf data and constants

#define DIOR47	{regnum=0147; datalen=1;}	//AD Control status

#define DIOW10	{regnum=0010; datalen=1;}	//OUT0-7 data
#define DIOW11	{regnum=0011; datalen=1;}	//OUT8-15 data
#define DIOW12	{regnum=0012; datalen=1;}	//OUT0-7 data bit reset
#define DIOW13	{regnum=0013; datalen=1;}	//OUT8-15 data bit reset
#define DIOW14	{regnum=0014; datalen=1;}	//OUT0-7 data bit set
#define DIOW15	{regnum=0015; datalen=1;}	//OUT8-15 data bit set
#define DIOW16	{regnum=0016; datalen=4; key0=0x56; key1=0xAE;}	//Out banks 0 & 1	safe state
#define DIOW17	{regnum=0017; datalen=2;}	//OUT00-OUT15 data

#define DIOW40	{regnum=0040; datalen=8; key0=0x56; key1=0xAE;}	//AIN0 constants
#define DIOW41	{regnum=0041; datalen=8; key0=0x56; key1=0xAE;}	//AIN1 constants
#define DIOW42	{regnum=0042; datalen=8; key0=0x56; key1=0xAE;}	//AIN2 constants
#define DIOW43	{regnum=0043; datalen=8; key0=0x56; key1=0xAE;}	//AIN3 constants

#define DIOW47	{regnum=0047; datalen=1;}	//AD Control

/*** Endheader */


/*** BeginHeader	rn_digOutConfig */
int rn_digOutConfig(int handle, int senddata);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_digOutConfig				<RNET_DIO.LIB>

SYNTAX:	int rn_digOutConfig(int handle, int senddata);

DESCRIPTION:	Configures output channels 0 to 15 to a "safe state"
					after power-up	for sinking or sourcing outputs.	Channels
               are at high impedance at power-up. Factory default sets
               safe state as zeros, considered a disabled state for
               sourcing outputs.

					This function will first compare the requested states and
					values in "safe state" register.  If there is a match,
					the requested states will not be rewritten to the device.
					This will eliminate unnecessary writes to the the device.

					This function saves states to flash and therefore should
               be called once. A hardware reset, rn_reset() and a read
               of reset register, rn_rst_status() must be issued after
               this function is called.

PARAMETER1:		Address index to device information. Use rn_device()
					or rn_find to establish handle.
PARAMETER2:		A bitwise logic representing a state of 0 or 1 for
					each channel. Most significant bit represents channel 15.

               0 = disables sourcing outputs,
               1 = disables sinking outputs.

RETURN VALUE:	-1, device information indicates no connection
               or status byte from previous command.

SEE ALSO:		rn_digOut

END DESCRIPTION **********************************************************/

nodebug
int rn_digOutConfig(int handle, int senddata)
{
	auto int msgcode, regnum, datalen;
	auto char tmpdata[4], key0, key1;
   auto char *rdata;


	DIOR16;	 	//get register and byte length for both output banks
	msgcode = rn_read(handle, regnum, tmpdata, datalen);

   //if device is connected and ready
  	if ( !((msgcode&RNDEVSTATE)==RNBUSY) && !(msgcode&(RNCMDREJ|RNWDTO)) )
	{
		if (senddata != *(int*)tmpdata)
		{
      	DIOW16;
			tmpdata[0] = key0;
			tmpdata[1] = key1;
 			tmpdata[2] = senddata&0xff;
			tmpdata[3] = senddata>>8;
		   do {
				msgcode = rn_write(handle, regnum, tmpdata, datalen);
	         rn_msDelay(6);
   		   if (msgcode&(RNCMDREJ|RNWDTO))	//cmd reject or wdtimeout
       			break;
		  	}	while ((msgcode&RNDEVSTATE)==RNBUSY);
		}
	}
	return (msgcode);
}


/*** BeginHeader rn_digOut */
int rn_digOut(int handle, int channel, char senddata, int reserved);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_digOut						<RNET_DIO.LIB>

SYNTAX:			int rn_digOut(int handle, int channel, char senddata, int reserved);

DESCRIPTION:	Sets the state of a digital output

PARAMETER1:		Address index to device information. Use rn_device()
					or rn_find to establish handle.
PARAMETER2:		Output channel number 0 to 15,
PARAMETER3:		Output data. 1 = set bit, 0 = reset bit.
PARAMETER4:		Reserved.  Set as 0.

RETURN VALUE:	-1, device information indicates no connection
               or status byte from previous command.

SEE ALSO:		rn_digOutConfig, rn_digBankOut, rn_digIn

END DESCRIPTION **********************************************************/
nodebug
int rn_digOut(int handle, int channel, char senddata, int reserved)
{
	auto int msgcode, regoffset, regnum, datalen;
	auto char tmpdata[2];

	if (senddata==1)
		regoffset=0002;
	else
		regoffset=0000;

	if (channel <= 7)
	{
		DIOW12;
	}
	else
	{
		DIOW13;
	}

	regnum+=regoffset;
	tmpdata[0] = channel&0x0007;

   do {
		msgcode = rn_write(handle, regnum, tmpdata, datalen);
      if (msgcode&(RNCMDREJ|RNWDTO))	//cmd reject or wdtimeout
       	break;
  	}	while ((msgcode&RNDEVSTATE)==RNBUSY);


	return (msgcode);
}


/*** BeginHeader	rn_digBankOut */
int rn_digBankOut(int handle, int bank, int senddata, int reserved);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_digBankOut						<RNET_DIO.LIB>

SYNTAX:			int rn_digBankOut(int handle, int bank, int senddata, int reserved);

DESCRIPTION:	Writes the state of a block of designated digital
					output channels.  First bank consists of channels
					0-7, second bank consists of 8-15, etc.

PARAMETER1:		Address index to device information. Use rn_device()
					or rn_find to establish handle.
PARAMETER2:		0 for both bank of digital outputs 0 to 15,
					1 for bank of digital outputs 0 to 7,
					2 for bank of digital outputs 8 to 15,
PARAMETER3:		An 16-bit output value, where each bit corresponds to
					one channel. For single bank access, channel 0 and
               channel 8 is considered the least significant bit 0.
               For both banks, channel 0 is least significant bit 0
               and channel 15 is the most significant bit 15.
PARAMETER4:		Reserved.  Set as 0.

RETURN VALUE:	-1, device information indicates no connection
               or status byte from previous command.

SEE ALSO:		rn_digOutConfig, rn_digOut, rn_digBankIn

END DESCRIPTION **********************************************************/

nodebug
int rn_digBankOut(int handle, int bank, int senddata, int reserved)
{
	auto int msgcode, regnum, datalen;
	auto char tmpdata[2];

	tmpdata[0] = senddata&0xff;
	tmpdata[1] = senddata>>8;

	switch (bank)
	{
		case 0:		//all banks
			DIOW17;
			break;
		case 1:		//channels 0-7
			DIOW10;
			break;
		case 2:		//channels 8-15
			DIOW11;
			break;
	}

   do {
		msgcode = rn_write(handle, regnum, tmpdata, datalen);
      if (msgcode&(RNCMDREJ|RNWDTO))	//cmd reject or wdtimeout
       	break;
  	}	while ((msgcode&RNDEVSTATE)==RNBUSY);

	return (msgcode);
}


/*** BeginHeader rn_iobitmask */

extern const char rn_iobitmask[8];

/*** EndHeader */

const char rn_iobitmask[8] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};


/*** BeginHeader rn_digIn */
int rn_digIn(int handle, int channel, char *retdata, int reserved);

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_digIn							<RNET_DIO.LIB>

SYNTAX:			int rn_digIn(int handle, int channel, char *retdata, int reserved);

DESCRIPTION:	Reads the undeglitched or raw data state of a
					designated digital input channels.

PARAMETER1:		Address index to device information. Use rn_device()
					or rn_find to establish handle.
PARAMETER2:		Digital input channel, 0 to 23.
PARAMETER3:		Return data address of the logic state.
PARAMETER4:		Reserved.  Set as 0.

RETURN VALUE:	-1, device information indicates no connection,
					Status byte from previous command, and	pointer to the
					return data logic state of the input, 0 or 1.

SEE ALSO:		rn_digOut, rn_digBankIn

END DESCRIPTION **********************************************************/

nodebug
int rn_digIn(int handle, int channel, char *retdata, int reserved)
{
	auto int msgcode, regnum, datalen;
	auto char tmpdata[RN_MAX_DATA];

	if (channel <= 7)
	{
		DIOR12;
	}
	else
	{
		if (channel <= 15)
		{
			DIOR13;
		}
		else
		{
			if (channel <= 23)
			{
				DIOR14;
			}
		}
	}

   do {
		msgcode = rn_read(handle, regnum, tmpdata, datalen);
      if (msgcode&(RNCMDREJ|RNWDTO))	//cmd reject or wdtimeout
        	break;
  	}	while ((msgcode&RNDEVSTATE)==RNBUSY);


	if (tmpdata[0] & rn_iobitmask[channel%8])
		*retdata = 1;
	else
		*retdata = 0;

	return (msgcode);
}

/*** BeginHeader rn_digBankIn */
int rn_digBankIn(int handle, int bank, char *retdata, int reserved);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_digBankIn						<RNET_DIO.LIB>

SYNTAX:			int rn_digBankIn(int handle, int bank, char *retdata, int reserved);

DESCRIPTION:	Reads the undeglitched or raw data state of a block of
					designated digital input channels.  First bank consists
					of channels	0-7, second bank consists of 8-15, etc.

PARAMETER1:		Address index to device information. Use rn_device()
					or rn_find to establish handle.
PARAMETER2:		0 for all banks on the board
					1 for bank of digital inputs 0 to 7,
					2 for bank of digital inputs 8 to 15,
					3 for bank of digital inputs 16 to 23.
PARAMETER3:		Return data address of the logic state.
PARAMETER4:		Reserved.  Set as 0.

RETURN VALUE:	-1, device information indicates no connection,
					Status byte from previous command, and	return pointer
					to data bytes where each bit corresponds to one
					channel. Channels 0, 8, 16 are considered bit 0
					positions. If all banks are requested, index data
               pointer for each bank of inputs, with bank of inputs
               0 to 7 as first byte returned.

SEE ALSO:		rn_digIn, rn_digBankOut

END DESCRIPTION **********************************************************/

nodebug
int rn_digBankIn(int handle, int bank, char *retdata, int reserved)
{
	auto int msgcode, regnum, datalen;

	switch (bank)
	{
		case 0:		//all banks
			DIOR17
			break;
		case 1:		//channels 0-7
			DIOR12;
			break;
		case 2:		//channels 8-15
			DIOR13;
			break;
		case 3:		//channels 16-23
			DIOR14;
			break;
	}

   do {
		msgcode = rn_read(handle, regnum, retdata, datalen);
      if (msgcode&(RNCMDREJ|RNWDTO))	//cmd reject or wdtimeout
        	break;
  	}	while ((msgcode&RNDEVSTATE)==RNBUSY);

	return (msgcode);
}


/*** BeginHeader _rn_dio_ai_in */

int _rn_dio_ai_in(int handle, int channel, char *retdata, int sample);

/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_rn_dio_ai_in						<RNET_DIO.LIB>

SYNTAX:		int _rn_dio_ai_in(int handle, int channel, int *retdata);

DESCRIPTIONL:	Internal.
					Reads rawdata for called function in rnet_ain.lib.

PARAMETER1:		Device handle. Calling function must provide.
PARAMETER2:		channel
PARAMETER3:		Return data
PARAMETER4:		Number of samples
					1 = a value that is updated every 46 to 172 microseconds, depending
               	if 1 or all 4 channels are enabled.
               >1 = each sampling will wait approximately 40 to 160 microseconds
               	for an updated value depending on if 1 or all 4 channels are
                  enabled.


RETURN VALUE:	-1, device information indicates no connection,
					Status byte from previous command.

END DESCRIPTION **********************************************************/

nodebug
int _rn_dio_ai_in(int handle, int channel, char *retdata, int sample)
{
	auto int msgcode, regnum, datalen;


	DIOR47;		//clear control register
	msgcode = rn_read(handle, regnum, retdata, datalen);

	// wait for updated conversions on the channel
	if (sample > 1)
   {
	   do {
			msgcode = rn_read(handle, regnum, retdata, datalen);
		} while ((*retdata&(rn_iobitmask[channel+4])) == 0);
   }

	DIOR40;
	regnum+=channel;
   datalen = 2;     //read only first two for rawdata
	msgcode = rn_read(handle, regnum, retdata, datalen);

	return (msgcode);
}


/*** BeginHeader _rn_dio_ai_volts, _rn_dio_ai_convert */

int _rn_dio_ai_volts(int handle, int channel, char *retdata, int sample);
float _rn_dio_ai_convert(int channel, int rawdata, float gain, int offset);

/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_rn_dio_ai_volts				<RNET_DIO.LIB>

SYNTAX:     int _rn_dio_ai_volts(int handle, int channel, float *retdata
						int sample);

DESCRIPTIONL:	Internal.
					Sends voltage value to calling function in rnet_ai.lib.

PARAMETER1:		Device handle. Calling function must provide.
PARAMETER2:		Analog input channel 0 to 3.
					0:  0 to +10V
					1:  0 to +10V
					2:  0 to +1V
					3:  +/- 250mV
PARAMETER3:		Return data
PARAMETER4:		Number of samples
					1 = a value that is updated every 46 to 172 microseconds, depending
               	if 1 or all 4 channels are enabled.
               >1 = each sampling will wait approximately 40 to 160 microseconds
               	for an updated value depending on if 1 or all 4 channels are
                  enabled.

RETURN VALUE:	-1, device information indicates no connection,
					Status byte from previous command.

END DESCRIPTION **********************************************************/

nodebug
float _rn_dio_ai_convert(int channel, int rawdata, float gain, int offset)
{
	auto float vpt;

	return ( (rawdata - offset)*gain);
}



nodebug
int _rn_dio_ai_volts(int handle, int channel, char *retdata, int sample)
{
	auto int msgcode, regnum, datalen;

	DIOR47;		//clear control register
	msgcode = rn_read(handle, regnum, retdata, datalen);

	// wait for updated conversions on the channel
	if (sample > 1)
   {
	   do {
			msgcode = rn_read(handle, regnum, retdata, datalen);
		} while ((*retdata&(rn_iobitmask[channel+4])) == 0);
   }

	DIOR40;
	regnum+=channel;
	msgcode = rn_read(handle, regnum, retdata, datalen);

	return (msgcode);
}


/*** BeginHeader _rn_dio_ai_control */
int _rn_dio_ai_control(int handle, int channel, int state);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_rn_dio_ai_control						<RNET_DIO.LIB>

SYNTAX:		int _rn_dio_ai_control(int handle, int channel, int state);

DESCRIPTION:	Internal.
					Enables or disables channels in ADC control register from
					calling function rnet_ain.lib.  First compares if already
					enabled or disabled.

PARAMETER1:		Device handle. Calling function must provide.
PARAMETER2:		channel
PARAMETER3:		1=enable
					0=disable

RETURN VALUE:	Status byte from previous command.

END DESCRIPTION **********************************************************/

nodebug
int _rn_dio_ai_control(int handle, int channel, int state)
{
	auto int msgcode, regnum, datalen;
	auto char tmpdata[4];

	DIOR47;
	msgcode = rn_read(handle, regnum, tmpdata, datalen);

	if ( !((msgcode&RNDEVSTATE)==RNBUSY) && !(msgcode&(RNCMDREJ|RNWDTO)) )
   {
		if (state && (tmpdata[0]&rn_iobitmask[channel+4]))
		{
		//already configured do nothing
		}
		else
		{
			if (state || (tmpdata[0]&rn_iobitmask[channel+4]))
			{
				if (state)
					tmpdata[0] = tmpdata[0]|rn_iobitmask[channel+4];
				else
					tmpdata[0] = tmpdata[0]^rn_iobitmask[channel+4];
				DIOW47;
				msgcode = rn_write(handle, regnum, tmpdata, datalen);
			}
		}
   }

	return (msgcode);
}


/*** BeginHeader _rn_dio_ai_rdcalib */
int _rn_dio_ai_rdcalib(int handle, int channel, char *retdata);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_rn_dio_ai_rdcalib						<RNET_DIO.LIB>

SYNTAX:  int _rn_dio_ai_rdcalib(int handle, int channel, char *retdata);

DESCRIPTION:	Internal.
               Reads raw data and calibration constants.

PARAMETER1:		Device handle. Calling function must provide.
PARAMETER2:		channel
PARAMETER3:		Return data.

RETURN VALUE:	Status byte from previous command.

END DESCRIPTION **********************************************************/

nodebug
int _rn_dio_ai_rdcalib(int handle, int channel, char *retdata)
{
	auto int msgcode, regnum, datalen;

	DIOR40;
	regnum+=channel;
	msgcode = rn_read(handle, regnum, retdata, datalen);

	return (msgcode);
}


/*** BeginHeader _rn_dio_ai_wrcalib */
int _rn_dio_ai_wrcalib(int handle, int channel, char *data);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_rn_dio_ai_wrcalib						<RNET_DIO.LIB>

SYNTAX:  int _rn_dio_ai_wrcalib(int handle, int channel, char *data);

DESCRIPTION:	Internal.
               Writes calibration constants. Used in rnet_ain.lib

PARAMETER1:		Device handle. Calling function must provide.
PARAMETER2:		channel
PARAMETER3:		Data to write.

RETURN VALUE:	Status byte from previous command.

END DESCRIPTION **********************************************************/

nodebug
int _rn_dio_ai_wrcalib(int handle, int channel, char *data)
{
	auto int msgcode, regnum, datalen;
   auto char key0, key1;
   auto rn_AinData adata;
   auto char buf1[17];

	DIOW40;
	regnum+=channel;
   buf1[0] = key0;
   buf1[1] = key1;
   memcpy(&buf1[2], data, 6);
	msgcode = rn_write(handle, regnum, buf1, datalen);
   rn_msDelay(12);

	return (msgcode);
}

/*** BeginHeader */
#endif
/*** EndHeader */

