/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** Beginheader */
#ifndef __RNET_RELAY_LIB
#define __RNET_RELAY_LIB
/*** Endheader */


/* START LIBRARY DESCRIPTION *********************************************
RNET_RELAY.LIB

DESCRIPTION:	Support for RabbitNet RN1400 Relay board.

SUPPORT LIBS:

REVISION HISTORY:
	01/20/04	pel	Added support device	timing.
	08/08/03	Ek		Initial creation.

END DESCRIPTION **********************************************************/

/*** Beginheader */
// macro that user can identify with in applications
#ifndef RN1400
#define RN1400 RN1400A
#endif

#ifndef _RN1400TIME
#define _RN1400TIME {tCS=2; tCD=35; tDD=23; tDS=26; tMC=6;}
#endif

///// Command Set
/// regnum is octal
/// datalen is byte count
/////
/// write registers
#define RELAYW10	0010		//Relay 0 Control
#define RELAYW11	0011		//Relay 1 Control
#define RELAYW12	0012 		//Relay 2 Control
#define RELAYW13	0013		//Relay 3 Control
#define RELAYW14	0014		//Relay 4 Control
#define RELAYW15	0015		//Relay 5 Control
#define RELAYW20	0020		//Relay 0-5 Synchronous Ctrl
#define RELAYW21	0021		//Relay 0-5 Power_Save Cntrl
/*** Endheader */



/*** BeginHeader rn_Relay */
int rn_Relay(int handle, int relay, int value, int reserved);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rn_Relay				<RNET_RELAY.LIB>


SYNTAX:			int rn_Relay(int handle, int relay, int value,
                             int reserved);

DESCRIPTION:   Sets the state of a given relay. Connects the Relay
					Common contact to either the Relay-Normally-Closed or
               Relay Normally-Open contact.

					Caution:
               --------
               Activating several relays in a short period of time may
               cause a power surge that may exceed the peak power rating
               of your power supply. It's ultimately the responsibility
               of the application designer to assure that the power supply
               used meets the requirements for the intended application.

					See sample program Relay_Sequence.C for an example to
               sequence the relays to assist in keeping the peak power
               surge to a mimimum.

PARAMETER1:		Address index to device informatio.  Use rn_device()
					or rn_find to establish handle.

PARAMETER2: 	Relay selection, valid relays are 0 - 5.

PARAMETER3: 	Value used to control set a given Relay connection as
               follows:

					Value	  Contact Connection
               -----   ------------------
					  0     Common connected to Normally-Closed contact
					  1     Common connected to Normally-Open contact

PARAMETER4: 	Reserved

RETURN VALUE:	-1, device information indicates no connection, Status byte
               from previous command.

SEE ALSO:	 	rnRelayAll, rnRelayPwr


END DESCRIPTION **********************************************************/

nodebug
int rn_Relay(int handle, int relay, int value, int reserved)
{
	auto rnDataSend ds;
   auto rnDataRec dr;
   auto rn_devstruct *devaddr;

  	devaddr = (rn_devstruct *)handle;

   ds.cmd = RELAYW10 + relay;
   if(value == 1)
   	ds.mosi[0] = 0xA5;
   else
     	ds.mosi[0] = 0;
   _rn_sp_fastenable(devaddr->portnum);
  	_mosi_driver(2, &ds, &dr, &devaddr->cmdtiming,
                &rn_spi[devaddr->portnum]);
  	_rn_sp_fastdisable(devaddr->portnum);
   return(dr.statusbyte);
}


/*** BeginHeader rn_RelayAll */
int rn_RelayAll(int handle, int control, int reserved);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
rn_RelayAll				<RNET_RELAY.LIB>

SYNTAX:			int rn_RelayAll(int handle, int control, int reserved);

DESCRIPTION:	Sets the state of all the relays with the given bitwise
               control value. Connects the Relay-Common contact to either
               the Relay Normally-Closed or Relay Normally-Open contact.

					Caution:
               --------
               Usage of this function requires that your power supply can
               meet the peak power surge of all relays being activated at
               a given time. It is ultimately the responsibility of the
               application designer to assure that the power supply used
               meets the requirements for intended application.

PARAMETER1:		Address index to device informatio.  Use rn_device()
					or rn_find to establish handle.

PARAMETER2: 	Bitwise control of Relays 0 - 5. The bit positions 0 - 5
               corresponds directly to Relays 0-5, with the bit value
               controlling the relay as follows:

					Bit value  Contact Connection
               ---------  ------------------
					  0        Common connected to Normally-Closed contact
				     1        Common connected to Normally-Open contact

					Example:
               -------
					rn_RelayAll(handle, 0x05, 0);

               // Sets the Relays to have the following connections:
					Relay0...Common connected to Normally-Open contact
					Relay1...Common connected to Normally-Closed contact
					Relay2...Common connected to Normally-Open contact
					Relay3...Common connected to Normally-Closed contact
					Relay4...Common connected to Normally-Closed contact
					Relay5...Common connected to Normally-Closed contact

PARAMETER3: 	Reserved

RETURN VALUE:	-1, device information indicates no connection, Status byte
               from previous command.

SEE ALSO:	 	rnRelayPwr, rnRelay

END DESCRIPTION **********************************************************/

nodebug
int rn_RelayAll(int handle, int control, int reserved)
{
	auto rnDataSend ds;
   auto rnDataRec dr;
   auto rn_devstruct *devaddr;

  	devaddr = (rn_devstruct *)handle;

   ds.cmd = RELAYW20;
   ds.mosi[0] = control;
  	_rn_sp_fastenable(devaddr->portnum);
  	_mosi_driver(2, &ds, &dr, &devaddr->cmdtiming,
                &rn_spi[devaddr->portnum]);
  	_rn_sp_fastdisable(devaddr->portnum);
   return(dr.statusbyte);
}


/*** BeginHeader rn_RelayPwr */
int rn_RelayPwr(int handle, int control, int reserved);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *********************************************
rn_RelayPwr				<RNET_RELAY.LIB>

SYNTAX:        void rn_RelayPwr(int handle, int control, int reserved);


DESCRIPTION:	Sets the specified relays to a power reduction/save mode.
               The power save mode is activated after the relay has been
               active for a minimum of 50ms, after which the relay will
               be pulsed every 1 ms with a 50% duty cycle square wave,
               which should provide a power reduction of 50% for the
               given relay.

					If this function isn’t used in the application program the
               relays will operate normally without going into the power-
               save mode of operation.

					Caution:
               --------
					Activating several relays in a short period of time may
               cause a power surge that may exceed the peak power rating
               of your power supply. It is ultimately the responsibility
               of the application designer to assure that the power supply
               used meets the requirements for the intended application.

					Also the power save mode will reduce relay holding force,
               therefore, recommend not using power save mode when the
               relay is subject to shock and vibration.

PARAMETER1:		Address index to device informatio.  Use rn_device()
					or rn_find to establish handle.

PARAMETER2: 	Bitwise control of Relays 0 - 5 for power save mode. The bit
 					positions 0 - 5 corresponds directly to Relays 0 - 5, with
               the bit value controlling the relay as follows:

					Bit value		Operating Mode
               ---------      --------------
					   0           Set relay for normal operation.
						1           Set relay to power save mode.

					Example:
               --------
					rn_RelayPwr(handle, 0x05, 0x00);

               // Sets the Relays for the following operation:
					Relay0.....Set to power save mode of operation.
					Relay1.....Set for normal operation.
					Relay2.....Set to power save mode of operation.
					Relay3.....Set for normal operation.
					Relay4.....Set for normal operation.
					Relay5.....Set for normal operation.

PARAMETER3: 	Reserved

RETURN VALUE:	-1, device information indicates no connection, Status byte
					from previous command.

SEE ALSO:	 	rnRelayAll, rnRelay

END DESCRIPTION **********************************************************/

nodebug
int rn_RelayPwr(int handle, int control, int reserved)
{
	auto rnDataSend ds;
   auto rnDataRec dr;
   auto rn_devstruct *devaddr;

  	devaddr = (rn_devstruct *)handle;

   ds.cmd = RELAYW21;
   ds.mosi[0] = control;
  	_rn_sp_fastenable(devaddr->portnum);
  	_mosi_driver(2, &ds, &dr, &devaddr->cmdtiming,
                &rn_spi[devaddr->portnum]);
  	_rn_sp_fastdisable(devaddr->portnum);
   return(dr.statusbyte);
}

/*** BeginHeader */
#endif
/*** EndHeader */