/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************
PART_DEFS.LIB

Definitions for primary structures used in the partition library. Designed
to work on a DOS style Master Boot Record (MBR) with partition tables.

END DESCRIPTION **********************************************************/

/*** BeginHeader */
#ifndef __PART_DEFS_LIB
#define __PART_DEFS_LIB

/* The partition entry as it is stored in the MBR of those drives hosting one.
    The status variable is not kept on the drive, just runtime status */
typedef struct
{
	unsigned char bootflag;			// Bootable (0x80) or not (0x00)
	unsigned char starthead;		// 0xfe if LBA, else starting head
	unsigned int startseccyl;		// starting sector/cylinder
	unsigned char parttype;			// partition type
	unsigned char endhead;			// 0xfe if LBA, else ending head
	unsigned int endseccyl;			// ending sector/cylinder
	unsigned long startsector;		// the starting sector number
	unsigned long partsecsize;		// the number of sectors in partition
   int status;                   // partition status (mounted, read-only, etc.)
} mbr_part;

/* A controller as seen by Part.LIB. Note, the lower level IO routines may
	extend this structure for their private needs. Since the user application
	must define the controller structure according to the requirements of the
	IO module (driver) used, this is not a problem. If optional routines are
   not implemented, the place holders should be set to NULL pointers */
typedef struct
{
	int (*xxx_EnumDevice)();		// enumerate the devices
	int (*xxx_ReadSector)();		// read a sector
	int (*xxx_WriteSector)();		// write a sector
	int (*xxx_FormatCylinder)();	// physically format a cylinder (opt.)
   int (*xxx_InformStatus)();    // Callback routine to deliver status (opt.)

	/* controller state information used by PART.LIB */
	char ndev;							// number of devices enumerated by filesystems
	char maxdev;						// number of devices present on driver
	int type[16];						// bitmasks of supported types for ndev devices
	void *dlist;             		// linked list of enumerated devices
  	void *next;							// linked list of active drivers
	void *dev_struct; 				// device specific information structure
} mbr_drvr;

/* Structure holding general information about a physical device */
typedef struct
{
	unsigned long seccount;		// total number of sectors on the device
	unsigned int heads;			// number of heads the device is has
	unsigned int cylinder;		// number of cylinders the device is has
	unsigned int sec_track;		// number of sectors per track
	int byte_sec;					// bytes per sector
	int byte_page;					// physical page update size for device in bytes
	int dev_num;					// device number as enumerated by driver
	int wtc_dev;					// device number as enumerated by WTC
	mbr_drvr *driver;				// the driver this device is hooked up to
   void *next;                // next device in linked list of devices

	mbr_part part[4];				// MBR partition data
   void *fs_part[4];				// File system extended partition data
} mbr_dev;

/*  Bit Codes used in device feature types in mbr_drvr structure */
#define MBRTYPE_READONLY		0x0001	// Device is Read-Only
#define MBRTYPE_WRITEPROT		0x0002	// Device has Write Protect mechanism
#define MBRTYPE_ACTIVITY		0x0004	// Device has an Activity indicator
#define MBRTYPE_DOORLOCK		0x0008	// Device has Door Lock mechanism
#define MBRTYPE_REMOVE			0x0010	// Device/media is removeable
#define MBRTYPE_MAG				0x0020	// Device uses magnetic media
#define MBRTYPE_FORMAT			0x0040	// Device has a format routine
#define MBRTYPE_FLASH			0x0080	// Device uses flash/EEPROM to save data
#define MBRTYPE_MARKERS       0x0100   // Device has internal bad block markers

/*  Bit Codes used in partition status in mbr_part structure */
#define MBRP_READONLY			0x01		// Partition is Read-Only
#define MBRP_MOUNTED				0x80		// Partition is mounted (in use)

/*** EndHeader */

/*** BeginHeader */
#endif  // __PART_DEFS_LIB
/*** EndHeader */

