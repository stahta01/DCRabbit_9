/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __MSCG12232_LIB
#define __MSCG12232_LIB
/*** EndHeader */

/* START LIBRARY DESCRIPTION *********************************************
MSCG12232.LIB

DESCRIPTION:	Low-level driver for the MSCG12232 LCD.

SUPPORT LIBS:

END DESCRIPTION **********************************************************/


/*** BeginHeader glBuf, glbuf_offset, glbuf_xpc, xpc_temp  */
//
// Requirement
// -----------
// This section required for all LCD driver designs. The only values that
// will change in this section (from design to design) are the LCD_XS,
// LCD_YS, PIXEL_XS and PIXEL_XS macro's.
//

// LCD display resolution...these MACRO's are for the customer to use in
// their application program.
#define LCD_XS					122			// Number of pixels on the x-axis
#define LCD_YS					32				// Number of pixels on the y-axis


// Graphic Buffer MACRO's
// 1. PIXEL_XS needs to be evenly divisble by 8.
// 2. These MACRO's are intended for internal use only.
#define	PIXEL_XS				128			//	Horz Pixels = [0..PIXEL_XS-1]
#define	PIXEL_YS				32				//	Vert Pixels = [0..PIXEL_YS-1]
#define	PIXGROUP				PIXEL_XS/8	//	Horz Byte Groups
#define	XMEM_BUF_SIZE   	(PIXEL_XS * PIXEL_YS)/8


extern unsigned long glBuf;		  	// Display buffer XMEM physical addr
extern unsigned int glbuf_offset;  	// Display buffer logical offset addr
extern unsigned int glbuf_xpc;     	// Display buffer XPC page address
extern unsigned int xpc_temp;     	// Temp variable for XPC control

//
// Requirement
// -----------
// The following is the list of functions that are required to be
// in this Library. If your design doesn't have one of the features
// that the function provides, then you must provide a NULL function
// so that graphic.lib will compile properly.
//
//	// Initializes the LCD
//    void _glInit(void);
//
// // Takes the data from the glBuf which the graphic routines created
// // and displays it on the LCD
//    void _glSwapData( void );
//
//	// Controls the LCD backlight
//	   void glBackLight( int onOff );
//
//	// Controls turning ON/OFF the display...display data is retained
//  	void glDispOnOff( int onOff  );
//
//	// Control the contrast on the display..not implemented for this LCD.
//	   void glContrast( int Level  );
//
// Requirement
// -----------
// Must have the following code in the _glInit function to allocate
// memory for the graphic routines and to convert the ulong XMEM
// pointer to a normalized offset and XPC pointer.
//
//		nodebug
//		void _glInit(void)
//		{
//				// Must initialize the Graphic buffer pointer before
//				// using any graphic functions.
//				glBuf = xalloc(XMEM_BUF_SIZE);
//
//				// Initialize global XMEM offset and XPC pointers
//				#asm
//				ld    de, (glBuf)
//				ld    bc, (glBuf + 2)
//
//				; Convert DE:BC to a normalized XMEM pointer
//				call	LongToXaddr		; DE = offset of glBuf, A = xpc of glBuf
//				ld    (glbuf_xpc),a
//				ld    (glbuf_offset), de
//				#endasm
//
//				// Initialize the I/O strobe for the LCD
//				_glInitLCDPort();
//
//
//				//Other Initialization
//				//	:
//				//	:
//				//	:
//		}
//
//
//
//
/*** EndHeader */

// Requirement
// -----------
// Declare variables outside of the Start/End header section
unsigned long glBuf;		   	// Display buffer XMEM physical address
unsigned int glbuf_offset;  	// Display buffer logical offset address
unsigned int glbuf_xpc;     	// Display buffer XPC page address
unsigned int xpc_temp;     	// Temp variable for XPC control

//  End of driver requirements !!!!!



/*** BeginHeader */
// LCD Command Instruction Set

#define LCDON					0xAF
#define LCDOFF					0xAE

#define LCDSETLINE			0xC0 // + line no. (0-31)
#define LCDSETPAGE			0xB8 // + page no. (0-3)
#define LCDSETCOLUMN			0x00 // + column no. (0-60)

#define LCDLEFTWARD			0xA1
#define LCDRIGHTWARD			0xA0

#define LCDSTATICDRIVEON	0xA5
#define LCDSTATICDRIVEOFF	0xA4

#define LCDDUTYCYCLE1_16	0xA8
#define LCDDUTYCYCLE1_32	0xA9

#define LCDRMWBEGIN			0xE0
#define LCDRMWEND				0xEE

#define LCDRESET				0xE2

// LCD status
#define LCDBUSY				0x80 // AND mask
#define LCDDISPDIR			0x40 // AND mask
#define LCDISON				0x20 // AND mask
#define LCDRESETING			0x10 // AND mask

// LCD back light
#define BACKLIGHTOFF			0
#define BACKLIGHTON			1

// LCD display control
#define LCDDISPLAYOFF		0
#define LCDDISPLAYON			1

// Chip select control
#define LCDMASTER				0
#define LCDSLAVE				1

// Timeout for accessing the LCD
#define MAXTIMEOUT			0xff

// MASK values for converting data from glBuf
// horizontal format to the LCD vertical format.
#define LCDMASK				0x01
#define GLBUFMASK				0x80
#define GLMASKCNT				0x07
/*** EndHeader */


/*** BeginHeader _glInitLCDPort */
void _glInitLCDPort(void);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_glInitLCDPort			<BL21XX.LIB>
SYNTAX:			void _glInitLCDPort(void);

DESCRIPTION:	This function initializes I/O port E, bit 7 to access
 					the LCD display. Port E bit 7 is setup to be an I/O Read
 					and Write strobe with 7 wait states. This function is non-
 					reentrant and is an internal function.

PARAMETER1:		None.

RETURN VALUE:	None.

SEE ALSO:		See glInit function in the MSCG12232.LIB

END DESCRIPTION **********************************************************/

nodebug
void _glInitLCDPort(void)
{

	// Initialize Port E bit to be a normal I/O pin
	WrPortI(PEFR, &PEFRShadow, (PEFRShadow|LCDSTROBE));

	// Initialize Port E bit to be an output pin
	WrPortI(PEDDR, &PEDDRShadow, (PEDDRShadow|LCDSTROBE));

	// Initialize Port E bit to be a chip select.
	// Set to be a I/O Read and Write strobe with 7 wait states.
	// and writes allowed.

	WrPortI(LCDCSREGISTER, &LCDCSSHADOW, LCDCSCONFIG);

	// Set Port E bit to be clocked by PCLK/2
	WrPortI(PECR, &PECRShadow, (PECRShadow & ~0xFF));

	// Turn-off all LEDS and LCD backlight
	WrPortE(LCDLEDADDR, &LEDShadow, 0x00);

	// Enable LED control register
	WrPortE(LCDLEDREG, NULL, 0x00);
}


/*** BeginHeader _glCommand */
void _glCommand(int command, int scope);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_glCommand				<MSCG12232.LIB>

SYNTAX:	      void _glCommand(int command, int scope);

DESCRIPTION:   This functions sends a command to the LCD display.	This
               function is non-reentrant and is an internal function.

PARAMETER1:    Command to be sent to the display.(Please see the MSCG12232
               data sheet for the complete command set).
PARAMETER2:    Send the command to either the MASTER or the SLAVE side of
               the display.

               	0 = LCDMASTER
               	1 = LCDSLAVE

RETURN VALUE:	None.

SEE ALSO:		_glDispOnOff, _glContrast, _glBackLight, _glSwapData,
					_glInit

END DESCRIPTION **********************************************************/

nodebug
useix void _glCommand(int command, int scope)
{
#asm
			push	ip							;save off IP state
			ipset	1							;set interrupt priority to level 1
			ld		a, (ix+scope)
			ld    b, LCDMASTER
			cp	   b
			jr		nz, .lcdslave

			ld		a, (ix+command)
			ioe 	ld	(LCDMWRITEINSTR), a
			jr		.done
.lcdslave:
			ld		a, (ix+command)
			ioe 	ld	(LCDSWRITEINSTR), a
.done:	pop	ip


#endasm
}


/*** BeginHeader _glInit */
void _glInit(void);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_glInit				<MSCG12232.LIB>

SYNTAX:	      void _glInit(void);

DESCRIPTION:   This functions returns a data byte that represents 8 pixels
               on the LCD display. This function is non-reentrant and is
               an internal function.

RETURN VALUE:	Data byte for the LCD display representing 8 pixels.

SEE ALSO:		graphic.lib, _glDispOnOff, _glContrast, _glBackLight
               _glSwapData

END DESCRIPTION **********************************************************/

nodebug
void _glInit(void)
{
	// Allocate XMEM for the Graphic buffer
	glBuf = xalloc(XMEM_BUF_SIZE);

	// Initialize global glBuf XMEM offset and XPC pointer
	#asm
		ld		de, (glBuf)
		ld    bc, (glBuf + 2)

		; Convert BC:DE to a normalized XMEM pointer
		call	LongToXaddr			; DE = offset of glBuf, A = xpc of glBuf
		ld    (glbuf_xpc),a
		ld    (glbuf_offset), de
	#endasm

	// Set the graphic's buffer to be not locked
	glLock = 0;

	// Initialize the I/O chip select for the LCD display
	_glInitLCDPort();

	// Reset the display to put it into a known state
	_glCommand( LCDRESET, LCDMASTER );
	_glCommand( LCDRESET, LCDSLAVE );

	// Clear the screen before turning ON the display
	glBlankScreen();

	// Turn ON the display
	_glDispOnOff( LCDDISPLAYON );

	// Set the duty cycle to 1/32
	_glCommand( LCDDUTYCYCLE1_32, LCDMASTER );
	_glCommand( LCDDUTYCYCLE1_32, LCDSLAVE );

	// Set the display for normal operation
	_glCommand( LCDSTATICDRIVEOFF, LCDMASTER );
	_glCommand( LCDSTATICDRIVEOFF, LCDSLAVE );



	// Set pixel color to Black
	glSetBrushType(PIXBLACK);

	// Initialize the glprintf() function stepping parameters
	glSetPfStep(1,0);
}

/*** BeginHeader _glData */
root char _glData(int page, int col);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION *******************************************
_glData					<MSCG12232.LIB>

SYNTAX:	      char _glData(int page, int col);

DESCRIPTION:   This function returns a data byte that represents 8
               pixels on the LCD display.

               The data byte is created by doing a conversion from the
               graphic buffer horizontal format, to the LCD vertical
               format.

					EXAMPLE:
               -------
					Graphic Buffer...horizonal format pixel (x,y) 2,0 is at
					location glBuf[0] with bit 5 set.
					00100000
					00000000

					TRANSLATES TO:
					LCD Display......vertical format pixel (x,y) 2,0  is at
					location LCD[2] bit 0 set.
               0010
					0000
					0000
					0000
					0000
					0000
					0000
					0000

               This function is non-reentrant and and is an internal
               function.

PARAMETER1:    Page (0-3) location of data byte to be displayed.
PARAMETER2:    Column (0-121) location of the data byte displayed.

RETURN VALUE:	Data byte for the LCD display representing 8 pixels.

SEE ALSO:		_glSwapData

END DESCRIPTION **********************************************************/

nodebug
root useix char _glData(int page, int col)
{
#asm
	ld  	a,xpc						; Save current XPC on the stack
	push 	af
	ld   	a,(glbuf_xpc)			; Get XPC of LCD buffer
	ld  	xpc,a             	; Map-in the LCD XMEM buffer 0xE000 range

	exx								; Use ALT reg for mask values
	ld  	d,LCDMASK  				; ALT D = lcd bit mask

	ld   	a,(ix+col)				; Get display col value
	and  	GLMASKCNT         	; Use 0-7 to generate bufmask
	ld   	b,a               	; Load B with shift count

	ld 	a,GLBUFMASK				; ALT E = glbuf bit mask starting point
	jr    z,.noshift		   	; If 0-7 = 0 then don't shift bufmask
			                     ; Flag was set by previous AND instruction
.maskshift:
	rra								; Shift mask X1
	djnz 	.maskshift				; Shift until B = 0

.noshift:
	ld   	e,a						; Save bufmask in reg E
	exx								; Move bufmask & lcdmask values to ALT reg's

	ld    hl,0x0000
	ld    iy,hl

	ld  	b,0          	     	; Load BC with the LCD page to be accessed
	ld   	c,(ix+page) 			; addr = row_offset + col_offset + (col/8);

										; row_offset  = page * PIXEL_XS;
  	ld    de,PIXEL_XS       	; DE = buffer row offset value
	mul								; BC = starting row to be accessed

	ld   	h,0       	     	   ; HL = (col/8)
	ld    l,(ix+col)
	srl   l							; Shift X3 to do the divide by 8
	srl   l
	srl   l
	add   hl,bc						; Add row and col offsets


	; Setup loop for 8 iterations
	ld   	b,8
	xor   a							; Clear lcd data byte
	ex    af,af'			     	; Save in ALT register
	ex    de,hl						; Sum of row plus column offsets into DE

	; This routine is now setup to access the same pixel column in glBuf
	; memory. The bitloop will bump thru 8 pixel rows in glBuf to build-up
	; a byte for the LCD display.

.bitloop:
	push 	de							; Save sum of row plus column offsets
	ld  	hl,iy
	add	hl,de

	; Note: The data buffer size for this display is 512 bytes, the glBuf
	; memory calculation will never cause the offset to wrap-around more
	; than once.

	ld   	de,(glbuf_offset)
	add  	hl,de
	bit  	4,h
	jr   	z,.skipXPC				; Check if ptr has crossed the F000 boundary
	res  	4,h            		; Set offset back to 0xE000 4k memory page
   pop	de							; Recover sum of row plus column offsets
   ld		a,d						; For future calculations of the graphics . . .
   sub	0x10						;  buffer offset in the xmem window, also . . .
   ld		d,a						;  set sum of row plus column offsets back by 4k.
   push	de							; Save adjusted sum of row plus column offsets
	ld   	a,xpc             	; Get current XPC value
	inc  	a							; Bump the XPC value to the next 4K block
	ld   	xpc,a             	; Update XPC

	; Check if the pixel bit needs to be set low or high
.skipXPC:
	ld   	a,(hl)
	exx
	and  	e
	jr   	z,.maskand

	; Set pixel bit high
.maskor:
	ex    af,af'					; Retrieve lcddata byte
	or   	d
	ex    af,af'					; Save lcddata byte in ALT reg
	jr   	.maskdone

	; Set pixel bit low
.maskand:
	ld   	a,d
  	cpl
  	ld    b,a
  	ex    af,af' 					; Retrieve lcddata byte
	and 	b
	ex    af,af'					; Save lcddata byte in ALT reg

	; Shift lcd_mask to the next pixel bit position
.maskdone:
	sla 	d
	exx

	; Bump to the next pixel row
	ld    hl,iy
	ld		de,PIXGROUP
	add 	hl,de
	ld    iy,hl

	; Loop until a byte containing 8 pixels has been created
	pop  	de
	djnz  .bitloop


	pop   af							; Retrieve XPC value
	ld   	xpc,a             	; Restore XPC
	ex    af,af'
	ld    h,0						; Load lcddata in HL for return value
	ld    l,a
#endasm
}

/*** BeginHeader _glSwapData */
void _glSwapData(void);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION *******************************************
_glSwapData				<MSCG12232.LIB>

SYNTAX:	      void _glSwapData(void);

DESCRIPTION:   This function takes the LCD display data from the graphic
					buffer (glBuf) and writes it to the LCD display. This
					function is non-reentrant and is an internal function.

RETURN VALUE:	None.

SEE ALSO:		graphic.lib, _glInit, _glDispOnOff, _glContrast,
               _glBackLight

END DESCRIPTION **********************************************************/

nodebug
void _glSwapData(void)
{
	static int col, page;

	// Update the entire LCD display screen
	for(page = 0; page < 4; page++)
	{
		// Initialize the display page that will be updated
		_glCommand( (LCDSETPAGE | page), LCDMASTER );
		_glCommand( (LCDSETPAGE | page), LCDSLAVE );

		// Set display column to zero
		_glCommand( LCDSETCOLUMN + 0, LCDMASTER );

		// Update the Master side of the display, which is columns 0 - 60.
		for( col=0; col<=60; col++)
		{
			#asm
				; Get LCD data byte to be displayed, data returned in HL
				c 	    _glData(page, col);
				ld    a,l					; Return value is in HL
				; Change Interrupt level to protect I/O access
				push	ip						;save off IP state
				ipset	1						;set interrupt priority to level 1

				ioe 	ld (LCDMWRITEDATA), a
				pop   ip
			#endasm
		}

		// Update the Slave side of the display, which is columns 61 - 121.
		_glCommand( LCDSETCOLUMN, LCDSLAVE );
		for(col = 61 ; col<=121; col++ )
		{
			#asm
				; Get LCD data byte to be displayed, data returned in HL
				c   	_glData(page,col);
				ld		a,l					; Return value is in HL
				; Change Interrupt level to protect I/O access
				push	ip						;save off IP state
				ipset	1						;set interrupt priority to level 1
				ioe 	ld (LCDSWRITEDATA), a
				pop   ip
			#endasm
		}
	}
}


/*** BeginHeader glBackLight */
void glBackLight(int onOff);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *******************************************
glBackLight			<MSCG12232.LIB>

SYNTAX:	      void glBackLight(int onOff);

DESCRIPTION:   Sets the backlight to either the ON or OFF state.

               This function is non-reentrant and is an internal function,
               which is called by the function glBackLight located in the
               graphic library.

PARAMETER1:    0  sets the backlight OFF.
					1  sets the backlight ON.

RETURN VALUE:	None.

SEE ALSO:		glDispOnOff, glSetContrast

END DESCRIPTION **********************************************************/

nodebug
void glBackLight(int onOff)
{
	// The only options for the MSCG12232 display backlight is to either
	// turn it ON or OFF.

	if( onOff )
	{
		#asm
			push	ip						;save off IP state
			ipset	1						;set interrupt priority to level 1
			ld		a,(LEDShadow)
			or 	a,0x80
			ioe 	ld	(LCDBACKLIGHT), a
			ld		(LEDShadow),a
			pop   ip
		#endasm
	}
	else
	{
		#asm
			push	ip						;save off IP state
			ipset	1						;set interrupt priority to level 1
			ld		a,(LEDShadow)
			and	a,0x7F
			ioe 	ld	(LCDBACKLIGHT), a
			ld		(LEDShadow),a
			pop   ip
		#endasm
	}
}


/*** BeginHeader glDispOnOff */
void glDispOnOff(int onOff);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *******************************************
glDispOnOff			<MSCG12232.LIB>

SYNTAX:	      void glDispOnOff(int onOff);

DESCRIPTION:	Sets the screen ON or OFF. Data will not be cleared from
 					the screen.

 					This function is non-reentrant and is an internal function,
 					which is called by the function glDispOnOff located in the
 					graphic library.

PARAMETER1:    Set to 0 to turn the display OFF. Set to 1 to turn the
               display ON.

RETURN VALUE:	None.

SEE ALSO:		glSetContrast, glBackLight

END DESCRIPTION **********************************************************/

nodebug
void glDispOnOff(int onOff)
{
	if( onOff )
	{
		// Turn the LCD display ON
		_glCommand( LCDON, LCDMASTER );
		_glCommand( LCDON, LCDSLAVE );
	}
	else
	{
		// Turn the LCD display OFF
		_glCommand( LCDOFF, LCDMASTER );
		_glCommand( LCDOFF, LCDSLAVE );
	}
}

/*** BeginHeader glSetContrast  */
void glSetContrast (int onOff);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *******************************************
glSetContrast 		<MSCG12232.LIB>

SYNTAX:	      void glSetContrast (int onOff);

DESCRIPTION:   Sets the contrast, if the circuitry is installed.

PARAMETER1:		Low to high values (0 - 255) will give you low to high
               contrast, repectively.

RETURN VALUE:	None.

SEE ALSO:		glDispOnOff, glBackLight

END DESCRIPTION **********************************************************/

nodebug
void glSetContrast (int onOff)
{
	// Contrast is currently not supported...

	// The graphic library requires that you provide a NULL function
	// if the feature isn't supported.
}

/*** BeginHeader _glPlotRealtime */
void _glPlotRealtime (char pixel, long phydispAddr);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION *******************************************
_glPlotRealtime				<MSCG12232.LIB>

SYNTAX:	      void _glPlotRealtime (char pixel, long phydispAddr)

DESCRIPTION:   // This feature not support by this driver, however the
					// graphic library requires that you provide a NULL
					// function when the feature isn't supported.

					This function takes a byte of data and writes it to the
               LCD specified by the dipslay address. This function is
               non-reentrant and is an internal function.

PARAMETER1:    LCD pixel byte to be written to the LCD display.
PARAMETER2:    Physical address of where to write the pixel data on
               the LCD display.

RETURN VALUE:	None.

SEE ALSO:		graphic.lib, _glInit, _glDispOnOff, _glContrast,
               _glBackLight

END DESCRIPTION **********************************************************/

nodebug
void _glPlotRealtime (char pixel, long phydispAddr)
{

}


/*** BeginHeader */
#endif
/*** EndHeader */