/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** Beginheader */
#ifndef __GLMENU_LIB
#define __GLMENU_LIB
/*** endheader */

/* START LIBRARY DESCRIPTION *********************************************
GLMENU.LIB

DESCRIPTION:	Menu support for large Graphic LCD displays.

Revisions:

10/20/03		EK 	Changed _glMenuKeypad function to update the up/down
                  arrows only if a key is pressed.

END DESCRIPTION **********************************************************/


/*** BeginHeader windowMenu */
typedef struct  {
	windowFrame winframe;	// TextWindow descriptor pointer
	fontInfo *pFont;			// Font descriptor pointer
	int startwinX;				// x-coord of text window frame
	int startwinY;				// y-coord of text window frame
	int winwidth;				// Width of window frame
	int winheight;          // Height of window frame
	int maxMenuOptions;		// Total number of menu options
	int maxOptDisplayed;		// Max number of menu options to be displayed
	int shadow;             // Flag for the menu shadow option
	int border;             // Flag for the menu border option
	char** options;         // Pointer to the list of menu options
	char* title;            // Pointer to title of the menu
	int stringlength;       // Max number of characters for menu width
	int current_offset; 		// Pointer to current menu list
	int new_offset;			// Pointer to new menu list location
	int lasthighlight;  		// Last location of Highlight Bar
	int highlight;          // Current location of Hightlight Bar
} windowMenu;
/*** endheader */


/*** BeginHeader _glMenuInit */
int _glMenuInit(windowMenu *mPtr, int x, int y);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
_glMenuInit    		<GLMENU.LIB>

SYNTAX:  		int _glMenuInit(windowMenu *mPtr, int x, int y);

DESCRIPTION:	This function calculates the Text Menu parameters
               required to display a text MENU. This function is
               intended for internal use only and is also non-
               reentrant.

PARAMETER1:    WindowMenu descriptor pointer.
PARAMETER2:		X-coordinate of where the text MENU is to start.
PARAMETER3:		Y-coordinate of where the text MENU is to start.

RETURN VALUE:  0  = Menu was successfully created.
					-1 = Width of Menu Box exceeds LCD screen boundry.
					-2 = Height of Menu Box exceeds screen boundry.

SEE ALSO:
END DESCRIPTION **********************************************************/

nodebug
int _glMenuInit(windowMenu *mPtr, int x, int y)
{
	int textposX,  textposY;
	int textWidth, textHeight;

	if(x < 0)
		x = 0;
	if(y < 0)
		y= 0;

	if(mPtr->border == 0)
	{
		mPtr->winwidth  =  (mPtr->stringlength * mPtr->pFont->pixWidth);
		if(mPtr->winwidth  >= LCD_XS)
		{
			textposX  = 0;
		 	mPtr->winwidth  = LCD_XS;
		 	mPtr->startwinX = 0;
		 	return -1;
		}
		else if(mPtr->winwidth + x  >= LCD_XS)
		{
			textposX  = (LCD_XS - mPtr->winwidth)-1;
		 	mPtr->startwinX = (LCD_XS - mPtr->winwidth)-1;
		 	textWidth  = (mPtr->stringlength * mPtr->pFont->pixWidth);

		}
		else
		{
		 	textposX  = x;
		 	mPtr->startwinX = x;
		 	textWidth  = (mPtr->stringlength * mPtr->pFont->pixWidth);
		}

		if(mPtr->maxOptDisplayed == -1)
			mPtr->winheight =  (mPtr->maxMenuOptions * mPtr->pFont->pixHeight);
		else
			mPtr->winheight =  (mPtr->maxOptDisplayed * mPtr->pFont->pixHeight);

		if(mPtr->winheight >= LCD_YS)
		{
			y = 0;
			mPtr->winheight = LCD_YS;
			textposY  = 0;
			mPtr->startwinY = 0;
			textHeight = LCD_YS;
			return -2;

		}
		else if(mPtr->winheight + y  >= LCD_YS)
		{
			textposY  = (LCD_YS - mPtr->winheight)-1;
		 	mPtr->startwinY = (LCD_YS - mPtr->winheight)-1;
		 	if(mPtr->maxOptDisplayed == -1)
		 		textHeight = (mPtr->maxMenuOptions  * mPtr->pFont->pixHeight);
		 	else
		 		textHeight = (mPtr->maxOptDisplayed  * mPtr->pFont->pixHeight);
		}
		else
		{
			textposY  = y;
		 	mPtr->startwinY = y;
		 	if(mPtr->maxOptDisplayed == -1)
		 		textHeight = (mPtr->maxMenuOptions  * mPtr->pFont->pixHeight);
		 	else
		 		textHeight = (mPtr->maxOptDisplayed  * mPtr->pFont->pixHeight);
		}
	}

	else
	{
		mPtr->winwidth =(mPtr->stringlength * mPtr->pFont->pixWidth) +
		                (int)((float)mPtr->pFont->pixWidth*2);
		if(mPtr->winwidth  >= LCD_XS)
		{
			textposX  = 0;
			textWidth = LCD_XS;
		 	mPtr->winwidth  = LCD_XS;
		 	mPtr->startwinX = 0;
		 	return -1;
		}
		else if(mPtr->winwidth + x  >= LCD_XS)
		{
			mPtr->startwinX = (LCD_XS - mPtr->winwidth)-1;
			textposX   =  mPtr->startwinX+ (int)((float)mPtr->pFont->pixWidth);
			textWidth  = (mPtr->stringlength * mPtr->pFont->pixWidth);

		}
		else
		{
		 	mPtr->startwinX = x;
		 	textposX   =  mPtr->startwinX+ (int)((float)mPtr->pFont->pixWidth);
		 	textWidth  = (mPtr->stringlength * mPtr->pFont->pixWidth);
		}


		if(mPtr->maxOptDisplayed == -1)
			mPtr->winheight = (mPtr->maxMenuOptions * mPtr->pFont->pixHeight) +
			                  (int)(1.75*((float)mPtr->pFont->pixHeight));
		else
			mPtr->winheight = (mPtr->maxOptDisplayed * mPtr->pFont->pixHeight) +
			                  (int)(1.75*((float)mPtr->pFont->pixHeight));

		if(mPtr->winheight >= LCD_YS)
		{
			y = 0;
			textposY  = 0;
			mPtr->winheight = LCD_YS;
			mPtr->startwinY = 0;
			return -2;

		}
		else if(mPtr->winheight + y  >= LCD_YS)
		{
			mPtr->startwinY = (LCD_YS - mPtr->winheight)-1;
		 	textposY = mPtr->startwinY + (int)((float)mPtr->pFont->pixHeight);
			if(mPtr->maxOptDisplayed == -1)
		 		textHeight = (mPtr->maxMenuOptions  * mPtr->pFont->pixHeight);
		 	else
				textHeight = (mPtr->maxOptDisplayed  * mPtr->pFont->pixHeight);
		}
		else
		{
		 	mPtr->startwinY = y;
		 	textposY = mPtr->startwinY + (int)((float)mPtr->pFont->pixHeight);
		 	if(mPtr->maxOptDisplayed == -1)
		 		textHeight = (mPtr->maxMenuOptions  * mPtr->pFont->pixHeight);
		 	else
				textHeight = (mPtr->maxOptDisplayed  * mPtr->pFont->pixHeight);
		}
	}

	TextWindowFrame((windowFrame*)&mPtr->winframe, (fontInfo*)mPtr->pFont,
                    textposX, textposY,
	                 textWidth,
                    textHeight);

   mPtr->maxOptDisplayed = (int)(mPtr->winframe.curYmax - mPtr->winframe.startwiny);
	mPtr->maxOptDisplayed =  mPtr->maxOptDisplayed / (mPtr->winframe.pFont->pixHeight);
	return 0;
}

/*** BeginHeader _glMenuKeypad, DownArrow */
int _glMenuKeypad(windowMenu *mPtr);
extern unsigned long DownArrowx;
extern unsigned long DownArrow;
extern unsigned long BlankArrow;
/*** EndHeader */

// Init   : glXPutBitmap (leftedge,topedge,7,10,DownArrow_bmp);

xdata DownArrow {
'\x11',
'\x11',
'\x93',
'\xD7',
'\x7D',
'\x39',
'\x11'
};

xdata DownIndicator {
'\xff',
'\xff',
'\xff',
'\xff'
};

xdata BlankArrow {
'\x00','\x00',
'\x00','\x00',
'\x00','\x00',
'\x00','\x00',
'\x00','\x00',
'\x00','\x00',
'\x00','\x00',
'\x00','\x00',
'\x00','\x00',
'\x00','\x00',
'\x00','\x00',
'\x00','\x00',
'\x00','\x00'
};


/* START FUNCTION DESCRIPTION ********************************************
_glMenuKeypad    		<GLMENU.LIB>

SYNTAX:  		int _glMenuKeypad(windowMenu *mPtr);

DESCRIPTION:  	This function handles the option selection and scrolling
               operation of the MENU system. This function is intended
               for internal use only and is also non-reentrant.

PARAMETER:		WindowMenu descriptor pointer.

RETURN VALUE:	>0  = Indicates the Menu option selected.
                0  = Indicates no valid MENU key was pressed.
               -1  = Indicates that one of the following MENU scrolling
                     options were selected.
                   1. Scroll up/down by one line
                   2. Scroll up/down by one menu page.

SEE ALSO:		glMenu

END DESCRIPTION **********************************************************/

nodebug
int _glMenuKeypad(windowMenu *mPtr)
{

	auto int *offset;
	auto int *highlight;
   auto int maxMenuOptions;
	auto int wKey;
	auto windowFrame *wPtr;

	wPtr = (windowFrame*) &mPtr->winframe;
	offset = &(mPtr->current_offset);
	highlight = &(mPtr->highlight);
   maxMenuOptions = mPtr->maxMenuOptions;

	keyProcess();
	if((wKey = keyGet()) != 0)
	{
		switch(wKey)
		{
			case '-':	// Page down
				if(*offset < (maxMenuOptions))
				{
					if((*offset + mPtr->maxOptDisplayed) < (maxMenuOptions))
					{
						*offset += mPtr->maxOptDisplayed;
						if(*offset + mPtr->maxOptDisplayed > maxMenuOptions-1)
						 	*offset = (maxMenuOptions)- mPtr->maxOptDisplayed;
					}
				}
				*highlight = mPtr->maxOptDisplayed-1;
				wKey = -1;
				break;

			case '+':	// Page up
				if(*offset > (mPtr->maxOptDisplayed))
					*offset -=mPtr->maxOptDisplayed;
				else
					*offset = 0;
				if(*offset == 0)
					*highlight = 0;
				else
					*highlight = 0;

				wKey = -1;
				break;

			case 'U':	// Scroll-up by one line
				*highlight -= 1;
				if(*highlight < 0)
				{
					*offset -= 1;
					if(*offset < 0)
						*offset = 0;
					*highlight = 0;
				}
				if(*offset == 0 && *highlight == 0)
				{
					*highlight = 0;
				}
				wKey = -1;
				break;

			case 'D':	// Scroll-down by one line
				if((*offset + (*highlight)) < (maxMenuOptions))
				{
					*highlight += 1;
					if(*highlight > (mPtr->maxOptDisplayed - 1))
					{
						*offset += 1;
						if((*offset + *highlight) > maxMenuOptions)
							*offset -= 1;
						*highlight = mPtr->maxOptDisplayed-1;
					}
					if(*highlight >= maxMenuOptions-1)
					{
						*highlight = maxMenuOptions-1;
					}
				}
				wKey = -1;
				break;

			case 'E':	// Select option
				wKey = (*offset+1) + *highlight;
				break;

			default:
				wKey = -1;
		  		break;
		}
		if((*offset + mPtr->maxOptDisplayed-1) < maxMenuOptions-1)
		{
			if(wPtr->pFont->pixHeight < 10 || wPtr->pFont->pixWidth < 10)
			{
				glXPutBitmap ((mPtr->startwinX+ mPtr->winwidth)  -
		              	     (int)((float)(wPtr->pFont->pixWidth) *.2) - 6,
		                    (mPtr->startwinY+ mPtr->winheight) -
		                    (int)((float)(wPtr->pFont->pixHeight)*.2) - 5,
		                     4,4,DownIndicator);
			}
			else
			{
				glXPutBitmap ((mPtr->startwinX+ mPtr->winwidth)  -
		              	  	  (int)((float)(wPtr->pFont->pixWidth) *.2) - 9,
		                    (mPtr->startwinY+ mPtr->winheight) -
		                    (int)((float)(wPtr->pFont->pixHeight)*.2) - 9,
		                     7,7,DownArrow);
			}
		}
	 	else
	 	{
		 	if(wPtr->pFont->pixHeight < 10 || wPtr->pFont->pixWidth < 10)
			{
				glXPutBitmap (mPtr->startwinX+mPtr->winwidth  -
		                   (int)((float)(wPtr->pFont->pixWidth) *.2) - 6,
		                    mPtr->startwinY+mPtr->winheight -
		                   (int)((float)(wPtr->pFont->pixHeight)*.2) - 5,
		                    4,4, BlankArrow);
			}
			else
			{
				glXPutBitmap (mPtr->startwinX+mPtr->winwidth  -
		                   (int)((float)(wPtr->pFont->pixWidth) *.2) - 9,
		                    mPtr->startwinY+mPtr->winheight -
		                   (int)((float)(wPtr->pFont->pixHeight)*.2) - 9,
		                    7,7, BlankArrow);
 			}
      }
	}
	return(wKey);
}

/*** BeginHeader _glMenuBorder */
void _glMenuBorder(windowMenu *mPtr);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
_glMenuBorder    		<GLMENU.LIB>

SYNTAX:	      void _glMenuBorder(windowMenu *mPtr);

DESCRIPTION:   This function handles the border and title for a Text
               MENU. The following cases are covered by this function:


					Border:
					-------
               NO_BORDER.....Function will return with NO border drawn.
					SINGLE_LINE...Function will draw a single line border
					              around the Text Menu.
					DOUBLE_LINE...Function will draw a double line border
					              around the Text Menu.

					Title:
					------
					1. If a NULL string is detected then no title is written
					to the Text MENU.

					2. If a string is detected then it will be written to the
					top of the Text Menu Box as the title with center alignment.

					This function is intended for internal use only and
					is also non-reentrant.

PARAMETER:     WindowMenu descriptor pointer.

RETURN VALUE:	None.

SEE ALSO:		_glMenuShadow

END DESCRIPTION **********************************************************/

nodebug
void _glMenuBorder(windowMenu *mPtr)
{
	auto windowFrame *wPtr;
	auto int xoffset;
	auto int yoffset;
	auto int offset;
	auto int x;

	wPtr = (windowFrame*) &mPtr->winframe;
	if(mPtr->border== DOUBLE_LINE || mPtr->border == SINGLE_LINE)
	{
		yoffset = (int)((float)mPtr->pFont->pixHeight * .2);
		glPlotPolygon(4,
	  					  mPtr->startwinX,
	   				  mPtr->startwinY+yoffset,

	   				  mPtr->startwinX+mPtr->winwidth,
	                 mPtr->startwinY+yoffset,

	                 mPtr->startwinX+mPtr->winwidth,
	                 mPtr->startwinY+mPtr->winheight,

	                 mPtr->startwinX,
	                 mPtr->startwinY+mPtr->winheight);
	}
	if(mPtr->border == DOUBLE_LINE)
	{
		xoffset = (int)((float)wPtr->pFont->pixWidth  * .2);
	   yoffset = (int)((float)wPtr->pFont->pixHeight * .2);

	   if(xoffset >= yoffset)
	     	offset = xoffset;
	   else
			offset = yoffset;

		yoffset = (int)((float)mPtr->pFont->pixHeight*.3);
		glPlotPolygon(4,
	   				  mPtr->startwinX+ offset,
	   				  mPtr->startwinY+ offset+ yoffset,

	   				  mPtr->startwinX+mPtr->winwidth- offset,
	                 mPtr->startwinY+ offset + yoffset,

	                 mPtr->startwinX+mPtr->winwidth-offset,
	                 mPtr->startwinY+mPtr->winheight-offset,

	                 mPtr->startwinX+offset,
	                 mPtr->startwinY+mPtr->winheight-offset);
	}
	if(strlen(mPtr->title))
	{
		x = (mPtr->winwidth - strlen(mPtr->title) * wPtr->pFont->pixWidth) /2;
		x -= (wPtr->pFont->pixWidth>>1);
		if(strlen(mPtr->title)% 2)
			x += (wPtr->pFont->pixWidth>>1);
		glPrintf(x+mPtr->startwinX, mPtr->startwinY, mPtr->pFont, "%s", mPtr->title);
	}
}

/*** BeginHeader _glMenuShadow */
void _glMenuShadow(windowMenu *mPtr);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
_glMenuShadow    		<GLMENU.LIB>

SYNTAX:  		_glMenuShadow(windowMenu *mPtr);

DESCRIPTION:  	This function provides shadowing on a given MENU when
               the option is enabled. This function is intended for
               internal use only and is also non-reentrant.

PARAMETER:		WindowMenu descriptor pointer.

RETURN VALUE:  None.

SEE ALSO:		_glMenuBorder

END DESCRIPTION **********************************************************/

nodebug
void _glMenuShadow(windowMenu *mPtr)
{
	auto int brushtype;

	if(!mPtr->shadow)
		return;
	brushtype = glGetBrushType();
	glSetBrushType(PIXBLACK);
	glBlock (mPtr->startwinX+ (int)((float)mPtr->pFont->pixHeight*.2),
	         mPtr->startwinY+ (int)((float)mPtr->pFont->pixHeight/2),
	         mPtr->winwidth,
	         mPtr->winheight - ((int)((float)mPtr->pFont->pixHeight/2)) +
	        (int)((float)mPtr->pFont->pixHeight*.2));
	glSetBrushType(brushtype);
}


/*** BeginHeader glMenuClear, _shadow_clear */
void glMenuClear(windowMenu *mPtr);
extern int _shadow_clear;
/*** EndHeader */
int _shadow_clear;

/* START FUNCTION DESCRIPTION ********************************************
glMenuClear    		<GLMENU.LIB>

SYNTAX:  	   glMenuClear(windowMenu *mPtr);

DESCRIPTION:  	This function clears the MENU indicated by the WindowMenu
               descriptor pointer from the LCD display. This function is
               non-reentrant.

PARAMETER:		WindowMenu descriptor pointer.

RETURN VALUE:  None

SEE ALSO:		glRefreshMenu, glMenu, glMenuInit

END DESCRIPTION **********************************************************/

nodebug
void glMenuClear(windowMenu *mPtr)
{
	auto int brushtype;

	#GLOBAL_INIT {_shadow_clear = 1;}

	brushtype = glGetBrushType();
	glSetBrushType(PIXWHITE);
	glBuffLock();

	if(_shadow_clear)
	{
		glBlock(mPtr->startwinX, mPtr->startwinY,
		        mPtr->winwidth + 1+ (int)((float)mPtr->pFont->pixHeight*.2),
		        mPtr->winheight+ 1+ (int)((float)mPtr->pFont->pixHeight*.2));
	}
	else
	{
		glBlock(mPtr->startwinX, mPtr->startwinY,
		        mPtr->winwidth+1, mPtr->winheight+1);
	}
	glSetBrushType(brushtype);
	_shadow_clear = 1;
	glBuffUnlock();
}

/*** BeginHeader glRefreshMenu */
void glRefreshMenu( windowMenu *mPtr );
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
glRefreshMenu    		<GLMENU.LIB>

SYNTAX:  		void glRefreshMenu(windowMenu *mPtr);

DESCRIPTION:   This function refreshes the MENU indicated by the
               WindowMenu descriptor pointer. This function is
               non-reentrant.

PARAMETER:		WindowMenu descriptor pointer.

RETURN VALUE:  None

SEE ALSO:		glMenuInit, glMenu, glMenuClear
END DESCRIPTION **********************************************************/

nodebug
void glRefreshMenu( windowMenu *mPtr  )
{
	auto state;

	state = MENU_REFRESH;
	glMenu(mPtr, &state, -1, -1);
}



/*** BeginHeader glMenuInit */
int glMenuInit(windowMenu *menu, fontInfo *pFont,
               int border, int shadow, char **menu_options,
               char* title, int maxOptDisplayed);
               
#ifndef NO_BORDER
#define NO_BORDER		0
#endif

#ifndef SINGLE_LINE
#define SINGLE_LINE 	1
#endif

#ifndef DOUBLE_LINE
#define DOUBLE_LINE 	2
#endif

#define NO_SHADOW 0
#define SHADOW 	1

/*** EndHeader */


/* START FUNCTION DESCRIPTION ********************************************
glMenuInit    			<GLMENU.LIB>

SYNTAX:  		int glMenuInit(windowMenu *menu, fontInfo *pFont,
               	 			   int border, int shadow,
               	 			   char **menu_options,
               					char* title,
               					maxOptDisplayed);

DESCRIPTION:  	This function initialize's a Menu structure with
               the required parameters to automatically build
               and display a Text Menu when the glMenu function
               is executed.

PARAMETER1:		WindowMenu descriptor pointer.
PARAMETER2:		Font descriptor pointer.
PARAMETER3:    Menu Border option:
   				0 = NO_BORDER.....NO border drawn.
					1 = SINGLE_LINE...Draw a single line border around
					                  the Text Menu.
					2 = DOUBLE_LINE...Draw a double line border around
					                  the Text Menu.

PARAMETER4:		Menu Shadow option:
					0 = NO_SHADOW...No shadowing will be provided on the Menu.
					1 = SHADOW......Shadowing will be provided on the Menu.

PARAMETER5:    Pointer to the list of Menu options. Below is an example of
               a list of options for the menu system:

               //----------------------------------------------------------
					// Menu options........set as needed for your application
					//----------------------------------------------------------
               const char *main_menu [] =
					{
					"1.Increase Menu size",
					"2.Decrease Menu size",
					"3.Backlight menu",
					""
					};

					//-----------------------------------------------------------
					// More infor:
					//-----------------------------------------------------------
					1. Can insert/delete menu options. The highlight bar is setup
					   to start with the first MENU option and stop at the last
					   menu option in the MENU.

					2. When adding/deleting menu options you must match up the
					   case statements to the menu option number.

PARAMETER6:    Menu Title:
					ASCII string = Title.
               Null string  = No title.

PARAMETER7:    Indicates the maximum number of options to be displayed
               by the Menu.
					-1 = Forces all options to be displayed.
					>0 = The menu box will only display the number of options
					     indicated, which will require the user to use the
					     scroll keys to bring an option into the Menu Box
					     view area for selection.

RETURN VALUE:  -1 if Menu Border parameter value is invalid,
               0 otherwise (success).

SEE ALSO:		glMenu, glMenuClear, glRefreshMenu
END DESCRIPTION **********************************************************/

nodebug
int glMenuInit(windowMenu *mPtr, fontInfo *pFont,
               int border, int shadow, char **menu_options,
               char* title, int maxOptDisplayed)
{
	auto int i;
	auto int option_cnt, maxstringlength, titlelength;

	if(border < 0 || border > 3)
		return -1;

	titlelength = strlen(title);
	mPtr->options = menu_options;
	option_cnt = 0;
	maxstringlength = 0;
	while(strcmp(menu_options[option_cnt], "") != 0)
	{
		if(strlen(menu_options[option_cnt]) > maxstringlength)
		{
			maxstringlength = strlen(menu_options[option_cnt]);
		}
		option_cnt++;
	}
	if(((maxstringlength) < titlelength+4) && titlelength > 0)
	{
		maxstringlength = titlelength+4;
	}
	mPtr->pFont = pFont;
	mPtr->maxMenuOptions  = option_cnt;
	mPtr->stringlength = maxstringlength;
	mPtr->border = border;
	if(border == 0)
	{
		mPtr->shadow = 0;
		mPtr->title  = "";
	}
	else
	{
		mPtr->shadow = shadow;
		mPtr->title  = title;
	}
	mPtr->maxOptDisplayed = maxOptDisplayed;
   return 0;
}


/*** BeginHeader glMenu */
int glMenu (windowMenu *mPtr, int *state, int x, int y);
//----------------------------------------------------------
// START.....Macros and Structure for menu system
// !!! The following section is not intended to be changed.
//----------------------------------------------------------
#define MENU_INIT 				0
#define MENU_NO_CHANGE	 		1
#define MENU_REFRESH     		2

fontInfo errFont;
/*** EndHeader */


/* START FUNCTION DESCRIPTION ********************************************
glMenu    				<GLMENU.LIB>

SYNTAX:	      int glMenu (windowMenu *mPtr, int *state, int x, int y);

DESCRIPTION:   Display a MENU on the LCD display and get the menu
               option from the user

               Note: This function will display an error message on the
                     LCD if the Menu width or height exceeds the LCD
                     display boundry.

PARAMETER1:    Pointer to structure that contains the infor for the Menu
PARAMETER2:    Pointer to Menu control parameter, parameter states are as
               follows:

	            0 = MENU_INIT..........Initialize and Display Menu.
	            1 = MENU_NO_CHANGE.....Return to selected option, no
	                                   change's to menu or highlightbar.
               2 = MENU_REFRESH.......Display the last image of the menu,
                                      including location of the highlight
                                      bar.

PARAMETER3:		X-coordinate of where the text MENU is to start.
PARAMETER4:		Y-coordinate of where the text MENU is to start.

RETURN VALUE:	 0 = No option is selected.
               >0 = Option the user has selected.
               -1 = Menu has exceeded LCD screen Width.
               -2 = Menu has exceeded LCD screen Height.

SEE ALSO:		glMenuInit, glMenuClear, glRefreshMenu

END DESCRIPTION **********************************************************/

nodebug
int glMenu (windowMenu *mPtr, int *state, int x, int y)
{
	auto int menu_option;
	auto int i, status;
	auto int max_char_lines;
	auto windowFrame *wPtr;
	auto int brushtype;

	brushtype = glGetBrushType();
	glSetBrushType(PIXBLACK);
	wPtr = (windowFrame*) &mPtr->winframe;
	menu_option = 0;
	switch(*state)
	{
		case 0: // Set menu parameters in menu structure array

			if((status = _glMenuInit(mPtr, x, y)))
			{
				glXFontInit(&errFont, 8, 10, 32, 127, Font8x10);
				if(status == -1)
				{
					glBlankScreen();
					glPrintf(0,20, &errFont, "Error! Menu Width exceeds LCD screen");
					return(-1);
				}
				if(status == -2)
				{
					glBlankScreen();
					glPrintf(0,20, &errFont, "Error! Menu Height exceeds LCD screen");
					return(-2);
				}
			}
			mPtr->current_offset = 0;
			mPtr->highlight = 0;
			mPtr->new_offset = !mPtr->current_offset;

			// Make sure no key is being pressed initially
			keyProcess ();
			if(keyGet() == 0)
			{
				*state = 3;
				break;
			}
			break;

		case 1: 	// Get the user's option
			menu_option = _glMenuKeypad(mPtr);
			if(menu_option == -1)
			{
				// Check if user selected the scrolling option
				glSetBrushType(PIXXOR);
				glBlock (wPtr->startwinx,
				         mPtr->lasthighlight*wPtr->pFont->pixHeight+wPtr->startwiny,
				         wPtr->curXmax-wPtr->startwinx,
				         wPtr->pFont->pixHeight);
				glSetBrushType(PIXBLACK);

				// Set menu option to zero due to scrolling operation
				menu_option = 0;
				*state = 3;
			}
			break;

		case 2: // Refresh menu options

			glBuffLock();
			_shadow_clear = 0;
			_glMenuShadow(mPtr);
			glMenuClear(mPtr);
			_glMenuBorder(mPtr);
			for(i=0; i < mPtr->maxOptDisplayed; i++)
			{
				TextGotoXY(wPtr, 0, i);
				TextPrintf(wPtr, "%s", mPtr->options[mPtr->current_offset]);
				if(mPtr->options[mPtr->current_offset + 1] == '\0')
				{
					break;
				}
				mPtr->current_offset++;
			}
			// Reset the offset back to the first option displayed
			mPtr->current_offset = mPtr->current_offset-i;
			mPtr->new_offset = mPtr->current_offset;
			glSetBrushType(PIXXOR);
			glBlock (wPtr->startwinx,
			        (mPtr->highlight*wPtr->pFont->pixHeight)+wPtr->startwiny,
			         wPtr->curXmax-wPtr->startwinx,
			         wPtr->pFont->pixHeight);
			glSetBrushType(PIXBLACK);
			glBuffUnlock();
			mPtr->lasthighlight = mPtr->highlight;
			*state = 1;
			break;


		case 3: // Display menu option
			if(mPtr->current_offset != mPtr->new_offset)
			{
				glBuffLock();
				_shadow_clear = 0;
				_glMenuShadow(mPtr);
				glMenuClear(mPtr);
				_glMenuBorder(mPtr);
				for(i=0; i < mPtr->maxOptDisplayed; i++)
				{	TextGotoXY(wPtr, 0, i);
					TextPrintf(wPtr, "%s", mPtr->options[mPtr->current_offset]);
					if(mPtr->options[mPtr->current_offset + 1] == '\0')
					{
						break;
					}
					mPtr->current_offset++;
				}
				glBuffUnlock();
				// Reset the offset back to the first option displayed
				mPtr->current_offset = mPtr->current_offset-i;
				mPtr->new_offset     = mPtr->current_offset;
			}
			glSetBrushType(PIXXOR);
			glBlock (wPtr->startwinx,
			         mPtr->highlight*wPtr->pFont->pixHeight+wPtr->startwiny,
			         wPtr->curXmax-wPtr->startwinx,
			         wPtr->pFont->pixHeight);
			glSetBrushType(PIXBLACK);
			mPtr->lasthighlight = mPtr->highlight;
			*state = 1;
			break;

		default:
			*state = 0;
			break;
	}
	glSetBrushType(brushtype);
	return(menu_option);
}


/*** BeginHeader */
#endif
/*** EndHeader */

