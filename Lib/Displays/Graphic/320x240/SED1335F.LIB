/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*** BeginHeader */
#ifndef __SED1335F_LIB
#define __SED1335F_LIB
/*** EndHeader */

/* START LIBRARY DESCRIPTION *********************************************
SED1335F.LIB

DESCRIPTION:	Low-level driver for the SED1335F Graphic Chip

SUPPORT LIBS:

END DESCRIPTION **********************************************************/


/*** BeginHeader glBuf, glbuf_offset, glbuf_xpc, xpc_temp */
//
// Requirement
// -----------
// This section required for all LCD driver designs. The only values that
// will change in this section (from design to design) are the LCD_XS,
// LCD_YS, PIXEL_XS and PIXEL_XS macro's.
//

// LCD display resolution...these MACRO's are for the customer to use in
// their application program.
#define LCD_XS					320			// Number of pixels on the x-axis
#define LCD_YS					240			// Number of pixels on the y-axis


// Graphic Buffer MACRO's
// 1. PIXEL_XS needs to be evenly divisble by 8.
// 2. These MACRO's are intended for internal use only.
#define	PIXEL_XS				320			//	Horz Pixels = [0..PIXEL_XS-1]
#define	PIXEL_YS				240 			//	Vert Pixels = [0..PIXEL_YS-1]
#define	PIXGROUP				PIXEL_XS/8	//	Horz Byte Groups
#define	XMEM_BUF_SIZE   	(PIXEL_XS * PIXEL_YS)/8

extern unsigned long glBuf;		  	// Display buffer XMEM physical addr
extern unsigned int glbuf_offset;  	// Display buffer logical offset addr
extern unsigned int glbuf_xpc;     	// Display buffer XPC page address
extern unsigned int xpc_temp;     	// Temp variable for XPC control
extern unsigned int glPageAddr;

//
// Requirement
// -----------
// The following is the list of functions that are required to be
// in this Library. If your design doesn't have one of the features
// that the function provides, then you must provide a NULL function
// so that graphic.lib will compile properly.
//
//	// Initializes the LCD
//    void _glInit(void);
//
// // Takes the data from the glBuf which the graphic routines created
// // and displays it on the LCD
//    void _glSwapData( void );
//
//	// Controls the LCD backlight
//	   void glBackLight( int onOff );
//
//	// Controls turning ON/OFF the display...display data is retained
//  	void glDispOnOff( int onOff  );
//
//	// Control the contrast on the display..not implemented for this LCD.
//	   void glContrast( int Level );
//
// Requirement
// -----------
// Must have the following code in the _glInit function to allocate
// memory for the graphic routines and to convert the ulong XMEM
// pointer to a normalized offset and XPC pointer.
//
//		nodebug
//		void _glInit(void)
//		{
//				// Must initialize the Graphic buffer pointer before
//				// using any graphic functions.
//				glBuf = xalloc(XMEM_BUF_SIZE);
//
//				// Initialize global XMEM offset and XPC pointers
//				#asm
//				ld    de, (glBuf)
//				ld    bc, (glBuf + 2)
//
//				; Convert DE:BC to a normalized XMEM pointer
//				call	LongToXaddr		; DE = offset of glBuf, A = xpc of glBuf
//				ld    (glbuf_xpc),a
//				ld    (glbuf_offset), de
//				#endasm
//
//				// Initialize the I/O strobe for the LCD
//				_glInitStrobe();
//
//
//				//Other Initialization
//				//	:
//				//	:
//				//	:
//		}
//
//
//
//
// Requirement
// -----------
// Declare variables outside of the Start/End header section
//
/*** EndHeader */

unsigned long glBuf;		   	// Display buffer XMEM physical address
unsigned int glbuf_offset;  	// Display buffer logical offset address
unsigned int glbuf_xpc;     	// Display buffer XPC page address
unsigned int xpc_temp;     	// Temp variable for XPC control
unsigned int glPageAddr;
//  END OF DRIVER REQUIREMENTS!!!!!





/*** BeginHeader */
#define	SEDCR			0xE001				//	SED1335 Command Register
#define	SEDDR			0xE000				//	SED1335 Data Register
#define	HWRID			0xA000				// Hardware ID Reg
													// Bits 3-0 are 0b1111 for old ctlr
													// and 0b0000 for new ctlr
#define TCYC_DELAY	$\
	nop					$\
   nop


#define _SED1335F_NEW_CONTROLLER_DELAY		100 // delay in ms


// Use Port E bit 7 for LCD Chip Select with 4 wait states
#define LCDSTROBE			0x80
#define LCDCSREGISTER	IB7CR
#define LCDCSSHADOW		IB7CRShadow
#define LCDCSCONFIG		0x88
/*** EndHeader */



/*** BeginHeader _glInitStrobe */
void _glInitStrobe(void);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_glInitStrobe			<SED1335F.LIB>
SYNTAX:			void _glInitStrobe(void);

DESCRIPTION:	This function initializes I/O port E, bit 7 to access
 					the LCD display. Port E bit 7 is setup to be an I/O Read
 					and Write strobe with 4 wait states. This function is non-
 					reentrant and is an internal function.

PARAMETER:		None.

RETURN VALUE:	None.

SEE ALSO:		_glInitController

END DESCRIPTION **********************************************************/

nodebug
void _glInitStrobe(void)
{
	// Initialize Port E bit to be a normal I/O pin
	WrPortI(PEFR, &PEFRShadow, (PEFRShadow|LCDSTROBE));

	// Initialize Port E bit to be an output pin
	WrPortI(PEDDR, &PEDDRShadow, (PEDDRShadow|LCDSTROBE));

	// Initialize Port E bit to be a chip select.
	// Set to be a I/O Read and Write strobe with 7 wait states.
	// and writes allowed.

	WrPortI(LCDCSREGISTER, &LCDCSSHADOW, LCDCSCONFIG);

	// Set Port E bit to be clocked by PCLK/2
	WrPortI(PECR, &PECRShadow, (PECRShadow & ~0xFF));
}


/*** BeginHeader _glInitLCDChip */
void _glInitLCDChip(void);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_glInitLCDChip				<SED1335F.LIB>

SYNTAX:	      void _glInitLCDChip(void)

DESCRIPTION:	This functions initalizes the SED1335F IC chip with the
               required parameters to access an 320x240 LCD display. This
               function is non-reentrant and is an internal function.

PARAMETER:		None.

RETURN VALUE:	None.

SEE ALSO:		graphic.lib, _glDispOnOff, _glContrast, _glBackLight
               _glSwapData

END DESCRIPTION **********************************************************/

nodebug
void _glInitLCDChip(void)
{

	auto unsigned long timeDelay;

	// Make there's a min of 3ms before accessing the controller chip
	timeDelay = MS_TIMER + 4;
   while( (long) (MS_TIMER - timeDelay) < 0 );
#asm
	ld		bc,SEDCR			; INIT DISPLAY
	ld		a,0x40
	ioe	ld (bc),a 			;	out	(c),a
	TCYC_DELAY

; The new LCD Ctlr Chip (S1D13700)
; requires a delay after the system
; set command in order for the 20Mhz
; oscillator to come up to speed

	; Get current time
	ipset		1
   ld			hl,(MS_TIMER+2)
	ld			b,h
	ld			c,l
	ipres
	ld			hl,(MS_TIMER)

   ; Set delay
   ld			de,_SED1335F_NEW_CONTROLLER_DELAY
   add		hl,de
   ex			de',hl
   ld			h,b
   ld			l,c
   ld			bc,0
   adc		hl,bc
	ld			b,h
	ld			c,l
   ex			de',hl
   ex			de,hl

   ; At this point bc/de have the timeout high/low words

   ; do the subtraction, but only need MSB of result.
   ; Atomic get of MS_TIMER
	; The following code is equivalent to
   ; return ((long)(MS_TIMER-timeout))>=0;
.loop_again:
	ipset		1
   ld			hl,(MS_TIMER+2)
	ex			de',hl
	ipres
	ld			hl,(MS_TIMER)
	or			a
	sbc		hl,de
	ex			de',hl
	sbc		hl,bc
	add		hl,hl
	ccf
	sbc		hl,hl
	bool		hl
   jr			z,.loop_again

   ld		bc,SEDCR

	dec	bc
	ld		a,0x30				; Single Panel, LCD Mode
	ioe	ld (bc),a 			;	out	(c),a
 	TCYC_DELAY

	ld		a,0x87h				; 8-Bit Char Witth, 2 Frame AC Drive
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	ld		a,07h					; Graphic Mode = 0 bits/character
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	ld		a,39					; 39 = 40 Bytes per Line
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	push	bc						; Save LCD Data Pointer
   ld		bc,HWRID				; Get pointer to Hardware ID Reg
   ioe	ld		a,(bc)		; Get Hardware ID bits 3-0
   and	a,0x0f				; Test for New LCD CTLR
   jr		z, .new_ctlr		; Yes.. New LCD CTLR PWB Revision
   								; Note: Power Tip LCDM FLM=55 min to 75 max

;	To select the frequency uncomment the desired line
;	ld		a,51					; Set TC/R to Reduce Jitter *** (Violates Spec)
;  ld		a,55					; No..Old LCD CTLR PWB (S1D13305) FLM=75Hz
;	ld		a,60					; No..Old LCD CTLR PWB (S1D13305) FLM=70Hz
	ld		a,64					; No..Old LCD CTLR PWB (S1D13305) FLM=65Hz
;	ld		a,70					; No..Old LCD CTLR PWB (S1D13305) FLM=60Hz
;	ld		a,76					; No..Old LCD CTLR PWB (S1D13305) FLM=55Hz
   jr		.ld_tcr				; Go load TC/R Parameter

.new_ctlr:						;
;	To select the frequency uncomment the desired line
;	ld		a,138					; Yes..New LCT CTLR PWB (S1D13700) FLM=75Hz
;	ld		a,148					; Yes..New LCT CTLR PWB (S1D13700) FLM=70Hz
	ld		a,159					; Yes..New LCT CTLR PWB (S1D13700) FLM=65Hz
;	ld		a,173					; Yes..New LCT CTLR PWB (S1D13700) FLM=60Hz
;	ld		a,188					; Yes..New LCT CTLR PWB (S1D13700) FLM=55Hz
.ld_tcr:							;
	pop	bc						; Restore LCD Data Pointer
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	ld		a,239					; 240 Lines per Frame
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	ld		a,40					; 40 Byte Virt Screen Width (LSB First)
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	ld		a,0
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	inc	bc						; SET SCROLL
	ld		a,044h
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	dec	bc
	ld		a,000h				; First Screen @ 00000h (SAD1)
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	ld		a,000h
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	ld		a,239					; First Screen Number of Lines
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	ld		a,000h				; Second Screen @ 4000h (SAD2)
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	ld		a,040h
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	ld		a,239					; Second Screen Number of Lines
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	inc	bc						; SET OVERLAY (Two Layer OR)
	ld		a,05Bh
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	dec	bc
	ld		a,00Ch
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	inc	bc						; Cursor Auto Increment (Right)
	ld		a,04Ch
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	ld		a,05Ah				; Zero Horizontal Scroll (HDOT = 0)
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	dec	bc
	ld		a,000h
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	inc	bc						; Show Page 0
	ld		a,059h
	ioe	ld (bc),a			;	out	(c),a
	TCYC_DELAY

	dec	bc
	ld		a,004h
	ioe	ld (bc),a  			;	out	(c),a
	TCYC_DELAY

#endasm
}

/*** BeginHeader _glInit */
void _glInit(void);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION ********************************************
_glInit				<SED1335F.LIB>

SYNTAX:	      void _glInit(void);

DESCRIPTION:   This functions initializes the graphic chip and sets up
               graphic driver for use by the application program. This
					function is non-reentrant and is an internal function.

PARAMETER:		None.

RETURN VALUE:	None.

SEE ALSO:		graphic.lib, _glDispOnOff, _glContrast, _glBackLight
               _glInitLCDChip, _glSwapData, _glPlotRealtime

END DESCRIPTION **********************************************************/

nodebug
void _glInit(void)
{
	_glInitStrobe();
	// Allocate XMEM for the Graphic buffer
	glBuf = xalloc(XMEM_BUF_SIZE);

	// Initialize global glBuf XMEM offset and XPC pointer
	#asm
		ld		de, (glBuf)
		ld    bc, (glBuf + 2)

		; Convert BC:DE to a normalized XMEM pointer
		call	LongToXaddr			; DE = offset of glBuf, A = xpc of glBuf
		ld    (glbuf_xpc),a
		ld    (glbuf_offset), de
	#endasm



	// Initialize SED1535F controller chip
	_glInitLCDChip();

	// Initially set upper page (located at 0x4000) to be hidden
	glPageAddr = 0x4000;

	// Initially set the graphic's buffer to be unlocked
	glLock = 0;

	// Clear the screen before turning ON the display
	glBlankScreen();

	// Turn ON the display
	_glDispOnOff( 1 );

	// Set pixel color to Black
	glSetBrushType(PIXBLACK);

	// Initialize the glprintf() function stepping parameters
	glSetPfStep(1,0);

	// Disable Animation mode
	glAnimation(0);

	// Disable glPlotDot realtime LCD display accesses
	glRealtime(0);
}

/*** BeginHeader _glSwapData, animation */
void _glSwapData(void);
extern int animation;
/*** EndHeader */

int animation;

/* START _FUNCTION DESCRIPTION *******************************************
_glSwapData				<SED1335F.LIB>

SYNTAX:	      _glSwapData(void);

DESCRIPTION:   This function takes the LCD display data from the graphic
					buffer (glBuf) and writes it to the LCD display. This
					function is non-reentrant and is an internal function.

PARAMETER1:    None.

RETURN VALUE:	None.

SEE ALSO:		graphic.lib, _glInit, _glDispOnOff, _glContrast,
               _glBackLight

END DESCRIPTION **********************************************************/

nodebug
root void _glSwapData(void)
{
		static int buf_size;

		buf_size = XMEM_BUF_SIZE;
#asm
		ld    a,xpc  				; Save-off current XPC value
		push  af

		ld		a,(glbuf_xpc)		; Get glBuf XPC value
		ld    xpc,a					; Mapped in glBuf into the 0xE000 block

		ld		hl,(glPageAddr)	; HL = LCD Write Addr
		ld		de,SEDCR				; BC = LCD Command Reg
		ld		a,046h				; WRITE CURSOR
		ioe	ld (de),a
		dec	de
		TCYC_DELAY

		ld    a,l
		ioe	ld (de),a
		TCYC_DELAY

		ld    a,h
		ioe	ld (de),a
		TCYC_DELAY

		inc	de						; WRITE MEMORY Command
		ld		a,042h
		ioe	ld (de),a  			;
		dec	de						; BC = LCD Data Wr/LCD Status Rd

		ld    hl,(glbuf_offset)	; Get glBuf offset within 0xE000 block
		ld		bc,(buf_size)		; BC = Byte Counter

		ld    a,(animation)
		cp    a,0
		jr    z,.noanimation

.animation:
		bit   4,h					; Test if HL exceeded 0xF000 boundary
		jr    z,.skipXPC1			;
		res   4,h					; Set glBuf offset back to 0xE000 range
		ld    a,xpc					; Get XPC value
		inc   a						; Bump XPC to point to next 4K block
		ld    xpc,a					; Update XPC register

.skipXPC1:
		TCYC_DELAY
		ioe 	ldi					; IO(DE) = MEM(HL++), --B
		dec	e						; Restore DE address

		TCYC_DELAY
		ioe	ldi					; IO(DE) = MEM(HL++), --B
		dec	e						; Restore DE address

		ld		a,b					; Continue til Done
		or		c
		jr		nz,.animation
		jr    .bufferdone

.noanimation:
		bit   4,h					; Test if HL exceeded 0xF000 boundary
		jr    z,mem_wait			;
		res   4,h					; Set glBuf offset back to 0xE000 range
		ld    a,xpc					; Get XPC value
		inc   a						; Bump XPC to point to next 4K block
		ld    xpc,a					; Update XPC register

;align even							;

mem_wait:							;
		ld		de,HWRID				; Pointer to hardware revision register
      ioe	ld	a, (de)			; Get revision
      and	a,0x0f				; Check for new controller (S1D13700 LCD CTLR)
      jr		z,.no_wait			; New CTLR, so need to wait for retrace peiod
		ld		de,SEDDR				; Old CTLR so sync up with retrace before write

mem_wait1:
		ioe	ld a,	(de)			; Wait for Memory Busy Flag, D6 = 1
      and	0x40					;
      TCYC_DELAY					;
      jr		z,mem_wait1			;

mem_wait2:
		ioe	ld a, (de)  		; Wait for Memory Ready Flag, D6 = 0
		and	0x40					; Wait For Memory Ready
		TCYC_DELAY					;
		jr		nz,mem_wait2		;

.no_wait:
		ld		de,SEDDR				;
.wr_loop:
		ioe	ldi					; IO(DE++) <= MEM(HL(++), BC--
      dec	e						; Restore DE pntr to data reg
      ld		a,c					; Check for xfer
      and	a,0x0f				; complet (0x0f = 16 bytes)
      jr		nz,.wr_loop			; No..Keep going

		ld		a,b					; Continue til Done
		or		c
		jr		nz,.noanimation

.bufferdone:
		ld		hl,glPageAddr+1	; HL = &MSB(Hidden Page Addr)
		ld		a,0x40				; Swap Visible/Hidden Page Address
		xor	a,(hl)
		ld		(hl),a
		ld		a,0x10				; If Page 0 Hidden, Show Page 1
		jr		z,sync
		ld		a,0x04				; If Page 1 Hidden, Show Page 0

sync:	;*** Wait for Frame Sync to Eliminate Shear ***;
		push	af						; Save display Page
 		ld		bc,HWRID				; Get pointer to hardware ID reg
      ioe	ld	a,(bc)			; Get hardware ID
      and	a,0x0f				; Check for new rev ctlr (S1D13700)
      jr		z,.no_wait2		 	; Yes..Need to sync up with retrace
      ld		bc,SEDDR				; No...Restore Ctlr Data reg pntr
.wait2:								;
		ioe	ld a, (bc)			; Wait for memory Busy Flag, D6 = 0
		and	a,0x40				;
		TCYC_DELAY
		jr		nz,.wait2			; Fall when retrace starts
.no_wait2:
		ld		bc,SEDCR				;
		ld		a,059h				; Send Page control command
		ioe	ld (bc),a
		TCYC_DELAY

		pop	af						; Restrieve display Page
		dec	bc						; Swap display pages
		ioe	ld (bc),a			; out	(c),a

		pop   af						; Retrieve XPC value
		ld   	xpc,a             ; Restore XPC
#endasm
}


/*** BeginHeader _glPlotRealtime */
useix root void _glPlotRealtime (char pixel, long phydispAddr);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION *******************************************
_glPlotRealtime				<SED1335F.LIB>

SYNTAX:	      void _glPlotRealtime (char pixel, long phydispAddr)

DESCRIPTION:   This function takes a byte of data and writes it to the
               LCD specified by the dipslay address. This function is
               non-reentrant and is an internal function.

PARAMETER1:    LCD pixel byte to be written to the LCD display.
PARAMETER2:    Physical address of where to write the pixel data on
               the LCD display.

RETURN VALUE:	None.

SEE ALSO:		graphic.lib, _glInit, _glDispOnOff, _glContrast,
               _glBackLight

END DESCRIPTION **********************************************************/

nodebug
useix root void _glPlotRealtime (char pixel, long phydispAddr)
{
		static int dispAddr;
#asm
		; Calculate pixel display address
		c		dispAddr = (int) (phydispAddr - glBuf);

		ld		bc,(dispAddr)
		ld    hl,0x0000
		ld    a,(glPageAddr+1)
		cp    0x00
		jr    nz,writeadr
		ld    hl,0x4000

writeadr:
		add   hl,bc					;Add pixel offset to base address

		ld		de,SEDCR				; Write Cursor location
		ld		a,046h				; Load reg with cursor command
		ioe	ld (de),a
		dec	de
		TCYC_DELAY

		ld    a,l
		ioe	ld (de),a
		TCYC_DELAY

		ld    a,h
		ioe	ld (de),a

		; Write pixel data to display memory
		inc	de							; WRITE MEMORY
		ld		a,042h
		ioe	ld (de),a
		TCYC_DELAY

		; Restore Registers for Graphic routine
sync:	;*** Wait for Frame Sync to Eliminate Shear ***;
 		ld		de,HWRID				; Get pointer to hardware ID reg
      ioe	ld	a,(de)			; Get hardware ID
      and	a,0x0f				; Check for new rev ctlr (S1D13700)
      jr		z,.no_wait1			; Yes..No need to wait for retrace
      ld		de,SEDDR				; No...Restore Ctlr Data reg pntr
.wait1:								;
		ioe	ld a, (de)			; Read LCD chip status
		and	a,0x40				; Wait until not busy (Retrace period)
		TCYC_DELAY
		jr		nz,.wait1
.no_wait1:
		ld		de,SEDDR				; Load pntr to LCD Ctrl Data Reg
		ld    a,(ix+pixel)
		ioe 	ld (de),a
#endasm
}



/*** BeginHeader glAnimation  */
void glAnimation (int OnOff);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *******************************************
glAnimation				<SED1335F.LIB>

SYNTAX:	      void glAnimation(int OnOff);

DESCRIPTION:   This function is used to enable/disable the graphic
               animation mode. The animation mode is defaulted OFF
               when the graphic driver is executed. This function
               is  non-reentrant.

					Note:
					-----
               The animation mode is intended to be used for special
               effects only. When using this mode, raster lines will be
               produced in your display image which may be undesirable
               for some applications, please use with caution.

PARAMETER1:    0 = Animation mode disabled.
               1 = Animation mode enabled.

RETURN VALUE:	None.

SEE ALSO:		graphic.lib

END DESCRIPTION **********************************************************/

nodebug
void glAnimation(int OnOff)
{
	animation = OnOff;
}


/*** BeginHeader glRealtime  */
void glRealtime (int OnOff);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *******************************************
glRealtime				<SED1335F.LIB>

SYNTAX:	      void glRealtime(int OnOff);

DESCRIPTION:   This function is used to enable/disable realtime
               mode for the glPlotDot function. The glPlotDot
               realtime mode is defaulted OFF when the graphic
               driver is executed. This function is non-reentrant.

PARAMETER1:    0 = Realtime mode disabled.
               1 = Realtime mode enabled.

RETURN VALUE:	None.

SEE ALSO:		graphic.lib, glPlotDot

END DESCRIPTION **********************************************************/

nodebug
void glRealtime(int OnOff)
{
	realtime = OnOff;
}


/*** BeginHeader glBackLight */
void glBackLight(int onOff);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *******************************************
glBackLight			<SED1335F.LIB>

SYNTAX:	      void glBackLight(int onOff);

DESCRIPTION:   Sets the backlight to either the ON or OFF state. This
               function is non-reentrant.

PARAMETER1:    0  sets the backlight OFF.
					1  sets the backlight ON.

RETURN VALUE:	None.

SEE ALSO:		glSetContrast, graphic.lib

END DESCRIPTION **********************************************************/

nodebug
void glBackLight(int onOff)
{
	if(onOff == 1)
		WrExtPort(0xA004, 0x01);
	else
		WrExtPort(0xA004, 0x00);
}

/*** BeginHeader glSetContrast */
void glSetContrast(int contrast);
/*** EndHeader */

/* START FUNCTION DESCRIPTION *******************************************
glSetContrast				<SED1335F.LIB>

SYNTAX:	      void glSetContrast(int contrast);

DESCRIPTION:   Sets the contrast, if the circuitry is installed.

					This function is non-reentrant and is an internal function,
					which is called by the function glContrast located in the
					graphic library. This function is non-reentrant.

PARAMETER:		Low to high values (0 - 31) will give you low to high
               contrast, repectively. (Most common setting is 20)

RETURN VALUE:	None.

SEE ALSO:		glBackLight, graphic.lib

END DESCRIPTION **********************************************************/

nodebug
void glSetContrast(int contrast)
{
	static current_contrast, initialized;
	auto int orig_contrast, i;

	#GLOBAL_INIT{initialized = 0;}

	if ((contrast < 0) || (contrast > 31))
	{
		return;
	}

	orig_contrast = contrast;
	if(!initialized)
	{
		// Initialize clock and chip select high...due to uP reset cycle
		WrExtPort(0xA008,  0x00);
		WrExtPort(0xA00A,  0x01);

		// Assert chip select and set chip to count-up
		WrExtPort(0xA009,  0x01);
		WrExtPort(0xA008,  0x01);

		// Clock trim pot to max limit
		for(i=0; i<32;i++)
		{
			WrExtPort(0xA00A,  0x00);
			WrExtPort(0xA00A,  0x01);
		}
		WrExtPort(0xA008,  0x00);
		initialized = TRUE;
		current_contrast = 0;
	}

	if(contrast > current_contrast)
	{
		// Set Counter direction and then assert chip select
		WrExtPort(0xA009,  0x00);
		WrExtPort(0xA008,  0x01);

		while(contrast > current_contrast)
		{
			WrExtPort(0xA00A,  0x00);
			WrExtPort(0xA00A,  0x01);
			contrast--;
		}
		WrExtPort(0xA008,  0x00);
	}
	else if(contrast < current_contrast)
	{
		// Set Counter direction and then assert chip select
		WrExtPort(0xA009,  0x01);
		WrExtPort(0xA008,  0x01);

		while(contrast < current_contrast)
		{
			WrExtPort(0xA00A,  0x00);
			WrExtPort(0xA00A,  0x01);
			contrast++;
		}
		WrExtPort(0xA008,  0x00);
	}
	current_contrast = orig_contrast;
}

/*** BeginHeader glDispOnOff */
void glDispOnOff(int onOff);
/*** EndHeader */

/* START _FUNCTION DESCRIPTION *******************************************
glDispOnOff			<SED1335F.LIB>

SYNTAX:	      void glDispOnOff(int onOff);

DESCRIPTION:	glDispOnOff is currently not supported...The graphic
               library requires that you provide a NULL function
	            if the feature isn't supported.

END DESCRIPTION **********************************************************/

nodebug
void glDispOnOff(int onOff)
{

}

/*** BeginHeader */
#endif
/*** EndHeader */