/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/* START LIBRARY DESCRIPTION *********************************************

Modbus_Slave_LP35xx					Ver 1.10


DESCRIPTION:	Dynamic C MODBus Slave user functions for a LP35xx.

This library contains functions specific to the targeted device.  The user
must complete each of the functions in this library based on the hardware
in the system.  These functions are independent of the communications
media being used: RS485, TCP/IP, etc.

The user program must execute the necessary functions to set up the board
I/O before starting the Modbus engine:
	brdInit, digOutConfig, digHoutConfig, etc.

ModBus standards define that all data is "big-endian."  Therefore ALL
multi-byte values are transmitted and received MSByte first.  This is the
reverse of the way the Rabbit handles data.  In general, most data values
are a single byte so this is not important.  However, the analog functions
all use multiple bytes - SO BE CAREFUL!

The following functions are defined:

mbsStart		pre-packet processing - usually an empty function
mbsDone		post-packet processing - usually an empty function

			Single Bit functions
mbsDigOutRd	return the state of a single output [0x01]
mbsDigIn		return the state of a single input [0x02]
mbsDigOut	set the state of a single output [0x05]

			Byte/Word functions
mbsRegOutRd	return the value of a holding register [0x03]
mbsRegIn		return the value of an input register [0x04]
mbsRegOut	set the state of a holding register [0x06]

The following describes the Modbus "channel numbers" and how they relate
to the LP35xx I/O:

mbsDigOutRd: ModBus function code 0x01 - read the state of output bits
	OUT 0..9 are channels 1..10

mbsDigIn: MODBUS function code 0x02 - read the state of an input bit
	IN 0..15 are channels 1..16

mbsRegOutRd: ModBus function code 0x03 - read registers
						  function code 0x16 - Mask Write Register
	OUT 00..07 = register 0
	OUT 08..09 = register 1

mbsRegIn: ModBus function code 0x04 - read an input register
					  function code 0x17 - Read/Write Multiple Registers
	OUT 00..07 = register 0
	OUT 08..09 = register 1
	IN  16..23 = register 2
	IN  24..31 = register 3

mbsDigOut: MODBUS function code 0x05 - set the state of an output bit
						function code 0x0F - set the state of multiple outputs

mbsRegOut: ModBus function code 0x06 - write to an I/O register
						function code 0x10 - write to multiple I/O registers
						function code 0x16 - Mask Write Register
						function code 0x17 - Read/Write Multiple Registers

These are the defined error return values:
MB_SUCCESS		// success
MB_BADFUNC		//	Illegal Function
MB_BADADDR		//	Illegal Data Address
MB_BADDATA		//	Illegal Data Value
MB_BUSY			//	Target is busy with another request
MB_NORESP		//	No response from target
MB_DEVNOTSET	// device not properly set up

These three functions are required for the LP3500 to communicate with a Modbus
Master via a serial port.  This implementation is specifically for an RS232 port.

MODBUS_Serial_Init initialize the serial port for 'downstream' devices
MODBUS_Serial_Tx	send a message to a 'downstream' device
MODBUS_Serial_Rx	receive a message from a 'downstream' device

END DESCRIPTION **********************************************************/


/*** BeginHeader */
#ifndef __MODBUS_SLAVE_LP35xx
#define __MODBUS_SLAVE_LP35xx

#ifndef MODBUS_SLAVE_DEBUG
#define MODBUS_SLAVE_DEBUG nodebug
#endif

// definitions for "special" functions:

#define MODBUS_SPECIAL_REG			1000
#define MODBUS_FLAGS0				MODBUS_SPECIAL_REG+999
#define MODBUS_ANALOG_OUT_BASE	2000
#define MODBUS_ANALOG_IN_BASE		3000

#define LOW 	0
#define HIGH 	1

#ifndef OUTPUT_ONE
	#define OUTPUT_ONE LOW
#endif

#ifndef INPUT_ONE
	#define INTPUT_ONE LOW
#endif

#ifndef BYTE_TIME
	#define BYTE_TIME		5	// maximum number of bytes to wait between received bytes
#endif

static union
{	float fpval;
   int intval[2];
} AnalogValue;

static union
{	unsigned long ulVal;
   int intVal[2];
} AnalogConfigVal;

char	a2dGainCode[8];
int	tempint;

#define serOP(_SP,B)			ser ## _SP ## open(B)
#define serCL(_SP)			ser ## _SP ## close()
#define serRD(_SP,A,B,C)	ser ## _SP ## read(A,B,C)
#define serRU(_SP)			ser ## _SP ## rdUsed()
#define serWU(_SP)			ser ## _SP ## wrUsed()
#define serWR(_SP,A,B)		ser ## _SP ## write(A,B)
#define serPk(_SP)			ser ## _SP ## peek()
#define serRF(_SP)			ser ## _SP ## rdFlush()
#define serWF(_SP)			ser ## _SP ## wrFlush()
#define serFCOn(_SP)			ser ## _SP ## flowcontrolOn()
#define serFCOff(_SP)		ser ## _SP ## flowcontrolOff()
#define serPC(_SP,A)			ser ## _SP ## putc(A)

#define serXopen(_SP,B)     	serOP(_SP,B)
#define serXclose(_SP)      	serCL(_SP)
#define serXread(_SP,A,B,C) 	serRD(_SP,A,B,C)
#define serXrdUsed(_SP)     	serRU(_SP)
#define serXwrUsed(_SP)     	serWU(_SP)
#define serXwrite(_SP,A,B)  	serWR(_SP,A,B)
#define serXpeek(_SP)			serPk(_SP)
#define serXrdFlush(_SP)    	serRF(_SP)
#define serXwrFlush(_SP)    	serWF(_SP)
#define serXflowCtrlOn(_SP)	serFCOn(_SP)
#define serXflowCtrlOff(_SP)	serFCOff(_SP)
#define serXputc(_SP,A)			serPC(_SP,A)


/*** EndHeader */


/**********************************************************************
The following are the Function Descriptions for the functions which
MUST be implemented by the customer.
**********************************************************************/


/* START FUNCTION DESCRIPTION *****************************************
mbsStart						<Modbus_Slave_xx.LIB>

NOTE: Modbus_Slave_LP35xx.LIB functions are generally not reentrant.

SYNTAX: void mbsStart()

DESCRIPTION: Called just before a received Modbus packet is processed,
this function is primarily intended to be used to lock resources so
that data returned in one Modbus response packet are atomic. Locking
resources may or may not be required, depending on how the Modbus functions
are implemented in a particular Modbus slave application. Note that Modbus
command handler functions in Modbus_slave_tcp.LIB may make multiple calls
to those functions while responding to a single Modbus command.

RETURN VALUE: None.
END DESCRIPTION ******************************************************/

/*** BeginHeader mbsStart */
void mbsStart	(	void );
/*** EndHeader */

MODBUS_SLAVE_DEBUG
void mbsStart ( void )
{
}


/* START FUNCTION DESCRIPTION *****************************************
mbsDone						<Modbus_Slave_LP35xx.LIB>

NOTE: Modbus_Slave_LP35xx.LIB functions are generally not reentrant.

SYNTAX: void mbsDone()

DESCRIPTION: Called just after a received Modbus command has been
processed and just before the reply is sent. This function is intended
to be used to unlock resources that were locked by msStart().  See msStart
for more details.

RETURN VALUE: None.
END DESCRIPTION ******************************************************/

/*** BeginHeader mbsDone */
void mbsDone	(	void );
/*** EndHeader */

MODBUS_SLAVE_DEBUG
void mbsDone ( void )
{
}


/* START FUNCTION DESCRIPTION *****************************************
mbsDigOutRd					<Modbus_Slave_LP35xx.LIB>

NOTE: Modbus_Slave_LP35xx.LIB functions are generally not reentrant.

ModBus function code = 0x01

SYNTAX: 			int mbsDigOutRd ( unsigned OutputNbr, int *pnState )

DESCRIPTION:	Read the specified output.  This function reads the state
						of the Rabbit output port

PARAMETER1:		output number: 0..9

PARAMETER2:		pointer to destination variable
						1 = output on
                  0 = output off

RETURN VALUE:	MB_SUCCESS = success
					MB_BADADDR = illegal channel
               MB_BADDATA = illegal data value
               MB_DEVNOTSET = I/O not set as output

END DESCRIPTION ******************************************************/

/*** BeginHeader mbsDigOutRd */
int mbsDigOutRd ( unsigned OutputNbr, int *pnState );
/*** EndHeader */

MODBUS_SLAVE_DEBUG
int mbsDigOutRd ( unsigned OutputNbr, int *pnState )
{	auto int i;

	if ( OutputNbr > 9 )
	{
		return MB_BADADDR;
	}
	if ( OutputNbr <= 7 )
	{
		i = BitRdPortI ( PDDR, OutputNbr );
	}
   else
	{
		i = BitRdPortI ( PEDR, OutputNbr-6 );
	}
	*pnState = i;
	return MB_SUCCESS;

} // mbsDigOutRd


/* START FUNCTION DESCRIPTION *****************************************
mbsDigIn						<Modbus_Slave_LP35xx.LIB>

ModBus function code = 0x02

NOTE: Modbus_Slave_LP35xx.LIB functions are generally not reentrant.

SYNTAX:			int mbsDigIn ( unsigned InputNbr, int *pnState )

DESCRIPTION:	Read the specified input

PARAMETER1:		input number: 0..15

PARAMETER2:		pointer to destination variable
						if INPUT_ONE is HIGH
							a '1' is returned if the input is high
                  if INPUT_ONE is LOW
                     a '1' is returned if the input is low

RETURN VALUE:	MB_SUCCESS = success
					MB_BADADDR = illegal channel
               MB_BADDATA = illegal data value
               MB_DEVNOTSET = I/O not set as output

END DESCRIPTION ******************************************************/

/*** BeginHeader mbsDigIn */
int mbsDigIn ( unsigned InputNbr, int *pnState );
/*** EndHeader */

MODBUS_SLAVE_DEBUG
int mbsDigIn ( unsigned InputNbr, int *pnState )
{
	if ( InputNbr > 15 )
	{
		return MB_BADADDR;
	}
	*pnState = INPUT_ONE?digIn(InputNbr):(1-digIn(InputNbr));
	return MB_SUCCESS;

} // mbsDigIn


/* START FUNCTION DESCRIPTION *****************************************
mbsRegOutRd					<Modbus_Slave_LP35xx.LIB>

NOTE: Modbus_Slave_LP35xx.LIB functions are generally not reentrant.

ModBus function code = 0x03

SYNTAX:			int mbsRegOutRd ( unsigned OutRegNbr, unsigned *pwValue )

DESCRIPTION:	Read an 8 bit output register.  This function reads the
						associated output port of the Rabbit.

PARAMETER1:		register number
						0 = DO 0..7
                  1 = DO 8,9

PARAMETER2:		pointer to destination variable
						for each bit: 0 = output is off, 1 = output is on

RETURN VALUE:	MB_SUCCESS = success
					MB_BADADDR = illegal channel
               MB_BADDATA = illegal data value
               MB_DEVNOTSET = I/O not set as output
END DESCRIPTION ******************************************************/

/*** BeginHeader mbsRegOutRd */
int mbsRegOutRd ( unsigned OutRegNbr, unsigned *pwValue );
/*** EndHeader */

MODBUS_SLAVE_DEBUG
int mbsRegOutRd ( unsigned OutRegNbr, unsigned *pwValue )
{	auto int i;

	if ( OutRegNbr > 1 )
	{
		return MB_BADADDR;
	}
   if ( OutRegNbr == 0 )
	{
		i = RdPortI ( PDDR );
	}
	else
	{
		i = (RdPortI (PEDR) >> 2) & 0x03;
	}
   *pwValue = i;
	return MB_SUCCESS;

} // mbsRegOutRd


/* START FUNCTION DESCRIPTION *****************************************
mbsRegIn						<Modbus_Slave_LP35xx.LIB>

NOTE: Modbus_Slave_LP35xx.LIB functions are generally not reentrant.

ModBus function code = 0x04

SYNTAX: 			int mbsRegIn ( unsigned InRegNbr, unsigned *pwValue )

DESCRIPTION:	Read an input register.

PARAMETER1:		register number
						0 = DI 0..7
                  1 = DI 8..15
               Special Registers: jlc not implemented yet
					3nnx = Analog Input where nn = A/D channel
                  	3nn0, 3nn1 = floating point volts
                     3nn2 = integer millivolts
                     3nn3 = integer raw value
                  note: see mbsRegOut for gain code storage

PARAMETER2:		pointer to destination variable

RETURN VALUE:	MB_SUCCESS = success
					MB_BADADDR = illegal channel
               MB_BADDATA = illegal data value
               MB_DEVNOTSET = I/O not set as output
END DESCRIPTION ******************************************************/

/*** BeginHeader mbsRegIn */
int mbsRegIn ( unsigned InRegNbr, unsigned *pwValue );
/*** EndHeader */

MODBUS_SLAVE_DEBUG
int mbsRegIn ( unsigned InRegNbr, unsigned *pwValue )
{	auto int channel, i, j;

	if ( InRegNbr < MODBUS_SPECIAL_REG )
   {
		if ( InRegNbr > 1 )
		{
			return MB_BADADDR;
		}
		*pwValue = digBankIn(InRegNbr);
   }
   else
   {	if ( InRegNbr >= (MODBUS_ANALOG_IN_BASE)  &&
   			InRegNbr <= (MODBUS_ANALOG_IN_BASE+999) )
      {	channel = ((InRegNbr%1000)/10) & 7; // only channels 0..7
			InRegNbr = InRegNbr - (channel*10);
      }

   	switch (InRegNbr)
		{
			case MODBUS_ANALOG_IN_BASE:	// if 3xx0, floating point volts
         	AnalogValue.fpval = anaInVolts ( channel, (int)a2dGainCode[channel] );
            *pwValue = AnalogValue.intval[0];
			break;

			case MODBUS_ANALOG_IN_BASE+1:	// if 3xx1, floating point volts
            *pwValue = AnalogValue.intval[1];
         break;

			case MODBUS_ANALOG_IN_BASE+2:	// if 3xx2, integer millivolts
         	AnalogValue.fpval = anaInVolts ( channel,(int)a2dGainCode[channel] );
				*pwValue = (unsigned)(AnalogValue.fpval*1000.0);
         break;

			case MODBUS_ANALOG_IN_BASE+3:	// if 3xx3, integer raw
         	*pwValue = anaIn ( channel,anaInConfigVal[channel],(int)a2dGainCode[channel] );
         break;

         default: return MB_BADADDR;
         break;
      }
   } // MODBUS_SPECIAL_REG
	return MB_SUCCESS;

} // mbsRegIn


/* START FUNCTION DESCRIPTION ********************************************
mbsDigOut						<Modbus_Slave_LP35xx.LIB>

NOTE: Modbus_Slave_LP35xx.LIB functions are generally not reentrant.

MODBUS command = 0x05, 0x0F

SYNTAX:     	int mbsdigOut ( unsigned OutputNbr, int state );

DESCRIPTION:	turn the specified output on or off

PARAMETER1:		output channel number
						channels 0..7 = sinking
                  channels 8, 9 = sourcing
                  channel 10    = relay

PARAMETER2:		output state
                  if OUTPUT_ONE is HIGH
							1 = turn output on
                  if INPUT_ONE is LOW
                     1 = turn output off

RETURN VALUE:	MB_SUCCESS = success
					MB_BADADDR = illegal channel
               MB_BADDATA = illegal data value
               MB_DEVNOTSET = I/O not set as output

SEE ALSO: 		brdInit, digOutConfig

END DESCRIPTION **********************************************************/

/*** BeginHeader mbsDigOut */
int mbsDigOut ( unsigned OutputNbr, int state );
/*** EndHeader */

MODBUS_SLAVE_DEBUG
int mbsDigOut ( unsigned OutputNbr, int state )
{
	if ( OutputNbr > 10 )
	{
		return MB_BADADDR;
	}

   // removed below line since some modbus masters send 0xFF00
   // to indicate the on state
   //if ( (state < 0) || (state > 1) ) return MB_BADDATA;

   // added the below line to make sure if not 0 set to 1
   state = (state!=0?1:0);

	if ( OutputNbr <= 9 )
	{
		digOut ( OutputNbr,OUTPUT_ONE?state:(1-state) );
	}
   else
	{
		relayOut ( 0, state );
	}
   return MB_SUCCESS;

} // mbsDigOut


/* START FUNCTION DESCRIPTION *****************************************
mbsRegOut						<Modbus_Slave_LP35xx.LIB>

NOTE: Modbus_Slave_LP35xx.LIB functions are generally not reentrant.

ModBus function codes = 0x06, 0x10, 0x16 and 0x17,

SYNTAX: 			int mbsRegOut ( unsigned OutRegNbr, unsigned wValue )

DESCRIPTION: 	write to an I/O register

PARAMETER1:		register number
						0 = DO 0..7
                  1 = DO 8, 9
               Special Registers: jlc not implemented yet
                  2nnx = Analog Output where nn = PWM channel 0..2
                  	2xx0, 2xx1 = floating point dutycycle: see pwmOut
                     2nn2 = integer dutycycle * 10 (0 to 1000): 500 = 50%
                     2xx3 = integer raw value: see pwm_set
							2008, 2009 = unsigned long frequency: see pwmoutConfig
						3nnx = Analog Input where nn = A/D channel
							3nn8 = integer operating mode: see anaIn
                     			nn = channel 0..7
                     3nn9 = integer gain code used for mbsRegIn: 0..7
                  1999 = misc. configuration bits

PARAMETER2:		register value (each bit)
						0 = turn output off
                  1 = turn output on

RETURN VALUE:	MB_SUCCESS = success
					MB_BADADDR = illegal channel
               MB_BADDATA = illegal data value
               MB_DEVNOTSET = I/O not set as output
END DESCRIPTION ******************************************************/

/*** BeginHeader mbsRegOut */
int mbsRegOut ( unsigned OutRegNbr, unsigned wValue );
int anaInConfigVal[8];
/*** EndHeader */

MODBUS_SLAVE_DEBUG
int mbsRegOut ( unsigned OutRegNbr, unsigned wValue )
{	auto int channel;
	auto float fValue;	//temp dutycycle float use for 2xx2

#GLOBAL_INIT
{	for (tempint=0; tempint<=7; tempint++ )
		a2dGainCode[tempint] = anaInConfigVal[tempint] = 0;
}

	if( OutRegNbr >= MODBUS_SPECIAL_REG)// && OutRegNbr <= MODBUS_SPECIAL_REG+999 )
   {  if ( OutRegNbr >= (MODBUS_ANALOG_OUT_BASE)  &&
   			OutRegNbr <= (MODBUS_ANALOG_IN_BASE+999) )
      {	channel = ((OutRegNbr%1000)/10) & 7; // only channels 0..7
			OutRegNbr = OutRegNbr - (channel*10);
      }

   	switch(OutRegNbr)
      {
         case MODBUS_FLAGS0: 	MODBUS_flags0 = wValue;
			break;

         case MODBUS_ANALOG_OUT_BASE:	// floating point dutycycle - 1st word
         	AnalogValue.intval[0] = wValue;
         break;

         case MODBUS_ANALOG_OUT_BASE+1:// floating point dutycycle - 2nd word
         	AnalogValue.intval[1] = wValue;
         	pwmOut( channel, AnalogValue.fpval );
         break;

         case MODBUS_ANALOG_OUT_BASE+2:// integer dutycycle
            fValue = (float)wValue/1000.0;
         	pwmOut( channel, fValue );
         break;

         case MODBUS_ANALOG_OUT_BASE+3:// integer raw count
            pwm_set( channel, wValue, 0);
         break;

         case MODBUS_ANALOG_OUT_BASE+8:// unsigned long frequency - 1st word
         	AnalogConfigVal.intVal[0] = wValue;
         break;

			case MODBUS_ANALOG_OUT_BASE+9:// unsigned long frequency - 2nd word
         	AnalogConfigVal.intVal[1] = wValue;
            AnalogConfigVal.ulVal = pwmOutConfig( AnalogConfigVal.ulVal );
         break;

         case MODBUS_ANALOG_IN_BASE+8:	// integer operating mode
         	anaInConfigVal[channel] = wValue;
         break;

         case MODBUS_ANALOG_IN_BASE+9:	// integer gain code
				a2dGainCode[channel] = (char)wValue & 0x07;
         break;
      }
   }
	else if ( OutRegNbr <= 1 )
	{
		digBankOut ( OutRegNbr, wValue );
	}
   else
	{
		return MB_BADADDR;
	}
   return MB_SUCCESS;

} // mbsRegOut


/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

/* The following functions are for communicating with "downstream"
MODBUS devices connected to a serial port on this unit.  They can remain
blank functions if there are no such devices - do NOT delete the blank
functions.
*/

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/


/* START FUNCTION DESCRIPTION ********************************************
MODBUS_Serial_Init		<Modbus_Slave_LP35xx.lib>

SYNTAX:        int MODBUS_Serial_Init ();

DESCRIPTION:	Initialize the serial port for RS485 operation
					Requires the following macros:
               	MODBUS_PORT		B, C, E or F
               	MODBUS_BAUD		desired baud rate
                  SERIAL_MODE:
                     Mode 	Port B      	Port C    		Port E			Port F
							----  -----------    ----------     -----------		-----------
							0		RS232 3wire   	RS232 3wire 	RS232 3wire		RS485 3wire
							1		RS232 5wire		CTS/RTS			RS232	3wire		RS485 3wire
                     * make sure MODBUS_PORT agrees with SERIAL_MODE

					Calculate Serial_timeout, used by MODBUS_Serial_Rx,
					as the timeout between bytes once a byte has been
					received: 5 byte times or 2msec, whichever is greater.

PARAMETER1:		none

RETURN VALUE:	MB_SUCCESS
					MB_BADDATA if illegal SERIAL_MODE

Notes:	1. Define the macro USE_MODBUS_CRC in order to use the standard Modbus
				CRC calculation.
			2. Be sure to execute the brdInit function.

END DESCRIPTION **********************************************************/

/*** BeginHeader MODBUS_Serial_Init */
int MODBUS_Serial_Init ();
extern int Serial_timeout;
/*** EndHeader */

int Serial_timeout;

MODBUS_SLAVE_DEBUG
int MODBUS_Serial_Init ( void )
{	auto float timeout;

   if(serMode(SERIAL_MODE) != 0)	return MB_BADDATA;

	timeout = BYTE_TIME*11*1000.0/(float)MODBUS_BAUD; // time for BYTE_TIME bytes in msec
   Serial_timeout = (int)(timeout+.5);	// convert to integer
   if ( Serial_timeout < 2 )
	{
		Serial_timeout = 2; // insure minimum delay
	}

   serXopen ( MODBUS_PORT, MODBUS_BAUD );
#ifdef USE_RS485
	ser485Rx();									// disable the RS485 transmitter
#endif
   serXrdFlush(MODBUS_PORT);				// clear the read FIFO
	MODBUS_flags0 = 0;						// initialize special flags
	return MB_SUCCESS;
} // MODBUS_Serial_Init

/* START FUNCTION DESCRIPTION ********************************************
MODBUS_Serial_Tx			<Modbus_Slave_LP35xx.lib>

SYNTAX:			int MODBUS_Serial_Tx ( char *Packet, int ByteCount );

DESCRIPTION:	Transmit a Modbus packet to a "downstream" device.
					Calculate the CRC and append to the packet.

PARAMETER1:		address of packet - must have two byte pad at end for
					inclusion of CRC word

PARAMETER2:		number of bytes in the packet

RETURN VALUE:	MB_SUCCESS

Note: define the macro USE_MODBUS_CRC in order to use the standard Modbus
			CRC calculation

END DESCRIPTION **********************************************************/

/*** BeginHeader MODBUS_Serial_Tx */
int MODBUS_Serial_Tx ( char *Packet, int ByteCount );
/*** EndHeader */

MODBUS_SLAVE_DEBUG
int MODBUS_Serial_Tx ( char *Packet, int ByteCount )
{	auto int CalcCRC,i;

// insert CRC
#ifndef USE_MODBUS_CRC
	CalcCRC = getcrc ( Packet, ByteCount, 0xFFFF );
	Packet[ByteCount] = CalcCRC;			// store low byte
	Packet[ByteCount+1] = CalcCRC>>8;	// store high byte
#else
	CalcCRC = MODBUS_CRC(Packet, ByteCount);
	Packet[ByteCount+1] = CalcCRC;		// store low byte
	Packet[ByteCount] = CalcCRC>>8;		// store high byte
#endif
	ByteCount+=2;								// adjust for CRC

#if MODBUS_DEBUG_PRINT & 8
	printf ( "Ser Tx:" );
	for ( i=0; i<ByteCount; i++ ) printf ( " %02X", Packet[i] );
	printf ( "\n\r" );
#endif

#ifdef USE_RS485
	ser485Tx();									// enable the RS485 transmitter
   serXrdFlush(MODBUS_PORT);				// clear the read FIFO
	serXwrite ( MODBUS_PORT, Packet, ByteCount );		// send the data
	while ( serXrdUsed(MODBUS_PORT) != ByteCount ); // wait for all bytes to be transmitted
   ser485Rx();									// disable the RS485 transmitter
   serXrdFlush(MODBUS_PORT);								// clear the read FIFO
#else
	serXwrite ( MODBUS_PORT, Packet, ByteCount );		// send the data
#endif
	return MB_SUCCESS;						// show success
} // MODBUS_Serial_Tx

/* START FUNCTION DESCRIPTION *********************************************
MODBUS_Serial_Rx			<Modbus_Slave_LP35xx.lib>

DESCRIPTION:	Receive the response from the Modbus Slave
					Uses the global variable Serial_timeout
					It is the responsibility of the caller to handle
					a timeout if required.

PARAMETER1:		address to put the data

RETURN VALUE:	0 = no message
					+n = number of bytes with valid CRC
               MB_CRC_ERROR = invalid CRC

Note: define the macro USE_MODBUS_CRC in order to use the standard Modbus
			CRC calculation

END DESCRIPTION **********************************************************/
/*** BeginHeader MODBUS_Serial_Rx */
int MODBUS_Serial_Rx ( char * DataAddress );
/*** EndHeader */

MODBUS_SLAVE_DEBUG
int MODBUS_Serial_Rx ( char * DataAddress )
{	auto int RxCRC, CalcCRC;
	auto int ByteCount,i, reg, p1;

	ByteCount = serXread(MODBUS_PORT,DataAddress, 100, Serial_timeout );
   if ( ByteCount )
   {
	#if MODBUS_DEBUG_PRINT & 8
		printf ( "\n\rSer Rx:" );
		for ( i=0; i<ByteCount; i++ ) printf ( " %02X", DataAddress[i] );
	#endif
   	ByteCount -= 2;						// adjust for CRC

	#ifndef USE_MODBUS_CRC
		CalcCRC = getcrc ( DataAddress, ByteCount, 0xFFFF );
		RxCRC = DataAddress[ByteCount] & 0x00FF; // LSByte
   	i = DataAddress[ByteCount+1]<<8;	// MSByte
	#else
		CalcCRC = MODBUS_CRC(DataAddress, ByteCount);
		RxCRC = DataAddress[ByteCount+1] & 0x00FF; // LSByte
   	i = DataAddress[ByteCount]<<8;	// MSByte
	#endif
   	RxCRC = RxCRC | ( i & 0xFF00 );	// merge bytes

	#if MODBUS_DEBUG_PRINT & 4
   	reg = DataAddress[2];
      reg = (reg<<8) + (int)DataAddress[3];
		p1 = DataAddress[4];
      p1 = (p1<<8) + (int)DataAddress[5];
		printf ( "\n\rSer Rx: Addr=%02d Function=%02X Reg=%04d P1=%04d  Calc CRC=%04X\n\r",
      	DataAddress[0], DataAddress[1], reg, p1, CalcCRC );
	#endif

	   if ( CalcCRC != RxCRC )
		{
			ByteCount = MB_CRC_ERROR;
		}
   }
   return ByteCount;
} // MODBUS_Serial_Rx

/*** BeginHeader */
#endif	// __MODBUS_SLAVE_LP35xx
/*** EndHeader */

